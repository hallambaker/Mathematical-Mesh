<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Goedel.FSR</name>
    </assembly>
    <members>
        <member name="T:Goedel.FSR.FsrException">
            <summary>
            Base class for Finite State Recognizer exceptions.
            </summary>
        </member>
        <member name="P:Goedel.FSR.FsrException.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="F:Goedel.FSR.FsrException.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.FSR.FsrException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.FSR.FsrException._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="F:Goedel.FSR.FsrException.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.FSR.Accumulate">
            <summary>
            String builder stripping leading and trailing whitespace.
            </summary>
        </member>
        <member name="M:Goedel.FSR.Accumulate.Clear">
            <summary>
            Reset all buffers.
            </summary>
        </member>
        <member name="M:Goedel.FSR.Accumulate.AddCurrent(System.Int32)">
            <summary>
            Add character to the accumulator stripping leading and trailing whitespace.
            </summary>
            <param name="c">Character to add</param>
        </member>
        <member name="M:Goedel.FSR.Accumulate.CurrentItem">
            <summary>
            Get the value of the current item and clear the input buffers.
            </summary>
            <returns>The current item as a string.</returns>
        </member>
        <member name="T:Goedel.FSR.Lexer">
            <summary>
            Lexical analyzer using table generated by FSRGen.
            </summary>
        </member>
        <member name="P:Goedel.FSR.Lexer.CharacterMappings">
            <summary>Maps characters to character groups.</summary>
        </member>
        <member name="P:Goedel.FSR.Lexer.CompressedTransitions">
            <summary>Compresset transition table maps character group to next state</summary>
        </member>
        <member name="F:Goedel.FSR.Lexer.Actions">
            <summary>Actions to perform on transition into specified state.</summary>
        </member>
        <member name="F:Goedel.FSR.Lexer.StateInt">
            <summary>The state before the current token was read.</summary>
        </member>
        <member name="F:Goedel.FSR.Lexer.NextState">
            <summary>The state to transition to. This can be overriden in an action
            to change the state table</summary>
        </member>
        <member name="F:Goedel.FSR.Lexer.Trace">
            <summary>
            If set true, debug tracing is enabled
            </summary>
        </member>
        <member name="M:Goedel.FSR.Lexer.GetTokenInt(System.Int32)">
            <summary>
            Get the next token calling all token actions while the
            stream is read.
            </summary>
            <param name="StartState">The initial state</param>
            <returns>The value of the token recognized.</returns>
        </member>
        <member name="M:Goedel.FSR.Lexer.Push(System.Int32)">
            <summary>
            Process a character of text
            </summary>
            <param name="c">Character to process</param>
            <returns>True if the character was accepted, otherwise must retry</returns>
        </member>
        <member name="M:Goedel.FSR.Lexer.Push(System.String)">
            <summary>
            Process a string of text, a character at a time.
            </summary>
            <param name="Text">Text to process</param>
        </member>
        <member name="M:Goedel.FSR.Lexer.PushStart">
            <summary>
            Called at the start of a Push parser session. May be overriden in subclasses to 
            initialize output.
            </summary>
        </member>
        <member name="M:Goedel.FSR.Lexer.PushEnd(System.String)">
            <summary>
            Called at the end of a Push parser session. May be overriden in subclasses to 
            flush output.
            </summary>
            <param name="Text">Text to push into the parser.</param>
        </member>
        <member name="T:Goedel.FSR.Lexer.ActionDelegate">
            <summary>
            FSR action
            </summary>
            <param name="c">Character that was read to cause the transition.</param>
        </member>
        <member name="M:Goedel.FSR.Lexer.Init">
            <summary>
            Initialization method called when Lexer is created.
            </summary>
        </member>
        <member name="F:Goedel.FSR.Lexer.Reader">
            <summary>
            The lexical reader
            </summary>
        </member>
        <member name="M:Goedel.FSR.Lexer.#ctor(Goedel.FSR.LexReader)">
            <summary>
            Create new instance for the specified reader.
            </summary>
            <param name="Reader">Input data</param>
        </member>
        <member name="M:Goedel.FSR.Lexer.#ctor">
            <summary>
            Create new instance for the specified reader.
            </summary>
        </member>
        <member name="M:Goedel.FSR.Lexer.Reset">
            <summary>
            Reset method. Is called at the start of each
            call to GetTokenInt.
            </summary>
        </member>
        <member name="M:Goedel.FSR.Lexer.Disposing">
            <summary>
            The class specific disposal routine.
            </summary>
        </member>
        <member name="T:Goedel.FSR.LexReader">
            <summary>
            Wrapper class for stream or textreader which provides the get character
            and unget character methods needed for the lexical analyzer. For convenience,
            </summary>
        </member>
        <member name="F:Goedel.FSR.LexReader.FilePath">
            <summary>
            File path of input document, used for generating error messages.
            </summary>
        </member>
        <member name="F:Goedel.FSR.LexReader.EOF">
            <summary>If true, stream has been read to end of file.</summary>
        </member>
        <member name="F:Goedel.FSR.LexReader.LastInt">
            <summary>Last character read (as integer)</summary>
        </member>
        <member name="P:Goedel.FSR.LexReader.LastChar">
            <summary>Last character read.</summary>
        </member>
        <member name="M:Goedel.FSR.LexReader.#ctor">
            <summary>
            Create new lexical analyzer
            </summary>
        </member>
        <member name="M:Goedel.FSR.LexReader.#ctor(System.String)">
            <summary>
            Create new lexical analyzer
            </summary>
        </member>
        <member name="M:Goedel.FSR.LexReader.#ctor(System.IO.Stream)">
            <summary>
            Create new lexical analyzer
            </summary>
            <param name="Stream">Input data</param>
        </member>
        <member name="M:Goedel.FSR.LexReader.#ctor(System.IO.TextReader)">
            <summary>
            Create new lexical analyzer
            </summary>
            <param name="TextReader">Input data</param>
        </member>
        <member name="M:Goedel.FSR.LexReader.Init(System.IO.Stream)">
            <summary>
            Initialize the reader
            </summary>
            <param name="stream">Input data</param>
        </member>
        <member name="M:Goedel.FSR.LexReader.Init(System.IO.TextReader)">
            <summary>
            Initialize the reader
            </summary>
            <param name="textReader">Input data</param>
        </member>
        <member name="M:Goedel.FSR.LexReader.Disposing">
            <summary>
            Free resources.
            </summary>
        </member>
        <member name="M:Goedel.FSR.LexReader.Get">
            <summary>
            Get the next character from the lexical stream ignoring CR characters.
            </summary>
            <returns>true if the action succeeded, false otherwise.</returns>
        </member>
        <member name="M:Goedel.FSR.LexReader.GetBinary">
            <summary>
            Get the next character from the lexical stream.
            </summary>
            <returns>true if the action succeeded, false otherwise.</returns>
        </member>
        <member name="M:Goedel.FSR.LexReader.UnGet">
            <summary>
            Unget the last character read. Only one character is buffered, multiple calls to 
            unget without calling get() have no effect.
            </summary>
        </member>
        <member name="T:Goedel.FSR.LexStringReader">
            <summary>
            Lexical reader reading from string input.
            </summary>
        </member>
        <member name="P:Goedel.FSR.LexStringReader.String">
            <summary>
            Set the data value and reset the read index.
            </summary>
        </member>
        <member name="M:Goedel.FSR.LexStringReader.Disposing">
            <summary>
            Free resources.
            </summary>
        </member>
        <member name="M:Goedel.FSR.LexStringReader.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="data">The string to be read.</param>
        </member>
        <member name="M:Goedel.FSR.LexStringReader.Get">
            <summary>
            Get the next character from the lexical stream ignoring CR characters.
            </summary>
            <returns>true if the action succeeded, false otherwise.</returns>
        </member>
        <member name="M:Goedel.FSR.LexStringReader.UnGet">
            <summary>
            Unget the last character read. Only one character is buffered, multiple calls to 
            unget without calling get() have no effect.
            </summary>
        </member>
        <member name="T:Goedel.FSR.NamespaceDoc">
            <summary>
            Support library for Finite State Recognizers built using the FSR tool.
            </summary>
        </member>
    </members>
</doc>
