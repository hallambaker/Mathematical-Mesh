<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Goedel.Presence.Server</name>
    </assembly>
    <members>
        <member name="T:Goedel.Presence.Server.PresenceServiceExtensions">
            <summary>
            Extensions class for adding a Mesh Service Provider to a host.
            </summary>
        </member>
        <member name="M:Goedel.Presence.Server.PresenceServiceExtensions.AddPresenceService(Microsoft.Extensions.Hosting.IHostBuilder)">
            <summary>
            Inject Mesh service and options to the builder <paramref name="host"/>
            </summary>
            <param name="host">The service to inject.</param>
            <returns>The value of <paramref name="host"/> for chaining.</returns>
        </member>
        <member name="T:Goedel.Presence.Server.PresenceConfiguredService">
            <summary>
            A Mesh service provider in a form suited for dependency injection.
            </summary>
        </member>
        <member name="P:Goedel.Presence.Server.PresenceConfiguredService.PresenceServiceConfiguration">
            <summary>The resolver configuration.</summary> 
        </member>
        <member name="P:Goedel.Presence.Server.PresenceConfiguredService.GenericHostConfiguration">
            <summary>The generic host configuration.</summary> 
        </member>
        <member name="P:Goedel.Presence.Server.PresenceConfiguredService.Logger">
            <summary>The logger interface.</summary> 
        </member>
        <member name="P:Goedel.Presence.Server.PresenceConfiguredService.PresenceServer">
            <summary>The resolver service context.</summary> 
        </member>
        <member name="P:Goedel.Presence.Server.PresenceConfiguredService.JpcInterface">
            <inheritdoc/>
        </member>
        <member name="P:Goedel.Presence.Server.PresenceConfiguredService.Endpoints">
            <inheritdoc/>
        </member>
        <member name="M:Goedel.Presence.Server.PresenceConfiguredService.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Goedel.Presence.Server.PresenceConfiguredService.#ctor(Microsoft.Extensions.Logging.ILogger{Goedel.Protocol.GenericHost.ManagedListener},Goedel.Mesh.IMeshMachine,Goedel.Protocol.Service.HostMonitor,Microsoft.Extensions.Options.IOptionsMonitor{Goedel.Presence.Server.PresenceServiceConfiguration},Microsoft.Extensions.Options.IOptionsMonitor{Goedel.Protocol.GenericHostConfiguration})">
            <summary>
            Mesh service provider instance configured with options specifie in 
            <paramref name="meshHostConfiguration"/> and <paramref name="genericHostConfiguration"/>.
            </summary>
            <param name="logger">The system logger service.</param>
            <param name="meshMachine">The Mesh machine instance.</param>
            <param name="hostMonitor">The host monitor for tracking host load and performance.</param>
            <param name="meshHostConfiguration">The Mesh service configuration.</param>
            <param name="genericHostConfiguration">The host configuration.</param>
        </member>
        <member name="M:Goedel.Presence.Server.PresenceConfiguredService.GetPresenceProvider">
            <inheritdoc/>
        </member>
        <member name="T:Goedel.Presence.Server.TBS">
            <summary>
            TBS
            </summary>
        </member>
        <member name="P:Goedel.Presence.Server.TBS.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Presence.Server.TBS.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Presence.Server.TBS.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Presence.Server.TBS._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Presence.Server.TBS.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Presence.Server.EventExtensions">
            <summary>
            Extensions class defining logging events and convenience methods.
            </summary>
        </member>
        <member name="M:Goedel.Presence.Server.EventExtensions.#cctor">
            <summary>
            Static initializer, is called once when the module loads.
            </summary>
        </member>
        <member name="T:Goedel.Presence.Server.NamespaceDoc">
            <summary>
            Desctiption of the 
            </summary>
        </member>
        <member name="T:Goedel.Presence.Server.PresenceBindingAccount">
            <summary>
            Tracks an account with device(s) connected to the service.
            </summary>
        </member>
        <member name="P:Goedel.Presence.Server.PresenceBindingAccount.Bitmask">
            <summary>
            Bitmask describing the set of catalogs that were updated.
            </summary>
        </member>
        <member name="P:Goedel.Presence.Server.PresenceBindingAccount.Serial">
            <summary>
            The presence serial value.
            </summary>
        </member>
        <member name="F:Goedel.Presence.Server.PresenceBindingAccount.AccountId">
            <summary>The account identifier.</summary> 
        </member>
        <member name="P:Goedel.Presence.Server.PresenceBindingAccount.FirstContact">
            <summary>Time at which the binding was created.</summary> 
        </member>
        <member name="P:Goedel.Presence.Server.PresenceBindingAccount.LastContact">
            <summary>Time at which the binding was last used.</summary> 
        </member>
        <member name="P:Goedel.Presence.Server.PresenceBindingAccount.ConnectedDevices">
            <summary>Dictionary of connected devices.</summary> 
        </member>
        <member name="T:Goedel.Presence.Server.PresenceBindingDevice">
            <summary>
            Tracks a device connected to the service.
            </summary>
        </member>
        <member name="P:Goedel.Presence.Server.PresenceBindingDevice.DeviceState">
            <summary>State of the device connection</summary> 
        </member>
        <member name="F:Goedel.Presence.Server.PresenceBindingDevice.ConnectionId">
            <summary>The unique connection ID assigned by the service.</summary> 
        </member>
        <member name="P:Goedel.Presence.Server.PresenceBindingDevice.DeviceId">
            <inheritdoc/>
        </member>
        <member name="P:Goedel.Presence.Server.PresenceBindingDevice.DeviceStatus">
            <inheritdoc/>
        </member>
        <member name="P:Goedel.Presence.Server.PresenceBindingDevice.AccountBinding">
            <summary>The corresponding account binding.</summary> 
        </member>
        <member name="P:Goedel.Presence.Server.PresenceBindingDevice.FirstContact">
            <summary>Time at which the binding was created.</summary> 
        </member>
        <member name="P:Goedel.Presence.Server.PresenceBindingDevice.LastContact">
            <summary>Time at which the binding was last used.</summary> 
        </member>
        <member name="P:Goedel.Presence.Server.PresenceBindingDevice.Expire">
            <summary>Time at which the binding was last used.</summary> 
        </member>
        <member name="P:Goedel.Presence.Server.PresenceBindingDevice.CurrentEndpoint">
            <summary>The last endpoint from which the device was accessed.</summary> 
        </member>
        <member name="P:Goedel.Presence.Server.PresenceBindingDevice.LastConnectionSerial">
            <summary>Monotonically increasing connection request counter. To prevent replay
            attacks, a connection request MUST be rejected unless it contains a greater or equal
            serial number.</summary> 
        </member>
        <member name="P:Goedel.Presence.Server.PresenceBindingDevice.LastSerial">
            <summary>Monotonically increasing message request counter. </summary> 
        </member>
        <member name="P:Goedel.Presence.Server.PresenceBindingDevice.Notify">
            <summary>When set, there is a pending notification to be sent to the device.</summary> 
        </member>
        <member name="P:Goedel.Presence.Server.PresenceBindingDevice.EncryptKey">
            <summary>The shared secret to be used to encrypt outbound messages</summary> 
        </member>
        <member name="P:Goedel.Presence.Server.PresenceBindingDevice.DecryptKey">
            <summary>The shared secret to be used to decrypt inbound messages</summary>
        </member>
        <member name="M:Goedel.Presence.Server.PresenceBindingDevice.GetPackets">
            <summary>
            Compile a packet sequence providing notification of the current status.
            </summary>
            <returns></returns>
            <exception cref="T:Goedel.Utilities.NYI"></exception>
        </member>
        <member name="P:Goedel.Presence.Server.PresenceBindingDevice.WakeAt">
            <inheritdoc/>
        </member>
        <member name="M:Goedel.Presence.Server.PresenceBindingDevice.CompareTo(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Goedel.Presence.Server.PresenceBindingDevice.GetDeviceStatus">
            <summary>
            Return the status of the devices attached.
            </summary>
            <returns></returns>
            <exception cref="T:Goedel.Utilities.NYI"></exception>
        </member>
        <member name="T:Goedel.Presence.Server.PresenceServer">
            <summary>
            The presence service.
            </summary>
        </member>
        <member name="P:Goedel.Presence.Server.PresenceServer.UdpServiceIpv4">
            <summary>Client for IPv4 traffic.</summary> 
        </member>
        <member name="P:Goedel.Presence.Server.PresenceServer.UdpServiceIpv6">
            <summary>Client for IPv6 traffic.</summary> 
        </member>
        <member name="P:Goedel.Presence.Server.PresenceServer.IP">
            <summary>List of bound IP addresses.</summary> 
        </member>
        <member name="P:Goedel.Presence.Server.PresenceServer.UdpEndpoints">
            <summary>List of bound endpoints.</summary> 
        </member>
        <member name="P:Goedel.Presence.Server.PresenceServer.TimeOutInitialMilliSeconds">
            <summary>Time to wait before cancelling connection request.</summary> 
        </member>
        <member name="P:Goedel.Presence.Server.PresenceServer.TimeOutHeartbeatMilliSeconds">
            <summary>Time to wait before the first heartbeat overdue notice is 
            sent in milliseconds.</summary> 
        </member>
        <member name="P:Goedel.Presence.Server.PresenceServer.TimeOut2MilliSeconds">
            <summary>Time to wait before the second overdue notice is sent in 
            milliseconds.</summary> 
        </member>
        <member name="P:Goedel.Presence.Server.PresenceServer.UdpSocketListeners">
            <summary>The number of socket listeners to deploy per service.</summary> 
        </member>
        <member name="F:Goedel.Presence.Server.PresenceServer.PendingQueue">
            <summary>The queue of pending items associated with a device.</summary> 
        </member>
        <member name="P:Goedel.Presence.Server.PresenceServer.ImmediateQueue">
            <summary>Queue of items for immediate processing.</summary> 
        </member>
        <member name="M:Goedel.Presence.Server.PresenceServer.Disposing">
            <inheritdoc/>
        </member>
        <member name="M:Goedel.Presence.Server.PresenceServer.#ctor(Goedel.Mesh.IMeshMachine,Goedel.Protocol.GenericHostConfiguration,Goedel.Presence.Server.PresenceServiceConfiguration,Microsoft.Extensions.Logging.ILogger{Goedel.Protocol.GenericHost.ManagedListener})">
            <summary>
            Default constructor, returns an empty instance.
            </summary>
        </member>
        <member name="M:Goedel.Presence.Server.PresenceServer.Initialize(System.Collections.Generic.IEnumerable{Goedel.Protocol.IConfguredService})">
            <inheritdoc/>
        </member>
        <member name="M:Goedel.Presence.Server.PresenceServer.WaitQueuedTasks">
            <summary>
            Thread to process queued tasks.
            </summary>
        </member>
        <member name="M:Goedel.Presence.Server.PresenceServer.Send(System.Net.Sockets.UdpClient,System.Byte[],System.Int32,System.Net.IPEndPoint)">
            <summary>
            Send UDP packet. This function is made into a method to allow for testing.
            </summary>
            <param name="client"></param>
            <param name="packet"></param>
            <param name="bytes"></param>
            <param name="endPoint"></param>
        </member>
        <member name="M:Goedel.Presence.Server.PresenceServer.GetClient(System.Net.IPEndPoint)">
            <summary>
            Returns the UdpClient to be used to send a packet to the address 
            <paramref name="endPoint"/>
            </summary>
            <param name="endPoint">The endpoint to send to.</param>
            <returns>The client to use.</returns>
        </member>
        <member name="M:Goedel.Presence.Server.PresenceServer.GetEndPoint(Goedel.Mesh.Server.AccountHandleLocked)">
            <inheritdoc/>
        </member>
        <member name="M:Goedel.Presence.Server.PresenceServer.GetDevices(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Goedel.Presence.Server.PresenceServer.Notify(System.String,System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="T:Goedel.Presence.Server.PresenceServiceConfiguration">
            <summary>
            The Mesh service configuration.
            </summary>
        </member>
        <member name="P:Goedel.Presence.Server.PresenceServiceConfiguration.IP">
            <summary>The IP address and port numbers</summary> 
        </member>
        <member name="F:Goedel.Presence.Server.PresenceServiceConfiguration.UdpSocketListeners">
            <summary>Number of UDP socket listeners per protocol.</summary> 
        </member>
        <member name="P:Goedel.Presence.Server.PresenceServiceConfiguration.PresenceDNS">
            <summary>The sevice address of the registry to resolve.</summary> 
        </member>
        <member name="F:Goedel.Presence.Server.PresenceServiceConfiguration.ConfigurationEntry">
            <summary>The configuration entry.</summary> 
        </member>
        <member name="M:Goedel.Presence.Server.PresenceServiceConfiguration.GetConfigurationEntry">
            <inheritdoc/>
        </member>
        <member name="M:Goedel.Presence.Server.PresenceServiceConfiguration.Create(Goedel.Mesh.Client.IMeshMachineClient,Goedel.Protocol.GenericHostConfiguration,System.String)">
            <summary>
            Create a new instance and return the corresponding configuration file.
            </summary>
            <param name="meshMachine">The mesh machine.</param>
            <param name="GenericHostConfiguration">Generic service configuration.</param>
            <param name="service">The service endpoing.</param>
            <returns>The configuration setting,</returns>
        </member>
    </members>
</doc>
