<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Goedel.Presence.Client</name>
    </assembly>
    <members>
        <member name="T:Goedel.Presence.Client.MessageId">
            <summary>
            Message identifier, returned when a message is sent, used to wait for 
            confirmation of message receipt.
            </summary>
        </member>
        <member name="T:Goedel.Presence.Client.PresenceListenerState">
            <summary>
            Presence listener state.
            </summary>
        </member>
        <member name="F:Goedel.Presence.Client.PresenceListenerState.Initial">
            <summary>Listener has yet to receive contact from the service.</summary> 
        </member>
        <member name="F:Goedel.Presence.Client.PresenceListenerState.Connected">
            <summary>Listener has recently received a valid contact message from the service
            </summary> 
        </member>
        <member name="F:Goedel.Presence.Client.PresenceListenerState.Unacknowledged">
            <summary>Listener has not acknowledged request sent to it.</summary> 
        </member>
        <member name="F:Goedel.Presence.Client.PresenceListenerState.Disconnected">
            <summary>Listener has not recently received a valid contact message.</summary> 
        </member>
        <member name="F:Goedel.Presence.Client.PresenceListenerState.Aborted">
            <summary>The presence association was aborted.</summary> 
        </member>
        <member name="T:Goedel.Presence.Client.ContextPresence">
            <summary>
            Context for a presence service connection.
            </summary>
        </member>
        <member name="M:Goedel.Presence.Client.ContextPresence.Disposing">
            <inheritdoc/>
        </member>
        <member name="P:Goedel.Presence.Client.ContextPresence.LocalEndPoint">
            <summary>The current local endpoint</summary> 
        </member>
        <member name="P:Goedel.Presence.Client.ContextPresence.LastTimeStamp">
            <summary>Timestamp of last packet received.</summary> 
        </member>
        <member name="P:Goedel.Presence.Client.ContextPresence.PresenceListenerState">
            <summary>The state of the presence listener.</summary> 
        </member>
        <member name="P:Goedel.Presence.Client.ContextPresence.UdpListenerTasks">
            <summary></summary> 
        </member>
        <member name="P:Goedel.Presence.Client.ContextPresence.RetransmitConnectRequestTries">
            <summary>Maximum number of retry requests.</summary> 
        </member>
        <member name="P:Goedel.Presence.Client.ContextPresence.RetransmitHeartbeatTries">
            <summary>Maximum number of retry requests.</summary> 
        </member>
        <member name="P:Goedel.Presence.Client.ContextPresence.RetransmitConnectRequestMilliSeconds">
            <summary>Time delay before retrying a connection request in milliseconds.</summary> 
        </member>
        <member name="P:Goedel.Presence.Client.ContextPresence.HeartbeatMilliSeconds">
            <summary>Connection heartbeat timer in milliseconds.</summary> 
        </member>
        <member name="P:Goedel.Presence.Client.ContextPresence.RetransmitHeartbeatMilliSeconds">
            <summary>Connection heartbeat timer in milliseconds.</summary> 
        </member>
        <member name="P:Goedel.Presence.Client.ContextPresence.ReconnectAttemptMilliSeconds">
            <summary>Connection heartbeat timer in milliseconds.</summary> 
        </member>
        <member name="P:Goedel.Presence.Client.ContextPresence.Connected">
            <summary>If true, client is connected to the presence4 service.</summary> 
        </member>
        <member name="P:Goedel.Presence.Client.ContextPresence.RetransmitRequestMilliSeconds">
            <summary>Request retransmission timeout in milliseconds</summary> 
        </member>
        <member name="P:Goedel.Presence.Client.ContextPresence.MessageSerial">
            <summary>Serial number of the last message sent</summary> 
        </member>
        <member name="P:Goedel.Presence.Client.ContextPresence.AcknowledgmentSerial">
            <summary>Serial number of the pending acknowledgement we are waiting on.</summary> 
        </member>
        <member name="M:Goedel.Presence.Client.ContextPresence.#ctor(Goedel.Mesh.Client.ContextUser,Goedel.Mesh.ServiceAccessToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Goedel.Presence.Client.ContextPresence"/> class.
            </summary>
        </member>
        <member name="M:Goedel.Presence.Client.ContextPresence.Start">
            <summary>
            Start the presence listener. Waiting for an explicit start allows the
            caller to adjust the listener parameters as init parameters.
            </summary>
        </member>
        <member name="M:Goedel.Presence.Client.ContextPresence.GetService(Goedel.Mesh.Client.ContextUser)">
            <summary>
            Get a presence service client for the user context <paramref name="contextAccount"/>.
            </summary>
            <param name="contextAccount">The user context.</param>
            <returns>The context created.</returns>
        </member>
        <member name="M:Goedel.Presence.Client.ContextPresence.GetContext(Goedel.Mesh.Client.ContextUser)">
            <summary>
            Factory method returning a new presence context on the presence service
            provided to the account <paramref name="contextAccount"/>.
            </summary>
            <param name="contextAccount">The account under which the presence service 
            is provided.</param>
            <returns>The presence context.</returns>
        </member>
        <member name="M:Goedel.Presence.Client.ContextPresence.Listen">
            <summary>
            The listener task.
            </summary>
        </member>
        <member name="M:Goedel.Presence.Client.ContextPresence.MakeConnectRequest">
            <summary>
            Send initial connect request.
            </summary>
        </member>
        <member name="M:Goedel.Presence.Client.ContextPresence.SendHeartbeat">
            <summary>
            Send the heartbeat message. No telemetry at this point.
            </summary>
        </member>
        <member name="M:Goedel.Presence.Client.ContextPresence.UdpListener">
            <summary>
            Udp client listener, read requests and post to <see cref="P:Goedel.Presence.Client.ContextPresence.UdpReceiveBuffer"/>
            </summary>
        </member>
        <member name="M:Goedel.Presence.Client.ContextPresence.SendData(Goedel.Presence.PresenceFromClient,System.Byte[])">
            <summary>
            Send the message <paramref name="message"/> with connection token 
            <paramref name="token"/> to the service on the persistent connection.
            </summary>
            <param name="message">The message to send.</param>
            <param name="token">Connection token.</param>
        </member>
        <member name="M:Goedel.Presence.Client.ContextPresence.Poll">
            <summary>
            Force sending a poll message to the presence service.
            </summary>
            <returns>Asynchronous poll result.</returns>
        </member>
        <member name="M:Goedel.Presence.Client.ContextPresence.RemoteEndpoint(System.Net.Sockets.UdpClient)">
            <summary>
            Query the presence service to obtain the external endpoint to which 
            <paramref name="local"/> is connected.
            </summary>
            <param name="local">The client whose external endpoint is to be discovered.</param>
            <returns>The endpoint.</returns>
        </member>
        <member name="M:Goedel.Presence.Client.ContextPresence.RemoteEndpointAsync(System.Net.Sockets.UdpClient)">
            <summary>
            Query the presence service to obtain the external endpoint to which 
            <paramref name="local"/> is connected and return the result asynchronously.
            </summary>
            <param name="local">The client whose external endpoint is to be discovered.</param>
            <returns>The endpoint.</returns>
        </member>
        <member name="M:Goedel.Presence.Client.ContextPresence.MessageWait(System.Type,System.Int64)">
            <summary>
            Wait for the client to receive a new message of type <paramref name="messageType"/>.
            </summary>
            <param name="messageType">The type of message to wait for.</param>
            <param name="outBoxCount">The starting point for the count, ignore messages 
            earlier than this.</param>
            <returns>The message received.</returns>
        </member>
        <member name="M:Goedel.Presence.Client.ContextPresence.SessionRequestAsync(System.String)">
            <summary>
            Request creation of an outbound session to the account <paramref name="account"/>
            and return the result asynchronously.
            </summary>
            <param name="account">The account to connect to.</param>
            <returns>The created session context (asynchronously).</returns>
        </member>
        <member name="M:Goedel.Presence.Client.ContextPresence.SessionRequest(System.String)">
            <summary>
            Request creation of an outbound session to the account <paramref name="account"/>.
            </summary>
            <param name="account">The account to connect to.</param>
            <returns>The created session context (asynchronously).</returns>
        </member>
        <member name="M:Goedel.Presence.Client.ContextPresence.GetSessionRequestAsync">
            <summary>
            Wait for an external session creation request and return when received asynchronously.
            </summary>
            <returns>The created session context (asynchronously).</returns>
        </member>
        <member name="M:Goedel.Presence.Client.ContextPresence.GetSessionRequest">
            <summary>
            Wait for an external session creation request and return when received.
            </summary>
            <returns>The created session context (asynchronously).</returns>
        </member>
        <member name="T:Goedel.Presence.Client.ContextSession">
            <summary>
            Messaging session context. Used to exchange messages with a single endpoint.
            </summary>
        </member>
        <member name="P:Goedel.Presence.Client.ContextSession.UdpClient">
            <summary>The UdpClient used to control the session.</summary> 
        </member>
        <member name="P:Goedel.Presence.Client.ContextSession.ExternalEndpoint">
            <summary>The external address associated with the endpoint.</summary> 
        </member>
        <member name="M:Goedel.Presence.Client.ContextSession.#ctor(Goedel.Presence.SessionRequest,Goedel.Presence.SessionResponse)">
            <summary>
            Default constructor.
            </summary>
            <param name="sessionRequest">The session request message.</param>
            <param name="sessionResponse">The session response message.</param>
        </member>
        <member name="M:Goedel.Presence.Client.ContextSession.SessionResponse(System.Boolean)">
            <summary>
            Respond to session creation request.
            </summary>
            <param name="accept">If true, session request was accepted, otherwise false.</param>
        </member>
        <member name="M:Goedel.Presence.Client.ContextSession.SendMessage(Goedel.Presence.Client.MessageContent)">
            <summary>
            Send the message <paramref name="messageContent"/> to the session endpoint.
            </summary>
            <param name="messageContent">The message to send.</param>
            <returns>Message identifier that can be used to create an an asynchronous
            wait task for confirmation of receipt.</returns>
        </member>
        <member name="M:Goedel.Presence.Client.ContextSession.GetMessage">
            <summary>
            If one or more messages have been received but not delivered, return
            the first. Otherwise wait asynchronously for arival of a message.
            </summary>
            <returns>The message content (synchronously)</returns>
        </member>
        <member name="M:Goedel.Presence.Client.ContextSession.Synchronize(Goedel.Presence.Client.MessageId)">
            <summary>
            Return a task waiting on confirmation of receipt of the message 
            <paramref name="messageId"/>.
            </summary>
            <param name="messageId">The message to await receipt of.</param>
            <returns>The message receipt (asynchronously).</returns>
        </member>
        <member name="T:Goedel.Presence.Client.PresenceServiceNotResponding">
            <summary>
            TBS
            </summary>
        </member>
        <member name="P:Goedel.Presence.Client.PresenceServiceNotResponding.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Presence.Client.PresenceServiceNotResponding.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Presence.Client.PresenceServiceNotResponding.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Presence.Client.PresenceServiceNotResponding._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Presence.Client.PresenceServiceNotResponding.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Presence.Client.EventExtensions">
            <summary>
            Extensions class defining logging events and convenience methods.
            </summary>
        </member>
        <member name="M:Goedel.Presence.Client.EventExtensions.#cctor">
            <summary>
            Static initializer, is called once when the module loads.
            </summary>
        </member>
        <member name="T:Goedel.Presence.Client.Extensions">
            <summary>
            Class containing utility extension methods.
            </summary>
        </member>
        <member name="M:Goedel.Presence.Client.Extensions.GetPresence(Goedel.Mesh.Client.ContextUser)">
            <summary>
            Returns a presence context for the account context <paramref name="contextAccount"/>.
            </summary>
            <param name="contextAccount">The account context to return presence context for.</param>
            <returns>The presence context.</returns>
        </member>
        <member name="T:Goedel.Presence.Client.MessageContentType">
            <summary>
            Message content type identifiers.
            </summary>
        </member>
        <member name="F:Goedel.Presence.Client.MessageContentType.Binary">
            <summary>Raw binary data.</summary> 
        </member>
        <member name="F:Goedel.Presence.Client.MessageContentType.Plaintext">
            <summary>Plaintext message without formatting.</summary> 
        </member>
        <member name="F:Goedel.Presence.Client.MessageContentType.Richtext">
            <summary>Message with limited formatting.</summary> 
        </member>
        <member name="T:Goedel.Presence.Client.MessageContent">
            <summary>
            Base class for message content.
            </summary>
            <param name="ContentType">Content type identifier.</param>
            <param name="Payload">The message payload.</param>
        </member>
        <member name="M:Goedel.Presence.Client.MessageContent.#ctor(Goedel.Presence.Client.MessageContentType,System.Byte[])">
            <summary>
            Base class for message content.
            </summary>
            <param name="ContentType">Content type identifier.</param>
            <param name="Payload">The message payload.</param>
        </member>
        <member name="P:Goedel.Presence.Client.MessageContent.ContentType">
            <summary>Content type identifier.</summary>
        </member>
        <member name="P:Goedel.Presence.Client.MessageContent.Payload">
            <summary>The message payload.</summary>
        </member>
        <member name="T:Goedel.Presence.Client.NamespaceDoc">
            <summary>
            Desctiption of the 
            </summary>
        </member>
    </members>
</doc>
