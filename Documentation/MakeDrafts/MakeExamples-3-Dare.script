#using System.Text
#using Goedel.Mesh
#using Goedel.Protocol
#using Goedel.Utilities
#using Goedel.Cryptography
#using Goedel.Cryptography.Dare
#xclass ExampleGenerator ExampleGenerator



#file MeshExamplesContainer "Examples\\ExamplesContainer.md" CreateExamples Example
#% var ExampleGenerator = new ExampleGenerator () { _Output = _Output };
The data payloads in all the following examples are identical, only the
authentication and/or encryption is different. 

* Frame 0 is omitted in each case

* Frame 1..n consists of 300 bytes being the byte sequence 00, 01, 02, etc. 
repeating after 256 bytes.

For conciseness, the raw data format is omitted for examples after the first, except
where the data payload has been transformed, (i.e. encrypted).


####Simple container

the following example shows a simple container with first frame and a single data frame:

~~~~
#{Example.ContainerFramingSimple}~~~~

Since there is no integrity check, there is no need for trailer entries.
The header values are:

#call ExampleGenerator.DumpHeaders Example.ContainerHeadersSimple


####Payload and chain digests

The following example shows a chain container with a first frame and three 
data frames. The headers of these frames is the same as before but the
frames now have trailers specifying the PayloadDigest and ChainDigest values:

#call ExampleGenerator.DumpHeaders Example.ContainerHeadersChain

####Merkle Tree

The following example shows a chain container with a first frame and six 
data frames. The trailers now contain the TreePosition and TreeDigest
values:

#call ExampleGenerator.DumpHeaders Example.ContainerHeadersMerkleTree

####Signed container

The following example shows a tree container with a signature in the final record.
The signing key parameters are:



~~~~
#{JSONDebugWriter.Write (Example.SignatureAliceKey)}
~~~~

The container headers and trailers are:

#call ExampleGenerator.DumpHeaders Example.ContainerHeadersSigned

####Encrypted container

The following example shows a container in which all the frame payloads are encrypted 
under the same master secret established in a key agreement specified in the first frame.

#call ExampleGenerator.DumpHeaders Example.ContainerHeadersEncryptSingleSession

Here are the container bytes. Note that the content is now encrypted and has expanded by
25 bytes. These are the salt (16 bytes), the AES padding (4 bytes) and the 
JSON-B framing (5 bytes).

~~~~
#{Example.ContainerFramingEncrypted}

~~~~


The following example shows a container in which all the frame payloads are encrypted 
under separate key agreements specified in the payload frames.

#call ExampleGenerator.DumpHeaders Example.ContainerHeadersEncryptIndependentSession

#end file


#method DumpHeaders List<ContainerFrame> Frames
#foreach (var Frame in Frames)
#% DumpHeader (Frame);
#end foreach
#end method

#method DumpHeader ContainerFrame Frame
Frame #{Frame.Header.Index}

~~~~
#{Frame.Header}

#if (Frame.Trailer != null)
#{Frame.Trailer}
#else
[Empty trailer]
#end if
~~~~

#end method

#file MeshManToolDare "Examples\\MeshManToolDare.md" CreateExamples Example

The dare command set supports the following operations on files:

<dl>
<dt>encode
<dd>Encode data as DARE Message.
<dt>decode
<dd>Decode a DARE Message.
<dt>verify
<dd>Verify a DARE Message.
</dl>

#end file


#file MeshManToolContainer "Examples\\MeshManToolContainer.md" CreateExamples Example

The container command set supports the following operations on files:

<dl>
<dt>create
<dd>Create a new DARE Container.
<dt>archive
<dd>Create a new DARE Container and archive the specified files.
<dt>append
<dd>Append the specified file as an entry to the specified container.
<dt>index
<dd>Compile an index for the specified container and append to the end.
<dt>extract
<dd>Extract the specified record from the container
<dt>copy
<dd>Copy container contents to create a new container
<dt>verify
<dd>Verify signatures and digests on container.
</dl>

#end file

#end xclass
