#using System.Text
#using Goedel.Mesh
#using Goedel.Mesh.Protocol
#using Goedel.Mesh.Protocol.Server
#using Goedel.Protocol
#xclass ExampleGenerator ExampleGenerator


#file ExamplesPortal "Examples\\ExamplesPortal.md" CreateExamples Example

##Mesh Portal Service

The Mesh Portal Service is the subset of Mesh Service operations that manage Mesh 
profiles. A Mesh Service MUST support the Mesh Portal Service but is not required
to support any other service.

####Creating a Mesh Service Account
#% Example.Traces.Level = 0;

Having created a personal profile, Alice requests creation of an account at a
Mesh Service. The first step in this process is choosing a Mesh Service account 
address 'Mesh address'

A Mesh address has the format user@domain where domain is the DNS name of the Mesh
service and user is the name of their account at that service.

Services MAY support the use of any unicode character sequence permitted for use
as an SMTP email address by RFC6530. Matching of Mesh addresses is case 
insensitive for latin characters (a-z, A-Z) but no similar mappings are supported
for other character sets.

Alice selects the Mesh Service 'example.com' and the name 'alice'. Her Mesh 
client first checks to see if the name is available:

~~~~
Request {Verify alice@example.com}
~~~~

The Mesh service responds stating that the address is available.

The ValidateRequest message contains the requested account identifier
and an optional language parameter to allow the service to provide
informative error messages in a language the user understands. The
Language field contains a list of ISO language identifier codes 
in order of preference, most preferred first.

~~~~
Response {Verify alice@example.com}
~~~~

The ValidateResponse message returns the result of the validation
request in the Valid field. Note that even if the value true is returned,
a subsequent account creation request MAY still fail.

[Note that for the sake of concise presentation, the HTTP binding
information is omitted from future examples.]
#% Example.Traces.Level = 3;

The Mesh client requests that the account be created and bound to the (provided)
personal profile:

~~~~
Request {Account Create alice@example.com}
~~~~

The Mesh service responds stating that the address is available:

~~~~
Response {Account Create  alice@example.com}
~~~~

####Using Recovery Records

Before using her newly created profile, Alice makes sure that she can recover it
in the case of a catastrophe. She also wants to make sure that her master profile 
won't be compromised if the machine she created it on is compromised by deleting the 
key information from the machine. To do this, she creates a Recovery Record.

A recovery record contains the private keys associated with her master profile encrypted
using a strong symmetric cipher (AES 256 in this case). Recovery records are indexed by
means of the UDF fingerprint derrived from the decryption key. Thus, knowledge of the decryption
key is sufficient to locate the recovery record in a collection of recovery records and
knowledge of the index is evidence that a requestor knows the decryption key.

######Creating a Recovery Record

The plaintext of the recovery record specifies the private keys associated with
the Master Signature Key and Master Escrow Key:

~~~~
{Recovery RecordPlaintext}
~~~~

A Master Recovery Key is created. In this case, Alice is using a Master Recovery Key of 128 
bits so that the recovery key shares are as compact as possible.

~~~~
{MasterRecoveryKey}
~~~~

The HKDF function is used to derrive the Encryption Key for the Recovery Record and the 
Recovery index:

~~~~
{RecoveryEncryptionKey}
{RecoveryIndex}
~~~~

The Recovery record is encrypted using the DARE Message Format

~~~~
{Recovery RecordDARE}
~~~~

The Mesh client then creates an authenticated request to post the recovery record to the 
profile:

~~~~
{AuthenticatedRecoveryRequest}
~~~~

The Mesh Service returns its response:

~~~~
{AuthenticatedRecoveryResponse}
~~~~

[Note that for the sake of concise presentation, the request and response authentication
information is omitted from future examples.]
#% Example.Traces.Level = 5;

Having successfully posted the recovery data to the service, the client presents Alice 
with a list of recovery shares that can be used to recover the data. The calculation
of the recovery shares is described in part III.

~~~~
{Recovery shares 2 of 3}
~~~~




######Recovering a Profile.

To test her ability to recover her master profile, Alice deletes her master profile
from her administration device=.
To recover her profile, Alice reconstructs the recovery secret from two of 
her shares and uses this information to request recovery:

~~~~
{RecoveryRecordRequest}
~~~~

Note that this request is not authenticated.

The Mesh Service locates the requested data and responds:

~~~~
{RecoveryRecordResponse}
~~~~

The client recovers the Master profile information and verifies it, then uses the data
to reactivate the 

####Connecting a Device to a Portal Account

Connecting a device to a profile requires the client on the new
device to interact with a client on a device that has administration capabilities,
i.e. it has access to an Online Signing Key. Since clients cannot 
interact directly with other clients, a service is required to 
mediate the connection. This service is provided by a Mesh portal
provider.

All service transactions are initiated by the clients. First the 
connecting device posts ConnectStart, after which it may poll for the
outcome of the connection request using ConnectStatus.

Periodically, the Administration Device polls for a list of pending
connection requests using ConnectPending. After posting a request,
the administration device posts the result using ConnectComplete:

~~~~
Connecting                  Mesh                 Administration
  Device                   Service                   Device

	|                         |                         |
	|      ConnectStart       |                         |
	| ----------------------> |                         |
	|                         |      ConnectPending     |
	|                         | <---------------------- |
	|                         |                         |
	|                         |      ConnectComplete    |
	|                         | <---------------------- |
	|      ConnectStatus      |                         |
	| ----------------------> |                         |
~~~~

The Device connection flow is actually an example of the Messaging flow 
in that it is initiated by an untrusted device making a connection request 
to the Mesh Service which the user's administration device collects
and responds to in the same fashion as any other messaging flow.

The process is initiated by a request from the device to post a connection request.

~~~~
Request {ConnectStart alice@example.com}
~~~~

The request is accepted. Note that if abuse is a concern, we may have required the
use of a one time passcode to validate the request. The service responds with
the personal profile bound to the account.

~~~~
Response {ConnectStart alice@example.com}
~~~~

The fingerprint of the device profile and the fingerprint of the personal 
profile are combined to create a request verification code. This is 
displayed on Alice's device

~~~~
{Verification code.}
~~~~

To authorize the request, the administration device begins by synchronizing 
the connect message spool:

~~~~
Request {SyncPending Connect alice@example.com}
~~~~

The service responds with a list of pending requests optionally filtered according
to criteria provided by Alice:

~~~~
Response {SyncPending Connect alice@example.com}
~~~~

Alice Accepts the request. Her administration device creates and signs a Device 
Authorization and posts it to the Mesh Service where it is added to the Device
Catalog:

~~~~
Request {ConnectPost alice@example.com}
~~~~

The request is successful:

~~~~
Response {ConnectPost alice@example.com}
~~~~

Finally, the device polls the service and recieves notice that the request has 
been accepted:

~~~~
Request {ConnectStatus alice@example.com}
~~~~

The acceptance includes a copy of the Device Authorization(s).

~~~~
Response {ConnectStatus alice@example.com}
~~~~




######Deleting a Portal Account

Should she ever decide to stop using the Mesh Service, Alice can request that
her account be deleted. Note that this only affects her account on the service
and not on her local machine.

~~~~
{DeleteRequest}
~~~~

The Mesh Service returns its response:

~~~~
{DeleteResponse}
~~~~

Once a Mesh address has been deleted, reuse of the address by a new profile is entirely a 
matter for site policy. A Mesh Service MAY refuse to allow any request to create an account 
with a previously used address under any circumstances or MAY allow any party to reuse the 
address.

Mesh addresses are inherently transient. If a permanent and immutable address is required 
for some purpose, the Strong Internet Name of the Mesh Address SHOULD be used instead. 
This name binds the Mesh profile fingerprint to the Mesh Address, thus creating a name
that can be regarded as unambiguously identifying the profile owner and means of contact.

#end file


#end xclass

