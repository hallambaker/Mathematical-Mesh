#using System.Text
#using Goedel.Mesh
#using Goedel.Protocol
#xclass ExampleGenerator ExampleGenerator


#file UserGuideConnecting "UserGuide/Mesh/connecting.md" CreateExamples Examples

<title>Connecting
<titlebanner><h1>Connecting Devices

<h4>Connect once and secure
</titlebanner>
<leftmain>

Connecting a device to a personal profile means making that personal profile
a trusted source for all configuration settings, credentials, etc. 
required to access information in the user's personal digital environment.

The two serious security error a users of the Mesh could make is to allow
the wrong device to connect to their profile or connect a device to the
wrong profile.

The Mesh mitigates these risks as follows:

<ul>
* The ability to connect devices is limited to administration devices.

* The connection protocols require strong mutual authentication.
</ul>

Different devices have different user interface capabilities. In the usability field,
such capabilities are known as <i>affordances</i>. A mechanism that requires use of a 
keyboard and a display is not going to be appropriate for a device that has neither.

The Mesh protocols currently support three different connection modes:

<dl>
<dt>Basic Connection
<dd>The usual mechanism used to connect a device with display and keyboard capability.
<dt>PIN Code Connection
<dd>A variation of the basic connection mode suited to enterprise use in which the device
being connected is authenticated by means of a PIN code generated by the administrator
and provisioned out of band.
<dt>Bar Code Connection
<dd>Supports connection of devices that lack keyboard or display capabilities. The
device to be connected is marked with a bar code that is read by the admnistration device
and used as the basis for authentication.
<dt>Bootstrap Profile Connection
<dd>Supports connection of devices that are pre-populated with a generic software image that
is customised during initialization. The generic software image is prepopulated with a 
device profile that is used to authenticate the request for a permanent profile.
</dl>

In each case, the connection request must be approved by a device that is authorized as
an administration device for the personal profile the new device is attempting to connect to.
Since the administration device is used to approve requests, a means of input and output
is required in every case. In the Bar Code Connection mode, a means of scanning the
bar code is also required.

<h1>Basic Connection

The basic connection mechanism is the usual means of connecting a new device. There are
four steps:

<ol>
<nli>Make a connection request from the new device.
<nli>Fetch pennding connection requests on the administration device.
<nli>Approve the connection request on the administration device.
<nli>Synchronize the new device.
</ol>

Make a connection request from the new device:

#{Examples.Example("ConnectBasic1")}

Fetch pennding connection requests on the administration device.

#{Examples.Example("ConnectBasic2")}

Approve the connection request on the administration device.

#{Examples.Example("ConnectBasic3")}

Synchronize the new device.

#{Examples.Example("ConnectBasic4")}


<h1>PIN Code Connection

Use of a PIN code is convenient in circumstances in which the new device being connected
and the administration device are being operated by different people at different times.

<ol>
<nli>Generate a PIN authorization code on the administration device.
<nli>Provision the PIN code to the new device out of band
<nli>Make the connection request from the new device.
<nli>Approve the connection request on the administration device.
<nli>Synchronize the new device.
</ol>

Generate a PIN authorization code on the administration device.

#{Examples.Example("ConnectPIN1")}

Provision the PIN code to the new device out of band
Make the connection request from the new device.

#{Examples.Example("ConnectPIN2")}

Approve the connection request on the administration device.

#{Examples.Example("ConnectPIN3")}

Synchronize the new device.

#{Examples.Example("ConnectPIN4")}

<h1>Bar Code Connection

The Bar Code Connection mode requires that a device profile be pre-loaded into the
device and registered with a Mesh portal. The device address of
the portal and a device connection code are used to form the connection URI:

#{Examples.Example("ConnectBarcode1")}

The connection URI is encoded as a bar code. The QR code format is preferred:

[QR code of connection URI]

The device does not know the device connection code, only the digest of the
device connection code is known to the device. This is known as the device digest.


When connected to a network, the device attempts to establish a network 
connection via DHCP. It then attempts to connect to the following Mesh portal
services in order:

<ol>
<nli>_mmm._tcp.[Default Domain]
<nli>_mmm._tcp.local
<nli>_mmm._tcp.[Connection URI Domain]
</ol>

The device registers itself as available for connection under the device identifier
which is the digest of the device digest.

To complete the connection, the user scans the barcode with an administrative
device equipped with a scanner. The scanner converts the barcode back to the 
the connection URI form which is used to complete the connection:

#{Examples.Example("ConnectBarcode2")}

The tool calculates the device digest and the device identifier. The device identifier
is user to tell the service which device it is attempting to connect to and the device
digest is used to derive keys used to authenticate the device connection request.

<h1>Bootstrap Profile Connection

The bootstrap profile connection mode is intended for use with virtual machines, 
containers and IoT devices running code developed locally rather than by a third
party provider.

The device image is configured with a bootstrap profile. This may be generated 
using the meshman tool as follows:

#{Examples.Example("ConnectBootstrap1")}

On initialization, the bootstrap profile is used to authenticate a request
for an individual device profile:

#{Examples.Example("ConnectBootstrap2")}

This device profile is then accepted using the administration device in the normal 
fashion:

#{Examples.Example("ConnectBootstrap3")}


#end file



#end xclass

