using  System.Text;
using  Goedel.Mesh;
using  Goedel.Protocol;
using System;
using System.IO;
using System.Collections.Generic;
using Goedel.Registry;
namespace ExampleGenerator {
	public partial class ExampleGenerator : global::Goedel.Registry.Script {

		

		//
		// UserGuideQuickStart
		//
		public static void UserGuideQuickStart (CreateExamples Examples) { /* File  */
			using (var _Output = new StreamWriter ("UserGuide/Mesh/quickstart.md")) {
				var _Indent = ""; 
				_Output.Write ("<title>Quick Start\n{0}", _Indent);
				_Output.Write ("<titlebanner><h1>Quick Start Guide\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("Secure once, secure always.\n{0}", _Indent);
				_Output.Write ("</titlebanner>\n{0}", _Indent);
				_Output.Write ("<leftmain>\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("<h1>Quick Start Guide\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("This guide explains how you can get started using the Mesh in as little as ten\n{0}", _Indent);
				_Output.Write ("minutes. Once set up, the Mesh automatically performs all the housekeeping \n{0}", _Indent);
				_Output.Write ("chores needed to use PKI. The only time you should need to think about using\n{0}", _Indent);
				_Output.Write ("the Mesh is if you need to add or remove a device or change an application\n{0}", _Indent);
				_Output.Write ("setting.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("At the time of writing, the public Mesh Portal has not yet been established.\n{0}", _Indent);
				_Output.Write ("But developers can still explore the Mesh by <a=\"portal\">running their own\n{0}", _Indent);
				_Output.Write ("portal</a>. This isn't very difficult, the only catch is that a Mesh portal\n{0}", _Indent);
				_Output.Write ("needs to be run on a machine that is always on and connected to the network.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("<h2>Configure your first administration device\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("First decide which of the devices you are likely to want to use as an administration \n{0}", _Indent);
				_Output.Write ("device. This is a device you can use to manage your Mesh devices, to add or remove \n{0}", _Indent);
				_Output.Write ("devices. You can change your mind later and you can have as many administration \n{0}", _Indent);
				_Output.Write ("devices as you like.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("If your administration device is lost or stolen, all that stands in the way of \n{0}", _Indent);
				_Output.Write ("someone else taking over your personal security environment will be whatever passwords\n{0}", _Indent);
				_Output.Write ("protect that device and the administration key stored on it. Which device you choose \n{0}", _Indent);
				_Output.Write ("is a balance of security and convenience. If you are a security specialist, a\n{0}", _Indent);
				_Output.Write ("c-suite executive or  a senior government adviser than you should probably buy a \n{0}", _Indent);
				_Output.Write ("cheap tablet computer to use as your administration device and keep it in a \n{0}", _Indent);
				_Output.Write ("fireproof safe. But that is probably going to be unacceptably inconvenient if\n{0}", _Indent);
				_Output.Write ("you are a network administrator who might need to add or remove devices several \n{0}", _Indent);
				_Output.Write ("times a week.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("Creating your Personal Profile and configuring your first device requires \n{0}", _Indent);
				_Output.Write ("the following steps.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("<ol>\n{0}", _Indent);
				_Output.Write ("1. Download and install the Mesh tools\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("2. Create a Personal Mesh Profile\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("3. Create disaster recovery shares \\[optional]\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("4. Configure Applications.\n{0}", _Indent);
				_Output.Write ("</ol>\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("<h3> Download and install the Mesh tools\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("Currently, the Mesh is available for Windows, OSX and Linux. There is\n{0}", _Indent);
				_Output.Write ("an installer for the Windows platform but not yet for OSX or Linux.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("<a=\"../Downloads/index.html\">\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("The Mesh tools are currently limited to command line tools. A GUI client\n{0}", _Indent);
				_Output.Write ("is in development but does not currently support the latest version of\n{0}", _Indent);
				_Output.Write ("the Mesh protocols.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("<h3> Create a Personal Mesh Profile\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("To create a personal profile, you first need to choose a Mesh Portal\n{0}", _Indent);
				_Output.Write ("and an account name.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("Mesh account names look just like an email address. The default Mesh \n{0}", _Indent);
				_Output.Write ("portal is prismproof.org. So to create a profile for herself Alice types:\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("{1}\n{0}", _Indent, Examples.Example("Create1"));
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("Users can have multiple personal profiles but this is not usual and\n{0}", _Indent);
				_Output.Write ("it is not clear that this has any advantages. Since this is the\n{0}", _Indent);
				_Output.Write ("first profile Alice created, the mesh manager automatically makes\n{0}", _Indent);
				_Output.Write ("it the default for future operations.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("<h3> Create disaster recovery shares \\[optional]\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("Computers break, they get lost or stolen. Strong encryption provides\n{0}", _Indent);
				_Output.Write ("the best available protection for the confidentiality of your important\n{0}", _Indent);
				_Output.Write ("data. But your data will be lost forever if you lose access to your \n{0}", _Indent);
				_Output.Write ("decryption keys. For this reason, users are strongly advised to create\n{0}", _Indent);
				_Output.Write ("a set of recovery shares. This allows the master private keys in the \n{0}", _Indent);
				_Output.Write ("personal profile to be recovered should disaster strike. And these keys\n{0}", _Indent);
				_Output.Write ("in turn allow the recovery of your important data:\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("Alice decides to create three recovery shares and require two shares\n{0}", _Indent);
				_Output.Write ("to recover her master keys:\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("{1}\n{0}", _Indent, Examples.Example("CreateEscrow"));
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("Alice writes down the three recovery shares on paper and stores each \n{0}", _Indent);
				_Output.Write ("of them in a (different) safe place.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("If necessary, any two of the recovery shares created may be recombined \n{0}", _Indent);
				_Output.Write ("to recover an AES encryption key that was used to encrypt a recovery \n{0}", _Indent);
				_Output.Write ("record stored in the Mesh. The user does not need to know the portal\n{0}", _Indent);
				_Output.Write ("account to perform recovery as the recovery record is indexed under the\n{0}", _Indent);
				_Output.Write ("fingerprint of the encryption key.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("# Configure Applications.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("At this point, Alice is ready to configure her applications. She begins\n{0}", _Indent);
				_Output.Write ("with her email:\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("<div=\"terminal\">\n{0}", _Indent);
				_Output.Write ("<cmd> meshman /mail alice@example.com\n{0}", _Indent);
				_Output.Write ("</div>\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("The Mesh manager automatically read the configuration files for the \n{0}", _Indent);
				_Output.Write ("mail clients it recognizes and configured them for use with S/MIME \n{0}", _Indent);
				_Output.Write ("signature and encryption.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("If an OpenPGP implementation is installed, the Mesh manager could \n{0}", _Indent);
				_Output.Write ("perform configuration for OpenPGP as well.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("Next, Alice configures SSH:\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("<div=\"terminal\">\n{0}", _Indent);
				_Output.Write ("<cmd> meshman /ssh\n{0}", _Indent);
				_Output.Write ("</div>\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("Finally, Alice configures her Web browser to use the Mesh to store \n{0}", _Indent);
				_Output.Write ("her usernames and passwords:\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("<div=\"terminal\">\n{0}", _Indent);
				_Output.Write ("<cmd> meshman /web\n{0}", _Indent);
				_Output.Write ("</div>\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("Thats it, Alice is done.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("<h2>Connect another device\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("The Mesh makes security easy on a single device but it becomes even more \n{0}", _Indent);
				_Output.Write ("useful when multiple devices are used because the Mesh doesn't just \n{0}", _Indent);
				_Output.Write ("copy the necessary security settings across to a machine, it can copy\n{0}", _Indent);
				_Output.Write ("over all the users settings for connected applications.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("When connecting a device to a personal profile it is of course essential\n{0}", _Indent);
				_Output.Write ("that the correct device is connected to the correct profile. An attacker\n{0}", _Indent);
				_Output.Write ("could get up to all sorts of mischief if they persuaded Alice to connect\n{0}", _Indent);
				_Output.Write ("her device to a profile they controlled or a device they control to Alice's\n{0}", _Indent);
				_Output.Write ("profile. For this reason, the process of connecting a device requires\n{0}", _Indent);
				_Output.Write ("strong mutual authentication. \n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("As a result this process does require the\n{0}", _Indent);
				_Output.Write ("user to exercise a measure of care and attention when connecting devices.\n{0}", _Indent);
				_Output.Write ("But this is one of the very few cases where the Mesh does make demands\n{0}", _Indent);
				_Output.Write ("of this type from the user.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("The Mesh specifications (but not currently the reference code) describe\n{0}", _Indent);
				_Output.Write ("three methods of connecting a device. The most convenient method is usually\n{0}", _Indent);
				_Output.Write ("the 'fingerprint' method which has the following steps:\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("<ol>\n{0}", _Indent);
				_Output.Write ("1. Download and install the Mesh tools\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("2. Begin connection request\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("3. Verify Personal Profile fingerprint\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("4. Verify Device fingerprint\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("5. Accept connection request\n{0}", _Indent);
				_Output.Write ("</ol>\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("<h3> Download and install the Mesh tools\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("The first step is to download and install the Mesh tools to the\n{0}", _Indent);
				_Output.Write ("new device.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("<h3> Begin connection request\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("To connect a new device to her profile, Alice uses the mesh manager\n{0}", _Indent);
				_Output.Write ("and specifies her account profile:\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("{1}\n{0}", _Indent, Examples.Example("ConnectBasic1"));
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("The Mesh manager responds with a connection authentication fingerprint. This\n{0}", _Indent);
				_Output.Write ("is a unique value that is used to authenticate the connection request in the \n{0}", _Indent);
				_Output.Write ("next step.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("<h3>Verify and accept the connection request\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("The next step is for Alice to get a list of pending connection requests \n{0}", _Indent);
				_Output.Write ("from her administration device:\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("{1}\n{0}", _Indent, Examples.Example("ConnectBasic2"));
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("The only pending connection request is the one Alice just created. Alice verifies\n{0}", _Indent);
				_Output.Write ("that the two connection request identifiers are exactly the same. As this is the case,\n{0}", _Indent);
				_Output.Write ("she accepts the request:\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("{1}\n{0}", _Indent, Examples.Example("ConnectBasic3"));
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("<h3>Synchronize the newly connected machine\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("At this point all the necessary profile data is generated to add the device\n{0}", _Indent);
				_Output.Write ("to the profile. If the user's applications were Mesh enabled, Alice wouldn't\n{0}", _Indent);
				_Output.Write ("need to do anything more to start using the machine.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("Since there are no mesh enabled applications to date, Alice needs to complete\n{0}", _Indent);
				_Output.Write ("the connection process by synchronizing the new device to the Mesh profile.\n{0}", _Indent);
				_Output.Write ("This could of course be set to run periodically in a script. Alice can \n{0}", _Indent);
				_Output.Write ("force the synchronization to taken place using the connect complete command:\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("{1}\n{0}", _Indent, Examples.Example("ConnectBasic4"));
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("<h3>Add more devices\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("At this point the new device is fully configured. All Alice's email, Web and\n{0}", _Indent);
				_Output.Write ("SSH settings have been configured automatically and secured to best practical\n{0}", _Indent);
				_Output.Write ("security practices.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("The default security settings are designed to provide the maximum security\n{0}", _Indent);
				_Output.Write ("possible without interfering with the user's work. Since often neglected \n{0}", _Indent);
				_Output.Write ("tasks such as key rotation when devices are added or removed are \n{0}", _Indent);
				_Output.Write ("performed automatically, these settings typically provide a much higher \n{0}", _Indent);
				_Output.Write ("degree of security than even a security conscious user would achieve \n{0}", _Indent);
				_Output.Write ("by themselves. \n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("The main reason that the default level of security configured might be lower\n{0}", _Indent);
				_Output.Write ("than the best available (or in some situations best practice) is to support\n{0}", _Indent);
				_Output.Write ("interaction with legacy systems that don't support modern algorithms, protocols\n{0}", _Indent);
				_Output.Write ("or have some other major limitation.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("A less common reason that the default level of security might not be \n{0}", _Indent);
				_Output.Write ("sufficient is that the user works in a regulated industry and is required to\n{0}", _Indent);
				_Output.Write ("comply with a particular set of security requirements. These may or may not \n{0}", _Indent);
				_Output.Write ("be more secure but are almost certain to be different. \n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				}
			}
		}
	}
