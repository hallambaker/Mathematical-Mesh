using  System.Text;
using  Goedel.Mesh;
using  Goedel.Protocol;
using System;
using System.IO;
using System.Collections.Generic;
using Goedel.Registry;
namespace ExampleGenerator {
	public partial class ExampleGenerator : global::Goedel.Registry.Script {

		

		//
		// UserGuideConnecting
		//
		public static void UserGuideConnecting (CreateExamples Examples) { /* File  */
			using (var _Output = new StreamWriter ("UserGuide/Mesh/connecting.md")) {
				var _Indent = ""; 
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("<title>Connecting\n{0}", _Indent);
				_Output.Write ("<titlebanner><h1>Connecting Devices\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("<h4>Connect once and secure\n{0}", _Indent);
				_Output.Write ("</titlebanner>\n{0}", _Indent);
				_Output.Write ("<leftmain>\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("Connecting a device to a personal profile means making that personal profile\n{0}", _Indent);
				_Output.Write ("a trusted source for all configuration settings, credentials, etc. \n{0}", _Indent);
				_Output.Write ("required to access information in the user's personal digital environment.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("The two serious security error a users of the Mesh could make is to allow\n{0}", _Indent);
				_Output.Write ("the wrong device to connect to their profile or connect a device to the\n{0}", _Indent);
				_Output.Write ("wrong profile.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("The Mesh mitigates these risks as follows:\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("<ul>\n{0}", _Indent);
				_Output.Write ("* The ability to connect devices is limited to administration devices.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("* The connection protocols require strong mutual authentication.\n{0}", _Indent);
				_Output.Write ("</ul>\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("Different devices have different user interface capabilities. In the usability field,\n{0}", _Indent);
				_Output.Write ("such capabilities are known as <i>affordances</i>. A mechanism that requires use of a \n{0}", _Indent);
				_Output.Write ("keyboard and a display is not going to be appropriate for a device that has neither.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("The Mesh protocols currently support three different connection modes:\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("<dl>\n{0}", _Indent);
				_Output.Write ("<dt>Basic Connection\n{0}", _Indent);
				_Output.Write ("<dd>The usual mechanism used to connect a device with display and keyboard capability.\n{0}", _Indent);
				_Output.Write ("<dt>PIN Code Connection\n{0}", _Indent);
				_Output.Write ("<dd>A variation of the basic connection mode suited to enterprise use in which the device\n{0}", _Indent);
				_Output.Write ("being connected is authenticated by means of a PIN code generated by the administrator\n{0}", _Indent);
				_Output.Write ("and provisioned out of band.\n{0}", _Indent);
				_Output.Write ("<dt>Bar Code Connection\n{0}", _Indent);
				_Output.Write ("<dd>Supports connection of devices that lack keyboard or display capabilities. The\n{0}", _Indent);
				_Output.Write ("device to be connected is marked with a bar code that is read by the admnistration device\n{0}", _Indent);
				_Output.Write ("and used as the basis for authentication.\n{0}", _Indent);
				_Output.Write ("<dt>Bootstrap Profile Connection\n{0}", _Indent);
				_Output.Write ("<dd>Supports connection of devices that are pre-populated with a generic software image that\n{0}", _Indent);
				_Output.Write ("is customised during initialization. The generic software image is prepopulated with a \n{0}", _Indent);
				_Output.Write ("device profile that is used to authenticate the request for a permanent profile.\n{0}", _Indent);
				_Output.Write ("</dl>\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("In each case, the connection request must be approved by a device that is authorized as\n{0}", _Indent);
				_Output.Write ("an administration device for the personal profile the new device is attempting to connect to.\n{0}", _Indent);
				_Output.Write ("Since the administration device is used to approve requests, a means of input and output\n{0}", _Indent);
				_Output.Write ("is required in every case. In the Bar Code Connection mode, a means of scanning the\n{0}", _Indent);
				_Output.Write ("bar code is also required.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("<h1>Basic Connection\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("The basic connection mechanism is the usual means of connecting a new device. There are\n{0}", _Indent);
				_Output.Write ("four steps:\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("<ol>\n{0}", _Indent);
				_Output.Write ("<nli>Make a connection request from the new device.\n{0}", _Indent);
				_Output.Write ("<nli>Fetch pennding connection requests on the administration device.\n{0}", _Indent);
				_Output.Write ("<nli>Approve the connection request on the administration device.\n{0}", _Indent);
				_Output.Write ("<nli>Synchronize the new device.\n{0}", _Indent);
				_Output.Write ("</ol>\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("Make a connection request from the new device:\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("{1}\n{0}", _Indent, Examples.Example("ConnectBasic1"));
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("Fetch pennding connection requests on the administration device.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("{1}\n{0}", _Indent, Examples.Example("ConnectBasic2"));
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("Approve the connection request on the administration device.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("{1}\n{0}", _Indent, Examples.Example("ConnectBasic3"));
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("Synchronize the new device.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("{1}\n{0}", _Indent, Examples.Example("ConnectBasic4"));
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("<h1>PIN Code Connection\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("Use of a PIN code is convenient in circumstances in which the new device being connected\n{0}", _Indent);
				_Output.Write ("and the administration device are being operated by different people at different times.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("<ol>\n{0}", _Indent);
				_Output.Write ("<nli>Generate a PIN authorization code on the administration device.\n{0}", _Indent);
				_Output.Write ("<nli>Provision the PIN code to the new device out of band\n{0}", _Indent);
				_Output.Write ("<nli>Make the connection request from the new device.\n{0}", _Indent);
				_Output.Write ("<nli>Approve the connection request on the administration device.\n{0}", _Indent);
				_Output.Write ("<nli>Synchronize the new device.\n{0}", _Indent);
				_Output.Write ("</ol>\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("Generate a PIN authorization code on the administration device.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("{1}\n{0}", _Indent, Examples.Example("ConnectPIN1"));
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("Provision the PIN code to the new device out of band\n{0}", _Indent);
				_Output.Write ("Make the connection request from the new device.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("{1}\n{0}", _Indent, Examples.Example("ConnectPIN2"));
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("Approve the connection request on the administration device.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("{1}\n{0}", _Indent, Examples.Example("ConnectPIN3"));
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("Synchronize the new device.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("{1}\n{0}", _Indent, Examples.Example("ConnectPIN4"));
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("<h1>Bar Code Connection\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("The Bar Code Connection mode requires that a device profile be pre-loaded into the\n{0}", _Indent);
				_Output.Write ("device and registered with a Mesh portal. The device address of\n{0}", _Indent);
				_Output.Write ("the portal and a device connection code are used to form the connection URI:\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("{1}\n{0}", _Indent, Examples.Example("ConnectBarcode1"));
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("The connection URI is encoded as a bar code. The QR code format is preferred:\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("[QR code of connection URI]\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("The device does not know the device connection code, only the digest of the\n{0}", _Indent);
				_Output.Write ("device connection code is known to the device. This is known as the device digest.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("When connected to a network, the device attempts to establish a network \n{0}", _Indent);
				_Output.Write ("connection via DHCP. It then attempts to connect to the following Mesh portal\n{0}", _Indent);
				_Output.Write ("services in order:\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("<ol>\n{0}", _Indent);
				_Output.Write ("<nli>_mmm._tcp.[Default Domain]\n{0}", _Indent);
				_Output.Write ("<nli>_mmm._tcp.local\n{0}", _Indent);
				_Output.Write ("<nli>_mmm._tcp.[Connection URI Domain]\n{0}", _Indent);
				_Output.Write ("</ol>\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("The device registers itself as available for connection under the device identifier\n{0}", _Indent);
				_Output.Write ("which is the digest of the device digest.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("To complete the connection, the user scans the barcode with an administrative\n{0}", _Indent);
				_Output.Write ("device equipped with a scanner. The scanner converts the barcode back to the \n{0}", _Indent);
				_Output.Write ("the connection URI form which is used to complete the connection:\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("{1}\n{0}", _Indent, Examples.Example("ConnectBarcode2"));
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("The tool calculates the device digest and the device identifier. The device identifier\n{0}", _Indent);
				_Output.Write ("is user to tell the service which device it is attempting to connect to and the device\n{0}", _Indent);
				_Output.Write ("digest is used to derive keys used to authenticate the device connection request.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("<h1>Bootstrap Profile Connection\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("The bootstrap profile connection mode is intended for use with virtual machines, \n{0}", _Indent);
				_Output.Write ("containers and IoT devices running code developed locally rather than by a third\n{0}", _Indent);
				_Output.Write ("party provider.\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("The device image is configured with a bootstrap profile. This may be generated \n{0}", _Indent);
				_Output.Write ("using the meshman tool as follows:\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("{1}\n{0}", _Indent, Examples.Example("ConnectBootstrap1"));
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("On initialization, the bootstrap profile is used to authenticate a request\n{0}", _Indent);
				_Output.Write ("for an individual device profile:\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("{1}\n{0}", _Indent, Examples.Example("ConnectBootstrap2"));
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("This device profile is then accepted using the administration device in the normal \n{0}", _Indent);
				_Output.Write ("fashion:\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("{1}\n{0}", _Indent, Examples.Example("ConnectBootstrap3"));
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				}
			}
		}
	}
