#using System.Text
#using Goedel.Mesh
#using Goedel.Protocol
#xclass ExampleGenerator ExampleGenerator


#file UserGuidePlatform "UserGuide/Platform/index.md" CreateExamples Examples
<title>Platforms
<titlebanner><h1>Mesh Platform Specific Features

<h4>
</titlebanner>
<leftmain>

The goal of the Mesh is to make computers easier to use by making them more secure.
In order to achieve this goal, Mesh applications must look like and behave in the 
fashion that the user expects on that platform.

Equally importantly, one of the objectives of developing the Mesh is to make use of
security capabilities provided by the platform. If a Mesh application is running on
Windows, cryptographic keys should be stored in the Windows keystore, if a Mesh application
is running on OSX, cryptographic keys should be stored in the keykeychain, etc.

For this reason, the Mesh Reference Libraries have been carefully structured to
allow key functionality to be tightly integrated to the host platform. 

<h2>Platforms

The following platforms are anticipated:

<dl>
<dt><a="Windows.html">Windows</a>
<dd>Version 7.0 and higher. Makes use of the Windows Registry and Key Store for 
storing profiles and private keys.
<dt><a="OSX.html">OSX</a>
<dd>Currently only supported via the Linux distribution. Addition of support for
use of the keychain is highly desirable.
<dt><a="Linux.html">Linux</a>
<dd>Testing using Ubuntu. Profiles and private keys are stored in files in the
users home directory.
<dt><a="Docker.html">Docker</a>
<dd>Use of a Docker container to host Mesh Portal and Application Servers. This is
currently experimental.
</dl>


<h2>Current Status

At present, many of these goals are 'aspirational' rather than actual. These pages 
provide architectural notes for developers who may be interested in implementation.

The Mesh Reference code is being developed on a Windows platform using .Net 
Framework 4.7. It is to be expected that the Windows version of the code will always
be the most up to date and tightly integrated with the platform features.

Previous versions of the code libraries have been ported to Linux and tested 
successfully. Extending the build system to create a Linux distribution with a
Debian installation package is a near term priority. This will in turn facilitate
distribution of the server code as a Docker container.

Integration with the OSX platform is currently a low priority due to the fact that
while the Linux code will run on OSX, the reverse is not the case.


#end file


#end xclass

