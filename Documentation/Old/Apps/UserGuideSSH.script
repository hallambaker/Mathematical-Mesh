#using System.Text
#using Goedel.Mesh
#using Goedel.Protocol
#xclass ExampleGenerator ExampleGenerator


#file UserGuideSSH "UserGuide/Apps/ssh.md" CreateExamples Examples
<title>SSH
<titlebanner><h1>Mesh/SSH

<h4>Automating best practices for SSH credential management
</titlebanner>
<leftmain>

SSH is one of the most successful applications that provides strong cryptographic
protections today. It is certainly the first and so far only cryptographic application
to become so ubiquitous as to replace its insecure predecessor (telnet). 

Despite this success, SSH can be tricky to deploy and not through any fault of the 
design of the application. Configuring SSH access to a machine that you are accessing
via SSH is an inherently tricky task: Any error in the configuration may render the 
machine unavailable.

Another major weakness in the use of SSH is that following best practices for key
management such as using a different authentication key on each client device is
tedious at best. Most worrying of all is the fact that much of the advice given on
'how to configure SSH' is written from the perspective of <i>how to get SSH to work<i>
rather than <i>how to make an SSH configuration secure<i>.

Most people who use SSH reguilarly have developed a set of scripts to perform routine
administrative tasks. But while writing a script is a trivial task, debugging and 
checking for security vulnerabilities is certainly not.

Transferring configuration and administration tasks to the Mesh provides an approach
that is considerably more robust than a shell script is likely to provide and is 
far more likely to attract the third party review necessary to build confidence in
its security.

<h1>Managing SSH Configuration using the Mesh.

SSH profiles are created using the <tt>meshman</tt> tool. 

#{Examples.Example("SSHCreate")}

Whenever an SSH profile is created, a separate keypair is created for every device
connected to the profile. This mitigates the consequences of a device being lost
or stolen. The device key for the compromised device can be removed from the 
profile without affecting any other device. Investigation of possibly unauthorized logins
can be focused on those from the compromised device alone.

<b>Limitation</b>: At present, adding an SSH application profile to a personal profile 
causes an SSH device entry to be created for every device connected to the profile. 
Implementation of device groups in the meshman tool would allow this limitation to
be lifted.

#{ToDo("AddDevice", "In SSH, extend meshman to allow devices to be added and removed from the SSH profile independently of the personal.")}

Since SSH authentication is bidirectional, an SSH profile is used to manage two separate
sets of public keys.

<dl>
<dt>Client Authentication keys
<dd>Public keypairs used to authenticate a client to a host. These are the keys whose
private components are stored in user local storage and whose public components 
appear in generate the <tt>authorized_keys</tt> file.
<dt>Host Authentication keys
<dd>Public keypairs used to authenticate a host to a client. These are keys whose
private components are stored in a system wide storage and whose public components
appear in the <tt>known_hosts</tt> file.
</dl>

The <tt>ssh sync</tt> command causes the latest version of the user's SSH application profile
to be fetched from the portal and used to update the user's <tt>authorized_keys</tt> 
and <tt>known_hosts</tt> files.

#{Examples.Example("SSHSync")}

The <tt>ssh sync</tt> command allows the user to connect from any device connected to
their personal profile to any other device connected to their personal profile that
supports SSH.

While these capabilities are sufficient for many users, they do not meet the needs of
a developer or administrator who needs to access machines that they either cannot
connect or do not want to connect to their personal profile.

<h1>Host Authentication keys

The <tt>ssh known</tt> command adds hosts from the user's ssh profile to their known_hosts
file on the machine.

#{Examples.Example("SSHKnown")}

The <tt>ssh add</tt> command adds host entries from the machine to the user's SSH profile.

#{Examples.Example("SSHKnownAdd")}

<h1>Client Authentication keys

The <tt>ssh auth</tt> command updates mesh key entries in the <tt>authorized_keys</tt>
file using information from the specified mesh portal.

For example, if the <tt>authorized_keys</tt> file has an entry for Alice's Mesh profile
(<tt>alice@example.com.mm--ssss</tt>), the corresponding profile is fetched and the 
corresponding SSH device public keys added:

~~~~
TBS the initial SSH file
~~~~

#{Examples.Example("SSHAuth")}

~~~~
TBS the expanded SSH file
~~~~

The <tt>ssh public</tt> command writes the SSH public device key for the current device to a file.

#{Examples.Example("SSHPublic")}

The <tt>ssh private</tt> command writes the SSH device private key for the current device to a file
in various private key file formats.
When using this command to script configuration of SSH clients, the private key SHOULD always
be encrypted under a suitably secure password. The <tt>keygen</tt> command may be used
to generate a strong temporary password for this purpose.

#{Examples.Example("SSHPrivate")}




#end file


#end xclass
