#using System.Text
#using Goedel.Mesh
#using Goedel.Protocol
#xclass ExampleGenerator ExampleGenerator


#file UserGuideCredential "UserGuide/Apps/catalog.md" CreateExamples Examples
<title>Catalog
<titlebanner><h1>Mesh/Catalog

<h4>End-to-end encrypted password, bookmarks, contacts management and more.
</titlebanner>
<leftmain>

This document provides an introduction to the Mesh/Confirm application. For a
more complete description and a detailed reference guide, consult the 
<a="/Documents/draft-hallambaker-mesh-app.html">Internet Draft</a>.

The Mesh/Catalog application is used to maintain collections of passwords, bookmarks 
and similar data and synchronize these across all the devices connected to a profile.
The types of data currently supported are:

<ul>
<li>Credentials
<li>Contacts
<li>Bookmarks
<li>Calendar
</ul>

If an item is added to a profile on one device, it becomes available to every device 
connected to the profile.

The protocol is designed to allow intelligent handling of cases in which multiple 
devices attempt to make conflicting updates to the same data item at or close to
the same time. 

Mesh/Catalog applications are stored at a Mesh/Account service. While a Mesh/Account 
service provider may also be a portal provider, this is not necessary. Nor is Mesh/Account
data synchronized between service providers through the CryptoMesh. The Mesh portal
service is intended to support very small quantities of data that are relatively 
stable over long periods of time. A Mesh/Account service is designed to support larger
quantities of data with frequent incremental updates.

<h1>Creating a Mesh/Account.

As with all the Mesh applications supported by a Mesh Service, each user must
have an account with the application service:

#{Examples.Example("AccountAlice")}

The Mesh/Catalog password and bookmarks manager were originally designed with the intention
that they would be integrated into another application such as a Web browser. They may
be accessed using the command line tool however and as this example shows, this can
be very useful.

Having created her application service account, Alice can add a credential. In this
case it is the username and password for an ftp service:

#{Examples.Example("PasswordAdd")}

Having added the password to her profile, Alice can retrieve it when needed.

#{Examples.Example("PasswordGet")}

Using the password catalog in this fashion provides a reminder. But what Alice really
wants to be able to do is to automate the process of using the ftp client to upload 
files without having to enter her password each time or (worse) include the password
in the script:

#{ToDo ("ConfirmScipt","Write the confirm script")}

Having automated access to the ftp site, Alice doesn't need her password to be either
memorable or conveniently short. She decides to replace her bad password with a strong
password that is randomly generated:

#{Examples.Example("PasswordKeygen")}
#{Examples.Example("PasswordUpdate")}



#end file


#end xclass

