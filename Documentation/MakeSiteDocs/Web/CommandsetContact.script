#using System.Text
#using Goedel.Mesh
#using Goedel.Mesh.Shell
#using Goedel.Protocol
#% #pragma warning disable IDE0022
#% #pragma warning disable IDE0060
#% #pragma warning disable IDE1006
#xclass ExampleGenerator CreateExamples


#zfile CreateExamples WebContact "Guide/contact.md" Examples
#% MakeTitle ("contact");

The `contact` command set is used to manage the user's contacts catalogue.

The contacts catalogue plays an important role in Mesh messaging as it is used to 
manage the security policy for sending outbound messages and is one of the
sources used to compile the access control authorizations (i.e. spam filtering) 
on inbound messages.

The Mesh Service cannot read the contacts catalog entries themselves but
the data in the contact catalog is used to compile the access catalog entries
that do.

Although the `meshman` tool is capable of adding, deleting and retrieving
contact entries, it is intended to serve as a component to be used to build user
interfaces rather than a tool designed for daily use.

#{FutureFeature("Contact/Auth", "Specify messaging authorizations")}

#### Adding contacts from a file

The '/self' option is used to mark an entry as being a contact entry for the account
holder.

#%  ConsoleExample (Contact.ContactAdd);

The file #{CarolContactFile} contains Carol's contact information in
JSON format:

~~~~
[Carol's contact information]
~~~~

The  #{ToCommand("contact self")} command is used to inport a contact and mark it as 
being the user's own contact details:

#%  ConsoleExample (Contact.ContactAddSelf);

#### Exchanging contacts with other users.

Every Mesh Messaging communication is mediated through access control. Unlike
a telephone number, a postal or email address, mere knowledge of a Mesh
Messaging address does not grant the ability to use it to send a message. This
makes exchange of contact information considerably easier since we are only
concerned with the authenticity and accuracy of the identity claims made, 
the mesh address information itself is not confidential.

Contacts may be acquired from other users through a variety of approaches. If the 
parties meet in person, the exchange may be performed through a QR code or near
field communication exchange. If they are remote from each other, a network
mediated exchange may be used.

Exchange need not be reciprocated. A unidirectional exchange may be effected by
means of a URI or QR code printed on a business card or a Web site.


###### Message Exchange


#{ToCommand("message contact")}

#%  ConsoleExample (Contact.ContactBobRequest );

#{ToCommand("message accept")}
#{ToCommand("contact list")}


#%  ConsoleExample (Contact.ContactAliceResponse );

#%  ConsoleExample (Contact.ContactBobFinal );



###### Dynamic Exchange


#%  ConsoleExample (Contact.ContactCarolDynamicPin );

#%  ConsoleExample (Concat (Contact.ContactCarolDynamicFetch, Contact.ContactCarolListAlice));

#%  ConsoleExample (Concat (Contact.ContactCarolDynamicAliceGet, Contact.ContactCarolListCarol));



#{ToCommand("contact dynamic")}

#{ToCommand("contact fetch")} / #{ToCommand("contact exchange")}

#{ToCommand("message accept")}


#% ConsoleExample (ShellMessage.ContactAccept);

###### Static Exchange

#{ToCommand("contact static")}
#{ToCommand("contact fetch")}

#%  ConsoleExample (Contact.ContactEdwardStaticUri );

#%  ConsoleExample (Concat (Contact.ContactEdwardStaticFetch, Contact.ContactEdwardListAlice));


#### Finding contacts

The #{ToCommand("contact get")} command retreives a contact by the contact's 
email address or label:

#%  ConsoleExample (Contact.ContactGet);

#### Listing contacts

A complete list of contacts is obtained using the  #{ToCommand("contact list")} command:

#%  ConsoleExample (Contact.ContactList);

#### Deleting contacts

Contact entries may be deleted using the  #{ToCommand("contact delete")} command:

#%  ConsoleExample (Contact.ContactDelete);



#### Adding devices

#%  ConsoleExample (ShellContact.ContactList1);

Devices are given authorization to access the contacts catalog using the 
 #{ToCommand("device auth")} command:

#%  ConsoleExample (Connect.ConnectJoinAuth );

The newly authorized device can now access the contacts catalog:

#%  ConsoleExample (ShellContact.ContactList2);

#end zfile

#zfile CreateExamples ContactReference "Reference/contact.md" Examples
#% var CommandSet = CommandLineInterpreter.DescribeCommandSet_Contact;


#% Describe(CommandSet);

#! ------------------ contact delete
#% Describe(CommandSet, _ContactDelete._DescribeCommand);

The 'contact delete' command deletes a contact entry entry by means of 
its unique catalog identifier.

#% ConsoleReference (Contact.ContactDelete);

#! ------------------  contact dynamic
#% Describe(CommandSet, _ContactDynamic._DescribeCommand);

The 'contact dynamic' command creates a dynamic contact URI such as
might be presented to another user as a QR code. The URI combines the
location data for the contact with an PIN that may
be used to authenticate the response in a mutual exchange.


#% ConsoleReference (Contact.ContactDougDynamicUri);

#! ------------------ contact exchange
#% Describe(CommandSet, _ContactExchange._DescribeCommand);

The 'contact exchange' command is used to complete a mutual contact exchange
by means of a dynamic URI.

#% ConsoleReference (Contact.ContactDougDynamicFetch);


#! ------------------ contact fetch
#% Describe(CommandSet, _ContactFetch._DescribeCommand);

The 'contact fetch' command is used to acquire a dynamic or static contact
presented as a URI or QR code without reciprocating the exchange.

#% ConsoleReference (Contact.ContactEdwardStaticFetch);

#! ------------------ contact get
#% Describe(CommandSet, _ContactGet._DescribeCommand);

The 'contact get' command retrieves a contact entry by means of its 
unique catalog identifier.

#% ConsoleReference (Contact.ContactGet);

#! ------------------ contact import
#% Describe(CommandSet, _ContactImport._DescribeCommand);

The 'contact import' command is used to add a contact entry to the catalog
from a file

#% ConsoleReference (Contact.ContactImport);

#! ------------------ contact list
#% Describe(CommandSet, _ContactDump._DescribeCommand);

The 'contact list' command lists all data in the contact catalog.

#% ConsoleReference (Contact.ContactCarolListAlice);


#! ------------------ contact static
#% Describe(CommandSet, _ContactStatic._DescribeCommand);

The 'contact static' command creates a URI from which a static QR code may be created
to allow contact information to be published on a business card etc. in machine
readable form.
#% ConsoleReference (Contact.ContactEdwardStaticUri);

#end zfile

#end xclass

