#using System.Text
#using Goedel.Mesh
#using Goedel.Mesh.Shell
#using Goedel.Protocol
#% #pragma warning disable IDE0022
#% #pragma warning disable IDE0060
#% #pragma warning disable IDE1006
#xclass ExampleGenerator CreateExamples


#zfile CreateExamples WebContact "Guide/contact.md" Examples
#% MakeTitle ("contact");

The `contact` command set is used to manage the user's contacts catalogue.

The contacts catalogue plays an important role in Mesh messaging as it is used to 
manage the security policy for sending outbound messages and is one of the
sources used to compile the access control authorizations (i.e. spam filtering) 
on inbound messages.

The Mesh Service cannot read the contacts catalog entries themselves but
the data in the contact catalog is used to compile the access catalog entries
that grant the service the ability to act on the account holder's behalf..

Although the `meshman` tool is capable of adding, deleting and retrieving
contact entries, it is intended to serve as a component to be used to build user
interfaces rather than a contact book designed for daily use.

#{FutureFeature("Contact/Auth", "Specify messaging authorizations")}

#### Adding contacts from a file

The #{ToCommand("contact import")} command adds contact information to the catalog directly.

The file #{CarolContactFile} contains Carol's contact information in
JSON format:

~~~~
[Carol's contact information]
~~~~

Alice adds Carol's contact information to her contact catalog directly:

#%  ConsoleExample (Contact.ContactAdd);

The  #{ToCommand("contact self")} command is used to inport a contact and mark it as 
being the user's own contact details:

#%  ConsoleExample (Contact.ContactAddSelf);

#### Exchanging contacts with other users.

Every Mesh Messaging communication is mediated through access control. Unlike
a telephone number, a postal or email address, mere knowledge of a Mesh
Messaging address does not grant the ability to use it to send a message. This
makes exchange of contact information considerably easier since we are only
concerned with the authenticity and accuracy of the identity claims made, 
the mesh address information itself is not confidential.

Contacts may be acquired from other users through a variety of approaches. If the 
parties meet in person, the exchange may be performed through a QR code or near
field communication exchange. If they are remote from each other, a network
mediated exchange may be used.

Exchange need not be reciprocated. A unidirectional exchange may be effected by
means of a URI or QR code printed on a business card or a Web site.


###### Remote Contact Exchange

The  #{ToCommand("message contact")} command begins a remote contact exchange.
This form of exchange allows exchange of contact information between users
who are not present in the same location.

To request an exchange of contact information with Alice, Bob specifies her 
Mesh account address:

#%  ConsoleExample (Contact.ContactBobRequest );

Alice accepts the contact exchange with the #{ToCommand("message accept")} 
command. She can now check Bob's contact appears in her contacts catalog 
with the #{ToCommand("contact list")} command:

#%  ConsoleExample (Contact.ContactAliceResponse );

Since Bob initiated the contact exchange, the authorization to accept 
Alice's contact information is implicit in Bobs original command. All he needs
to do is synchronize his device with the service and Alice's contact
information appears in his catalog.

#%  ConsoleExample (Contact.ContactBobFinal );


###### Dynamic Contact Exchange

The Dynamic Contact Exchange is designed for situations where the parties are
present in the same physical location. The contact exchange being typically mediated
by means of a QR code or near field communication interaction.

Carol begins a dynamic contact exchange with the #{ToCommand("contact dynamic")} 
command.

#%  ConsoleExample (Contact.ContactCarolDynamicPin );

The URI generated by the contact dynamic command is really intended to be presented as
a QR code or other machine readable form. In this case the URI is entered into the
meshman tool directly using the #{ToCommand("message contact")} command 

Alice can accept the contact using either the #{ToCommand("contact fetch")} 
command if she wants to accept Carol's contact without reciprocating or
the #{ToCommand("contact exchange")} if she wants to provide Carol with her
contact information. In this case she authorizes a mutual exchange
adding Carol to her contacts catalog:

#%  ConsoleExample (Concat (Contact.ContactCarolDynamicFetch, Contact.ContactCarolListAlice));

Carol can now complete the interaction by synchronizing one of her devices:

#%  ConsoleExample (Concat (Contact.ContactCarolDynamicAliceGet, Contact.ContactCarolListCarol));

###### Static Exchange

The static contact exchange allows a QR code or other machine readable presentation
of a URI to be used to publish a contact in a form that allows another to add it to their
catalog. Such a code might be printed on a business card for example.

Doug creates a static contact URI with the #{ToCommand("contact static")} command:

#%  ConsoleExample (Contact.ContactDougStaticUri );

Alice scans the URI printed on Doug's business card and collects the contact information.
using the #{ToCommand("contact fetch")} command:

#%  ConsoleExample (Concat (Contact.ContactDougStaticFetch, Contact.ContactStaticListAlice));


#### Finding contacts

The #{ToCommand("contact get")} command retreives a contact by the contact's 
email address or label:

#%  ConsoleExample (Contact.ContactGet);

#### Listing contacts

A complete list of contacts is obtained using the  #{ToCommand("contact list")} command:

#%  ConsoleExample (Contact.ContactList);

#### Deleting contacts

Contact entries may be deleted using the  #{ToCommand("contact delete")} command:

#%  ConsoleExample (Contact.ContactDelete);



#### Adding devices

The device Alice5 was connected to her account without the contact catalog right.
Requests to access the contacts catalog fail:

#%  ConsoleExample (Contact.ContactList1);

The ability to selectively grant access to devices allows realization of the 'least 
privilege' principal in which each user and device is granted the bare minimum
of functionality required to perform their task. What the device does not know, the
device cannot disclose.

Devices are given authorization to access the contacts catalog using the 
 #{ToCommand("device auth")} command.

#%  ConsoleExample (Connect.ConnectJoinAuth );

The newly authorized device can now access the contacts catalog:

#%  ConsoleExample (Contact.ContactList2);

#end zfile

#zfile CreateExamples ContactReference "Reference/contact.md" Examples
#% var CommandSet = CommandLineInterpreter.DescribeCommandSet_Contact;


#% Describe(CommandSet);

#! ------------------ contact delete
#% Describe(CommandSet, _ContactDelete._DescribeCommand);

The 'contact delete' command deletes a contact entry entry by means of 
its unique catalog identifier.

#% ConsoleReference (Contact.ContactDelete);

#! ------------------  contact dynamic
#% Describe(CommandSet, _ContactDynamic._DescribeCommand);

The 'contact dynamic' command creates a dynamic contact URI such as
might be presented to another user as a QR code. The URI combines the
location data for the contact with an PIN that may
be used to authenticate the response in a mutual exchange.


#% ConsoleReference (Contact.ContactCarolDynamicPin);

#! ------------------ contact exchange
#% Describe(CommandSet, _ContactExchange._DescribeCommand);

The 'contact exchange' command is used to complete a mutual contact exchange
by means of a dynamic URI.

#% ConsoleReference (Contact.ContactCarolDynamicFetch);


#! ------------------ contact fetch
#% Describe(CommandSet, _ContactFetch._DescribeCommand);

The 'contact fetch' command is used to acquire a dynamic or static contact
presented as a URI or QR code without reciprocating the exchange.

#% ConsoleReference (Contact.ContactDougStaticFetch);

#! ------------------ contact get
#% Describe(CommandSet, _ContactGet._DescribeCommand);

The 'contact get' command retrieves a contact entry by means of its 
unique catalog identifier.

#% ConsoleReference (Contact.ContactGet);

#! ------------------ contact import
#% Describe(CommandSet, _ContactImport._DescribeCommand);

The 'contact import' command is used to add a contact entry to the catalog
from a file

#% ConsoleReference (Contact.ContactImport);

#! ------------------ contact list
#% Describe(CommandSet, _ContactDump._DescribeCommand);

The 'contact list' command lists all data in the contact catalog.

#% ConsoleReference (Contact.ContactCarolListAlice);


#! ------------------ contact static
#% Describe(CommandSet, _ContactStatic._DescribeCommand);

The 'contact static' command creates a URI from which a static QR code may be created
to allow contact information to be published on a business card etc. in machine
readable form.
#% ConsoleReference (Contact.ContactDougStaticUri);

#end zfile

#end xclass

