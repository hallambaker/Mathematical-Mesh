#using System.Text
#using Goedel.Mesh
#using Goedel.Mesh.Shell
#using Goedel.Protocol
#% #pragma warning disable IDE0022
#% #pragma warning disable IDE0060
#% #pragma warning disable IDE1006
#xclass ExampleGenerator CreateExamples



#zfile CreateExamples WebBookmark "Guide/bookmark.md" Examples
#% MakeTitle ("bookmark");

The `bookmark` command set is used to manage a bookmarks catalog which contains
a collection of bookmarks and citations and shares them between devices connected 
to the profile with the relevant access authorization.

It should be noted that by its very nature, a bookmark manager is most likely 
to be useful within an application that uses bookmarks for navigation. The
commands provided in the 'meshman' tool are intended to support debuging and 
maintenance of such applications and afford a means of interacting through scripts.

The term 'bookmark' is interpreted loosely to mean any piece of index information
that the user might want to index and add to a catalog for future use. This
includes traditional Web bookmarks and citations to academic articles.

The current version of the Mesh protocols only support access to a single personal 
bookmark catalog but the approach could, in principle, be extanded to support multiple
named bookmark catalogs per user and catalogs sharted between multiple users.

#{FutureFeature("Bookmark/Abstract", "The abstract and reaction features are not yet implemented")}

#{FutureFeature("Bookmark/JSON", "Allow upload of a JSON file with the bookmark entey")}


#### Adding bookmarks

The #{ToCommand("bookmark add")} command adds a bookmark entry to a catalog:

#%  ConsoleExample (ShellBookmark.BookmarkAdd);

The path mechanism is clearly clunky and should be eliminated in favor or a series of
hashtag type search terms which may be hierarchical if this seems useful.

The add command should be expanded to allow an abstract and reaction to be included.
So if I find material useful, I give it thumbs up, terrible, a thumbs down.

It should also be possible to attach comments to bookmarks giving a longer explanation.


#### Finding bookmarks

The #{ToCommand("bookmark get")}  command retreives a bookmark  by its index label:

#%  ConsoleExample (ShellBookmark.BookmarkGet);

#### Deleting bookmarks

Bookmark entries may be deleted using the  #{ToCommand("bookmark delete")} command:

#%  ConsoleExample (ShellBookmark.BookmarkDelete);

#### Listing bookmarks

A complete list of bookmarks is obtained using the  #{ToCommand("bookmark list")} command:

#%  ConsoleExample (ShellBookmark.BookmarkList);

#### Adding devices



#%  ConsoleExample (ShellBookmark.BookmarkList1);

Devices are given authorization to access the bookmarks catalog using the 
 #{ToCommand("device auth")} command:


#%  ConsoleExample (Connect.ConnectJoinAuth );

The new device now has access to the Bookmarks catalog:

#%  ConsoleExample (ShellBookmark.BookmarkList2);
#end zfile

#zfile CreateExamples BookmarkReference "Reference/bookmark.md" Examples
#% var CommandSet = CommandLineInterpreter.DescribeCommandSet_Bookmark;


#% Describe(CommandSet);

The `bookmark` command set is used to manage a bookmarks catalog which contains
a collection of bookmarks and citations and shares them between devices connected 
to the profile with the relevant access authorization.

It should be noted that by its very nature, a bookmark manager is most likely 
to be useful within an application that uses bookmarks for navigation. The
commands provided in the 'meshman' tool are intended to support debuging and 
maintenance of such applications and afford a means of interacting through scripts.


#% Describe(CommandSet, _BookmarkAdd._DescribeCommand);

The 'bookmark add' command is used to add bookmarks to the catalog.

The catalog labels, uri and title are specified as parameters.

An abstract, comment and reaction tags may be specified as options.

#% ConsoleReference (ShellBookmark.BookmarkAdd);

#% Describe(CommandSet, _BookmarkDelete._DescribeCommand);

The 'bookmark delete' command deletes a bookmark by means of its unique catalog identifier.

#% ConsoleReference (ShellBookmark.BookmarkDelete);

#% Describe(CommandSet, _BookmarkGet._DescribeCommand);

The 'bookmark get' command retrieves a bookmark by means of its unique catalog identifier.

#% ConsoleReference (ShellBookmark.BookmarkGet);

#% Describe(CommandSet, _NetworkImport._DescribeCommand);

The 'bookmark import' command is used to add a bookmark entry to the catalog
from a file


#% Describe(CommandSet, _BookmarkDump._DescribeCommand);

The 'bookmark list' command lists all data in the bookmark catalog.

#% ConsoleReference (ShellBookmark.BookmarkList);

#end zfile

#end xclass



