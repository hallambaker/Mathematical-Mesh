#using System.Text
#using Goedel.Mesh
#using Goedel.Mesh.Shell
#using Goedel.Protocol
#xclass ExampleGenerator CreateExamples



#xfile CreateExamples WebConnect "Guide/device.md" CreateExamples Examples

## Using the device Command Set

The `device` command set contains commands used to connect devices to a 
profile.

#### Requesting a connection

The #{ToCommand("device request")} command is used on the new device 
to request connection to the user's profile. Alice need only specify 
the mesh service account #{Examples.AliceAccount} to which connection is requested:

#%  ConsoleExample (Examples.DeviceRequest);

In this case there is no existing device profile and so a new profile is
created and used to create a registration request which is posted to the user's 
account.

The tool reports the connection request authenticator, a UDF fingerprint which
authenticates this particular request.

Alice must use a device already connected to her account to
complete the connection process.

The #{ToCommand("device pending")} command gives a list of pending connection
messages.

#%  ConsoleExample (Examples.ConnectPending);

Alice sees the request that she posted and approves it with the connect
#{ToCommand("device accept")} command:

#%  ConsoleExample (Examples.ConnectAccept);

There is a second request (from Mallet) that Alice doesn't recognize. Alice rejects this
request:

#%  ConsoleExample (Examples.ConnectReject);

The connection process is completed by synchronizing the new device. At this point,
all the applications that were available to the first device are available to the
second:

#%  ConsoleExample (Examples.ConnectSync);

####Managing connected devices

The #{ToCommand("device list")} command gives a list of devices in the device 
catalog:

#%  ConsoleExample (Examples.ConnectList);

The #{ToCommand("device delete")} command removes a device from the catalog:

#%  ConsoleExample (Examples.ConnectDelete);


#### Requesting a connection using a PIN

The simple connection mechanism is straightforward but relies on the user who is
processing the connection requests recognizing the correct fingerprint. While this
is approach has proved practical when it is the same user who is making and 
approving the connection request, it is less satisfactory when this is done
by two different people or by the same person at different times.

Connection requests may be authenticated by means of a PIN created on an 
administration device. The #{ToCommand("device pin")} command generates
a new PIN code:

#%  ConsoleExample (Examples.ConnectGetPin);

The pin code can now be used to authenticate the connection request:

#%  ConsoleExample (Examples.ConnectPin);

Since the PIN code that was issued was set to be self-authorizing, the device
is connected automatically when the user synchronizes their account from an 
administrator device:

#%  ConsoleExample (Examples.ConnectPending3);


#### Pre Configuring Devices

The #{ToCommand("device delete")} command creates a device profile without attempting
to connect the device to a Mesh profile:

#%  ConsoleExample (Examples.DeviceCreate);

The most common reason for generating a device profile in this fashion is to allow
an embedded or 'IoT' device to be preconfigured for Mesh control during manufacture.


###### Requesting a connection using an EARL

Encrypted Authenticated Resource Locators provide one means of preconfiguring
a device to enable simple and straightforward connection to a Mesh profile.

The EARL itself is typically presented by means of a barcode on the device
or its packaging. To connect the device, the user simply scans the QR code using
a Mesh enabled application on an administion device and applies power.
configuration then proceeds automatically.

Alternatively, the EARL may be transfered wirelessly by a near field 
communications link or by cycling an LED.



To enable this connection mode, the manufacturer performs the steps of

* Generating a device profile and open connection request

* Encrypting the open connection request under a randomly chosen key

* Provisioning the encrypted device profile to a Web site

* Creating UDF EARL of the key

* Converting the EARL to a QR code which is printed on the device or its packaging.

These steps may be performed on the device to be connected using the 
#{ToCommand("device request")} command with the `/earl` option. Instead of requesting
connection to a user account, the device requests connection to a special purpose
account established for the purpose of providing a hailing account for enabling
this type of device connection.

#% ConsoleExample (Examples.DeviceEarl1);

The device can attempt to complete the connection whenever it is provided with power 
and network connectivity using the #{ToCommand("profile sync")} command.

#% ConsoleExample (Examples.DeviceEarl2);

The key specified in the '/earl' option is used to create a UDF EARL specifying a 
location from which a device description document may be obtained. Note that 
it is not necessary for the device description document to be on the same service 
or even in the same domain as the service used to resolve the UDF.

The UDF is typically presented to the user as a QR code either on the device itself 
or its packaging. Alternatively, a device might transmit the UDF by blinking its 
activity LED at a rate suitable to allow transmission of a short message to a 
smart phone camera.

A QR code or other scanning application can use the meshman tool to resolve the EARL 
and retrieve the data using the #{ToCommand("device earl")} command:

#% ConsoleExample (Examples.DeviceEarl3);

The tool performs the tasks of resolving the EARL, decrypting the discovery record
and posting a connection response to both the hailing account and the profile account.
The next time the device polls the hailing account, it retrieves the connection data:

#% ConsoleExample (Examples.DeviceEarl4);

Once connected to an account, a device does not attempt to poll the hailing account. 
Further attempts to make a connection are thus ignored unless the device is 
reset.


#end xfile

#xfile CreateExamples ConnectReference "Reference/device.md" CreateExamples Examples
#% var CommandSet = CommandLineInterpreter.DescribeCommandSet_Connect;


#% Describe(CommandSet);

#% Describe(CommandSet, _DeviceAccept._DescribeCommand);

Accept a pending connection request.

#%  ConsoleReference (Examples.ConnectAccept);

#% Describe(CommandSet, _DeviceAuthorize._DescribeCommand);

The `device auth` command changes the set of authorizations given to the
specified device, adding or removing authorizations according to the 
flags specified on the command line.

The parameter specifies the device being configured by means of either
the UDF of the device profile or the device identifier.

The `/id` option may be used to specify a friendly name for the device.

Specifying the `/all` option causes the device to be granted all the 
available device authorizations except for those explicitly denied 
by means of a negative authorization grant (e.g. `/nobookmark`).

Specifying the `/noall` option causes the device to be granted no 
available device authorizations except for those explicitly granted 
by means of a positive authorization grant (e.g. `/bookmark`).

If neither the `/all` option or the `/noall` option is specified, the 
device authorizations remain unchanged except where explicitly 
granted or denied.

The following authorizations may be granted or denied:

* `bookmark`: Authorize response to confirmation requests
* `calendar`: Authorize access to calendar catalog
* `contact`: Authorize access to contacts catalog
* `confirm`: Authorize response to confirmation requests
* `mail`: Authorize access to configure SMTP mail services.
* `network`: Authorize access to the network catalog
* `password`: Authorize access to password catalog
* `ssh`: Authorize use of SSH

#%  ConsoleReference (Examples.ContactAuth);

#% Describe(CommandSet, _DeviceAccept._DescribeCommand);

The `device accept` command accepts the specified connection request.

The command must specify the connection identifier of the request 
being accepted. The connection identifier may be abbreviated provided that
this uniquely identifies the connection being accepted and that at least 
four characters are given.

The `/id` option may be used to specify a friendly name for the device.

The authorizations to be granted to the device may be specified using
the same syntax as for the `device auth` command with the default authorization
being that all authorizations are denied.

#%  ConsoleReference (Examples.ConnectAccept);

#% Describe(CommandSet, _DeviceCreate._DescribeCommand);

The `device create` command creates a new device profile without attempting
to connect the profile to a Mesh service account or profile.

This command allows a device to be preconfigured during manufacture or
site configuration before delivery or assignment to an indivdual user.

The `/id` and `/dd` options allow a device identifier and description to be 
assigned to the device.

The profile is made the default profile for the device if either there is
no previous default device profile or the`/default` option is specified.

#%  ConsoleReference (Examples.DeviceCreate);

#% Describe(CommandSet, _DeviceDelete._DescribeCommand);

The `device delete` command removes the specified device from the catalog.

The parameter specifies the device being configured by means of either
the UDF of the device profile or the device identifier.

#%  ConsoleReference (Examples.ConnectDelete);

#% Describe(CommandSet, _DeviceEarl._DescribeCommand);

The `device earl` command attempts to connect a device to a personal profile
by means of an EARL UDF.

The EARL is typically presented to the administration device in the form of
a QR code which is decoded and passed to the meshman application.

The `/id` option may be used to specify a friendly name for the device if the
connection attempt succeeds.

The authorizations to be granted to the device may be specified using
the same syntax as for the `device auth` command with the default authorization
being that all authorizations are denied.

#%  ConsoleReference (Examples.DeviceEarl3);

#% Describe(CommandSet, _DeviceList._DescribeCommand);

The `device list` command lists the device profiles in the device catalog.

#%  ConsoleReference (Examples.ConnectList);

#% Describe(CommandSet, _DevicePending._DescribeCommand);

The `device pending` command lists the pending device connection requests in
the inbound message spool.

#%  ConsoleReference (Examples.ConnectPending);

#% Describe(CommandSet, _DeviceReject._DescribeCommand);

The `device reject` command rejects the specified connection request.

The command must specify the connection identifier of the request 
being accepted. The connection identifier may be abbreviated provided that
this uniquely identifies the connection being accepted and that at least 
four characters are given.

#%  ConsoleReference (Examples.ConnectReject);

#% Describe(CommandSet, _DeviceGetPIN._DescribeCommand);

The `device pin` command generates and registers a new PIN code that may be used
to authenticate a device connection request.

The `/length` option specifies the length of the generated PIN in (significant)
characters.

The '/expire' option specifies an expiry time for the request as an integer 
followed by the letter m, h or d for minutes, hours and days respectively.

#%  ConsoleReference (Examples.ConnectGetPin);

#% Describe(CommandSet, _DevicePreConnect._DescribeCommand);

The `device pre \<account\>` command requests connection of a device to a mesh hailing
account supporting the EARL connection profile.

The \<account\> parameter specifies the hailing account for which the connection request is
made.

The `/key` option may be used to generate the encryption key to be used.

If the `/export` option is specified, the device profile and private keys are written to
a DARE container archive under the specified encryption options rather than the device 
on which the command is issued. This allows a host machine to be used to perform 
offline initialization of device profiles in batch mode during manufacture.

#%  ConsoleReference (Examples.DeviceEarl1);

#% Describe(CommandSet, _DeviceRequestConnect._DescribeCommand);

The `device request \<account\>` command requests connection of a device to a mesh profile.

The \<account\> parameter specifies the account for which the connection request is
made.

If the account holder has generated an authentication code, this is specified by means of 
the `/pin` option.



#%  ConsoleReference (Examples.DeviceRequest);


#end xfile


#end xclass


