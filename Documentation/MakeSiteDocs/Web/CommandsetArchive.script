#using System.Text
#using Goedel.Mesh
#using Goedel.Mesh.Shell
#using Goedel.Protocol
#% #pragma warning disable IDE0022
#% #pragma warning disable IDE0060
#% #pragma warning disable IDE1006
#xclass ExampleGenerator CreateExamples



#zfile CreateExamples WebArchive "Guide/archive.md" Examples
#% MakeTitle ("archive");

**Under development**: This command set is currently under development and many
features are documented but not yet implemented. Use with care!

The `archive` command set contains commands that encode, decode and verify 
DARE envelopes and sequences.

#### Encoding, decoding and verifying individual files in a DARE envelope.

The #{ToCommand("dare encode")}, #{ToCommand("dare decode")} and
#{ToCommand("dare verify")} commands are used to encode files as DARE Messages,
decode and verify them respectively. If the '/encrypt' option is specified,
the contents are encrypted under the corresponding encryption key:

#% ConsoleExample (Account.ConsoleEncryptFile);

By default, a content digest is calculated over the contents. This may be 
suppressed using the `/nohash` flag.

The data contents may be encrypted and authenticated under a specified symmetric key:

#% ConsoleExample (ShellDare.DareSymmetric);

Specifying a directory instead of a file causes all the files in the directory to be 
encoded:

#% ConsoleExample (ShellDare.DareSub);

Files may also be signed using the user's Mesh signature key and/or encrypted for one
or more recipients. In this example, Alice creates a message intended for Bob.
Alice signs the message with her private signature key and encrypts it under Bob's
public encryption key.

#% ConsoleExample (ShellDare.DareMesh);


###### Verifying a DARE message.

The #{ToCommand("dare verify")} command is used to verify the signature and 
digest values on a DARE Message without decoding the message body:

#% ConsoleExample (ShellDare.DareVerifyDigest);

The command to verify a signed message is identical:

#% ConsoleExample (ShellDare.DareVerifySigned);

Messages that are encrypted and authenticated under a specified symmetric key 
may be verified at the plaintext level if the key is known or the ciphertext 
level otherwise.

#% ConsoleExample (ShellDare.DareVerifySymmetric);


#% ConsoleExample (ShellDare.DareVerifySymmetricUnknown);

###### Decoding a DARE message to a file.

The #{ToCommand("dare decode")} command is used to decode and verify DARE Messages:

#% ConsoleExample (ShellDare.DareDecodePlaintext);

To decode a message encrypted under a symmetric key, we must specify the key:

#% ConsoleExample (ShellDare.DareDecodeSymmetric);

If the message is encrypted under our private encryption key, the tool will locate
the necessary decryption key(s) automatically:

#% ConsoleExample (ShellDare.DareDecodePrivate);


#### Creating an EARL.

The #{ToCommand("dare earl")} command is used to create an EARL:

#% ConsoleExample (ShellDare.DareEarl);

A new secret is generated with the specified number of bits, this is then used
to generate the key identifier and encrypt the input file to a file with the
name of the key identifier.

The `/log` option causes the filename, encryption key and other details of
the transaction to be written to a DARE Sequence Log.

#% ConsoleExample (ShellDare.DareEARLLog);

The `/new` option causes the file to be encoded if and only if it has not 
been processed already.

#% ConsoleExample (ShellDare.DareEARLLogNew);


#### Creating Sequences

Sequences are created with the #{ToCommand("dare create")},
#{ToCommand("dare archive")} or #{ToCommand("dare log")} commands. 

#{ToCommand("dare archive")} creates a sequence that is specialized
for use as a DARE archive while #{ToCommand("dare log")} creates a 
sequence that is specialized for use as an event log. 
#{ToCommand("dare sequence")} creates an unspecialized sequence.

#% ConsoleExample (ShellSequence.SequenceCreate);

A sequence may have a security policy specified when it is created. If
no encryption or signature policy is specified on creation, the entries
appended to the sequence will not be encrypted or signed 

The cryptographic enhancements specified when a sequence is created have the 
same format and function as for DARE Messages but their scope is the sequence
as a whole.

For example, Alice creates an encrypted sequence readable by anyone who is a
member of the group #{GroupAccount};

#% ConsoleExample (ShellSequence.SequenceCreateEncrypt);

Since it is rarely desirable to sign every entry in a sequence, signatures
are typically added to a sequence when entries or indexes are added. 

###### Archives

The #{ToCommand("dare archive")} creates a new archive, adds the
specified file(s) as entries and appends an index as the final record:

#% ConsoleExample (ShellSequence.SequenceArchive);

An archive may be signed and encrypted:

#% ConsoleExample (ShellSequence.SequenceArchiveEnhance);

The signature on a signed archive is calculated over the final apex of the 
Merkel tree. Thus a single signature verification may be used to validate
any or all entries in the sequence.

#### Reading Sequences

The #{ToCommand("dare verify")} command used to verify enveloped is also used to
verify the contents of a sequence: 

#% ConsoleExample (ShellSequence.SequenceArchiveVerify);

The verification performed depends on the type of authentication applied to the
sequence and whether the verifier can provide the necessary authentication or
decryption keys.

One or more sequence entries may be extracted to a file using the  
#{ToCommand("dare extract")} command. If the sequence is an archive, all
the files are extracted by default:

#% ConsoleExample (ShellSequence.SequenceArchiveExtractAll);

Alternatively, the `/file` option may be used to extract a specific file:

#% ConsoleExample (ShellSequence.SequenceArchiveExtractFile);


#### Writing to Sequences 

The #{ToCommand("dare append")} command adds an entry to a sequence:

#% ConsoleExample (ShellSequence.SequenceAppend);

If no security enhancements are specified, the default enhancements specified 
in the index entry are applied.

The #{ToCommand("dare delete")} command adds an entry to a sequence
marking an entry as deleted:

#% ConsoleExample (ShellSequence.SequenceDelete);

Marking an entry for deletion does not cause the entry itself to be modified.
The entry is merely marked as having been deleted. To erase the entry contents,
it is necessary to either make a copy of the sequence using the `/purge`
option to reclaim the space used by deleted entries or to use the 
`/erase` or `overwrite` options.


The #{ToCommand("dare index")} command adds an index entry to the end of
sequence:

#% ConsoleExample (ShellSequence.SequenceIndex);

The index entry may be complete, providing an index of the entire file 
or incremental, only indexing the items added since the last index was created.
Indexing sequences allows the contents to be efficiently retrieved.


#### Copying and Purging Sequences

The #{ToCommand("dare copy")} command makes a copy of a sequence with
the specified filtering rules. By default, no changes are made except to 
collect tree index fields dispersed throughout the sequence with an index 
at the end:

#% ConsoleExample (ShellSequence.SequenceArchiveCopy);

The #{ToCommand("dare copy")}  command may be used to encrypt or decrypt the sequence contents during 
the copy:

#% ConsoleExample (ShellSequence.SequenceArchiveCopyDecrypt);

The #{ToCommand("dare copy")}  command may also be used to reclaim space used by deleted items
by specifying the '/purge' option:

#% ConsoleExample (ShellSequence.SequenceArchiveCopyPurge);

Note that it is not possible to purge a file in place writing the output to the input file
using this command.


#end zfile

#zfile CreateExamples ArchiveReference "Reference/archive.md" Examples
#% var CommandSet = CommandLineInterpreter.DescribeCommandSet_Archive;
#% Describe(CommandSet);

**Under development**: This command set is currently under development and many
features are documented but not yet implemented. Use with care!

The `dare` command set contains commands that encode, decode and verify 
DARE envelopes and sequences.



#! ------------------ archive append
#% Describe(CommandSet, ArchiveAppend._DescribeCommand);

The `dare append` command appends the specified file to the sequence.

#% ConsoleReference (ShellSequence.SequenceAppend);


#! ------------------ ArchiveCreate create
#% Describe(CommandSet, _ArchiveCreate._DescribeCommand);

The `dare archive` command creates an archive sequence with the specified cryptographic
enhancements. If a file or directory is specified, they are added to the archive and
an index appended to the end.

#% ConsoleReference (ShellSequence.SequenceArchive);


#! ------------------ archive copy
#% Describe(CommandSet, _ArchiveCopy._DescribeCommand);

The `dare copy` command copies a sequence applying the specified filtering 
and indexing criteria.

#% ConsoleReference (ShellSequence.SequenceArchiveCopy);


#! ------------------ archive delete
#% Describe(CommandSet, _ArchiveDelete._DescribeCommand);

The `dare delete` command marks the specified file entry as deleted in the
sequence but does not erase the data from the file.

#% ConsoleReference (ShellSequence.SequenceDelete);



#! ------------------ archive dir
#% Describe(CommandSet, _ArchiveDir._DescribeCommand);

The `dare delete` command marks the specified file entry as deleted in the
sequence but does not erase the data from the file.

#% ConsoleReference (ShellSequence.SequenceDelete);

#! ------------------ dare extract
#% Describe(CommandSet, _ArchiveExtract._DescribeCommand);

The `dare extract` command extracts the specified sequence entries and writes them
to files.

#% ConsoleReference (ShellSequence.SequenceArchiveExtractFile);


#! ------------------ dare index
#% Describe(CommandSet, _ArchiveIndex._DescribeCommand);

The `dare index` command appends an index record to the end of the sequence.

#% ConsoleReference (ShellSequence.SequenceIndex);






#end zfile

#end xclass

