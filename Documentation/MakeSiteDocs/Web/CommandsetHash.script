#using System.Text
#using Goedel.Mesh
#using Goedel.Mesh.Shell
#using Goedel.Protocol
#% #pragma warning disable IDE0022
#% #pragma warning disable IDE0060
#% #pragma warning disable IDE1006
#xclass ExampleGenerator CreateExamples



#zfile CreateExamples WebHash "Guide/hash.md" Examples
#% MakeTitle ("hash");

The `hash` command set contains commands that perform Content Digest and 
Message Authentication Code operations on the contents of a file.

#### Calculating Content Digests

The #{ToCommand("hash udf")}  command calculates the UDF value of a file:

#% ConsoleExample (ShellHash.HashUDF2);

In this case, the file `#{TestFile1}` contains the text `"#{TestText1}"`.

By default, a SHA-2-512 digest is created and the IANA Media Type parameter is
determined from the file extension of the file being processed. These defaults
may be overriden using the `/cty` and `/alg` options:

#% ConsoleExample (ShellHash.HashUDF3);

By default, UDF values are given to 140 bit precision. Higher precision may be
specified with the `/bits' option:

#% ConsoleExample (ShellHash.HashUDF200);

If the expected digest value is specified, this is used to check the calculated value:

#% ConsoleExample (ShellHash.HashUDFExpect);

The #{ToCommand("hash digest")}  command calculates the SHA-2-512 digest and
returns it in hexadecimal form:

#% ConsoleExample (ShellHash.HashDigest);

Additional digest algorithms may be specified using the `/alg` option:

#% ConsoleExample (ShellHash.HashDigests);

#### Calculating UDF Message Authentication Codes

The #{ToCommand("hash mac")} command calculates a Message Authentication Code (MAC)
over the file contents and presents it in UDF format:

A MAC may be used to create a keyed commitment value that can be used to provide
proof that a document existed at a particular time without revealing information 
that might allow disclosure of a short or otherwise predictable document by a 
brute force attack.

If no key is specified, a random secret is generated:

#% ConsoleExample (ShellHash.MAC1);

A key may be specified using the `/key` option:

#% ConsoleExample (ShellHash.MAC2);

If the expected digest value is specified, this is used to check the calculated value:


#% ConsoleExample (ShellHash.MAC3);


#end zfile

#zfile CreateExamples HashReference "Reference/hash.md" Examples
#% var CommandSet = CommandLineInterpreter.DescribeCommandSet_Hash;


#% Describe( CommandSet);

The `hash` command set contains commands that perform Content Digest and 
Message Authentication Code operations on the contents of a file.

#% Describe( CommandSet, _HashUDF._DescribeCommand);

The `hash udf` command returns the UDF Content digest of the specified input 
file according to the precision, IANA media type and digest algorithm specified
with the `/bits`, `/cty` and `/alg` options.

#% ConsoleReference (ShellHash.HashUDF2);


#% Describe( CommandSet, _HashDigest._DescribeCommand);

The `hash digest` command returns the Content digest of the specified input 
file according to the digest algorithm specifiedwith the `/alg` option.


#% ConsoleReference (ShellHash.HashDigest);

The `/alg` option allows the digest algorithm to be specified.

#% Describe( CommandSet, _HashMac._DescribeCommand);

The `hash mac` command returns the UDF Message Authentication Code of the specified 
input file according to the precision, IANA media type and digest algorithm specified
with the `/bits`, `/cty` and `/alg` options.

If a no key is specified, a new key is randomly generated, otherwise the specified 
key is used. 

If a MAC value is specified, it is compared to the calculated value and the value
true returned if and only if it matches the value specified.

#% ConsoleReference (ShellHash.MAC1);

#end zfile

#end xclass

