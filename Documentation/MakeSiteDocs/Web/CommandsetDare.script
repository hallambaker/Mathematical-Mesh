#using System.Text
#using Goedel.Mesh
#using Goedel.Mesh.Shell
#using Goedel.Protocol
#% #pragma warning disable IDE0022
#% #pragma warning disable IDE0060
#% #pragma warning disable IDE1006
#xclass ExampleGenerator CreateExamples



#zfile CreateExamples WebDare "Guide/dare.md" Examples
#% MakeTitle ("dare");

The `dare` command set contains commands that encode, decode and verify 
DARE envelopes and sequences.

#### Encoding a file as a DARE message.

The #{ToCommand("dare encode")} command is used to encode files as DARE Messages:

#% ConsoleExample (ShellDare.DarePlaintext);

In this case, the file `#{TestFile1}` contains the text `"#{TestText1}"`.

By default, a content digest is calculated over the contents. This may be 
suppressed using the `/nohash` flag.

The data contents may be encrypted and authenticated under a specified symmetric key:

#% ConsoleExample (ShellDare.DareSymmetric);

Specifying a directory instead of a file causes all the files in the directory to be 
encoded:

#% ConsoleExample (ShellDare.DareSub);

Files may also be signed using the user's Mesh signature key and/or encrypted for one
or more recipients. In this example, Alice creates a message intended for Bob.
Alice signs the message with her private signature key and encrypts it under Bob's
public encryption key.

#% ConsoleExample (ShellDare.DareMesh);


#### Verifying a DARE message.

The #{ToCommand("dare verify")} command is used to verify the signature and 
digest values on a DARE Message without decoding the message body:

#% ConsoleExample (ShellDare.DareVerifyDigest);

The command to verify a signed message is identical:

#% ConsoleExample (ShellDare.DareVerifySigned);

Messages that are encrypted and authenticated under a specified symmetric key 
may be verified at the plaintext level if the key is known or the ciphertext 
level otherwise.

#% ConsoleExample (ShellDare.DareVerifySymmetric);


#% ConsoleExample (ShellDare.DareVerifySymmetricUnknown);

#### Decoding a DARE message to a file.

The #{ToCommand("dare decode")} command is used to decode and verify DARE Messages:

#% ConsoleExample (ShellDare.DareDecodePlaintext);

To decode a message encrypted under a symmetric key, we must specify the key:

#% ConsoleExample (ShellDare.DareDecodeSymmetric);

If the message is encrypted under our private encryption key, the tool will locate
the necessary decryption key(s) automatically:

#% ConsoleExample (ShellDare.DareDecodePrivate);


#### Creating an EARL.

The #{ToCommand("dare earl")} command is used to create an EARL:

#% ConsoleExample (ShellDare.DareEarl);

A new secret is generated with the specified number of bits, this is then used
to generate the key identifier and encrypt the input file to a file with the
name of the key identifier.

The `/log` option causes the filename, encryption key and other details of
the transaction to be written to a DARE Container Log.

#% ConsoleExample (ShellDare.DareEARLLog);

The `/new` option causes the file to be encoded if and only if it has not 
been processed already.

#% ConsoleExample (ShellDare.DareEARLLogNew);


#### Creating Sequences

Containers are created with either the #{ToCommand("dare archive")} or 
#{ToCommand("dare log")}. Both commands create a sequence with the 
specified cryptographic enhancements. The #{ToCommand("container archive")}
command additionally adds the specified file(s) to the container to create 
a container archive.

#% ConsoleExample (ShellSequence.ContainerCreate);

*catalog* *spool* *archive* *log*


The cryptographic enhancements specified when a container is created have the 
same format and function as for DARE Messages but their scope is the container
as a whole.

For example, Alice creates an encrypted container readable by anyone who is a
member of the group #{GroupAccount};

#% ConsoleExample (ShellSequence.ContainerCreateEncrypt);

Since it is rarely desirable to sign every entry in a container, signatures
are typically added to a container when entries or indexes are added. 

The #{ToCommand("container archive")} creates a new container, adds the
specified file(s) as entries and appends an index as the final record:

#% ConsoleExample (ShellSequence.ContainerArchive);

An archive may be signed and encrypted:

#% ConsoleExample (ShellSequence.ContainerArchiveEnhance);

The signature on a signed archive is calculated over the final apex of the 
Merkel tree. Thus a single signature verification may be used to validate
any or all entries in the container.

#### Reading Containers

The #{ToCommand("dare verify")} command verifies the contents of a container: 

#% ConsoleExample (ShellSequence.ContainerArchiveVerify);

The verification performed depends on the type of authentication applied to the
container and whether the verifier can provide the necessary authentication or
decryption keys.


The #{ToCommand("dare extract")} 

One or more container entries may be extracted to a file using the  
#{ToCommand("container extract")} command. If the container is an archive, all
the files are extracted by default:

#% ConsoleExample (ShellSequence.ContainerArchiveExtractAll);

Alternatively, the `/file` option may be used to extract a specific file:

#% ConsoleExample (ShellSequence.ContainerArchiveExtractFile);


#### Writing to Archives 

The #{ToCommand("dare append")} command adds an entry to a container:

#% ConsoleExample (ShellSequence.ContainerAppend);

If no security enhancements are specified, the default enhancements specified 
in the index entry are applied.

The #{ToCommand("dare delete")} 

The #{ToCommand("container delete")} command adds an entry to a container
marking an entry as deleted:

#% ConsoleExample (ShellSequence.ContainerDelete);

Marking an entry for deletion does not cause the entry itself to be modified.
The entry is merely marked as having been deleted. To erase the entry contents,
it is necessary to either make a copy of the container using the `/purge`
option to reclaim the space used by deleted entries or to use the 
`/erase` or `overwrite` options.


The #{ToCommand("dare index")} command adds an index entry to the end of
container:

#% ConsoleExample (ShellSequence.ContainerIndex);

The index entry may be complete, providing an index of the entire file 
or incremental, only indexing the items added since the last index was created.
Indexing containers allows the contents to be efficiently retrieved.


#### Writing to Logs


#### Purging Sequences

The #{ToCommand("dare purge")} command makes a copy of a container with
the specified filtering rules. By default, no changes are made except to 
collect tree index fields dispersed throughout the container with an index 
at the end:

#% ConsoleExample (ShellSequence.ContainerArchiveCopy);

The copy command may be used to encrypt or decrypt the container contents during 
the copy:

#% ConsoleExample (ShellSequence.ContainerArchiveCopyDecrypt);

The copy command may also be used to reclaim space used by deleted items:

#% ConsoleExample (ShellSequence.ContainerArchiveCopyPurge);






#end zfile

#zfile CreateExamples DareReference "Reference/dare.md" Examples
#% var CommandSet = CommandLineInterpreter.DescribeCommandSet_Dare;
#% Describe(CommandSet);

The `dare` command set contains commands that encode, decode and verify 
DARE envelopes and sequences.


#% Describe(CommandSet, _DareArchive._DescribeCommand);

The `dare archive` command creates an archive with the specified cryptographic
enhancements.

#% ConsoleReference (ShellSequence.ContainerArchive);

#% Describe(CommandSet, _DareLog._DescribeCommand);

The `dare log` command creates a sequence with the specified cryptographic
enhancements.

#% ConsoleReference (ShellSequence.ContainerCreate);



#% Describe(CommandSet, _DareExtract._DescribeCommand);

The `dare extract` command extracts the specified container entries and writes them
to files.

#% ConsoleReference (ShellSequence.ContainerArchiveExtractAll);

#% Describe(CommandSet, _DareAppend._DescribeCommand);

The `dare append` command appends the specified file to the container.

#% ConsoleReference (ShellSequence.ContainerAppend);


#% Describe(CommandSet, _DareDelete._DescribeCommand);

The `dare delete` command marks the specified file entry as deleted in the
container but does not erase the data from the file.

#% ConsoleReference (ShellSequence.ContainerDelete);

#% Describe(CommandSet, _DareIndex._DescribeCommand);

The `dare index` command appends an index record to the end of the container.

#% ConsoleReference (ShellSequence.ContainerIndex);

#% Describe(CommandSet, _DarePurge._DescribeCommand);

The `dare purge` command copies a container applying the specified filtering 
and indexing criteria.

#% ConsoleReference (ShellSequence.ContainerArchiveCopy);



#% Describe(CommandSet, _DareEncode._DescribeCommand);

The `dare encode` command encrypts a file and writes the output to a DARE Message.

If the input file specified is a file, the tool processes that file. If the
input file is a directory, the tool processes all the files in the directory. If the
`/sub` option is specified, subdirectories are processed recursively.

By default, a digest value is calculated over the message body (i.e. the ciphertext
if it is encrypted). This may be suppressed using the `/nohash` option.

The tool attempts to determine the IANA media type of the file from the file 
extension. This may be overriden using the /cty `option`.

Encryption and Signature enhancements may be specified with the `/sign` and 
`/encrypt` options. 

* Key parameters that have the form of a UDF secret (Exxx-xxxx-...) are interpreted
as symmetric encryption keys and used to encrypt the contents directly.

* Key parameters that have the form of an Internet user account (\<user\>@\<domain\> are 
resolved according to the currently active key collection.

The active key collection may be overriden using the `/mesh` option.

Algorithms for public key operations are inferred from the keys provided. The 
`\alg` option may be used to override the inferred or default algorithms.

The `/out` option may be used to specify the output file name. Otherwise the output
file name is the input file name with the additional extension `.dare`.



#% ConsoleReference (ShellDare.DareSymmetric);


#% Describe(CommandSet, _DareDecode._DescribeCommand);

The `dare decode` command decodes the specified input file using keys found in the
currently active key collection.

The active key collection may be overriden using the `/mesh` option.

The `/out` option may be used to specify the output file name. Otherwise the output
file name is the input file name stripped of the extension `.dare` if present or
with the extension `.undare` otherwise.

#% ConsoleReference (ShellDare.DareDecodeSymmetric);

#% Describe(CommandSet, _DareVerify._DescribeCommand);

The `dare decode` command verifies the specified input file using keys found in the
currently active key collection and reports success or failure.

The active key collection may be overriden using the `/mesh` option.


#% ConsoleReference (ShellDare.DareVerifySymmetric);

#% Describe(CommandSet, _DareEARL._DescribeCommand);

The #{ToCommand("dare earl")} command is used to encode an input file and return
(or log) the corresponding identifier information in a format that enables use
as an Encrypted Authenticated Resource Locator.

If the input file specified is a file, the tool processes that file. If the
input file is a directory, the tool processes all the files in the directory. If the
`/sub` option is specified, subdirectories are processed recursively.

If the `/log` or `/new` option is specified, the filename, encryption key and other details of
each completed transaction are written to a DARE Container Log. If `/log` is specified, the 
file is always processed. If `/new` is specified, files are only
processed if there is no existing entry in the specified log.

The log file must be initialized before use (eg. using the #{ToCommand("container create")} 
command). Log entries are written with the cryptographic enhancements specified in
the container using the active key collection.

The active key collection may be overriden using the `/mesh` option.

#% ConsoleReference (ShellDare.DareEarl);

#end zfile

#end xclass

