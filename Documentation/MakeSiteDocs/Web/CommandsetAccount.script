#using System.Text
#using Goedel.Mesh
#using Goedel.Mesh.Shell
#using Goedel.Protocol
#xclass ExampleGenerator CreateExamples



#zfile CreateExamples WebAccount "Guide/account.md" Examples
#% MakeTitle ("account");

The 'account' command set groups commands relating to account creation, maintenance and 
connection to the service.

#### Contacting a Mesh Service.

The 'hello' command is used to test connection to a Mesh service. This allows connectivity
to the service to be tested before attempting other operations.

Connectivity may be tested by specifying an account or just a DNS service name:

#%  ConsoleExample (Service.Hello);


#### Creating a Mesh Account

A Mesh account is created using the 'create' command. 

The user specifies the initial account address to be used (#{AliceAccount}). Use of this address
is of course dependent on authorization by the Mesh Service Provider (#{MeshServiceProvider})
and is likely to require authentication and possibly payment. 

#{FutureFeature("Create token", "Presentation of payment proof") 
The account create command should support the presentation
of some form of one time use token to allow binding of a Web interaction providing payment
details to the request to bind the account to a service.


#%  ConsoleExample (Account.CreateAlice);

The command returns the value of Alice's Mesh Account fingerprint #{AliceFingerprint}. 
This value is used as a unique identifier that is cryptographically bound to the signature key used
to authenticate the account profile.

When creating an account, creation of an escrow recovery keyset as described later, is highly recommended.

#### Account description 

A device may be connected to multiple accounts at the same time. The 'list' command
returns a list of the accounts to which the device is connected and the 'get'
command returns information about a particular account.

#{FutureFeature("ListGet", "List/get not currently implemented.")} 


#%  ConsoleExample (Account.ListGetAccountAlice);


#### Synchronizing an account with a service

The 'account status' command returns the status of the account on the device without attempting
synchronization. 

#%  ConsoleExample (Account.StatusAlice);


The sync command is used to synchronize the account to the service. 

#{FutureFeature("AutoSync", "The tool should sync before each operation requiring it.")} Currently, the tool requires
synchronization to be requested manually before each command. This should be performed 
automatically with an option to suppress.

#%  ConsoleExample (Account.SyncAlice);

Synchronization will fail if a device has been removed from the account or not yet connected.




#### Escrow and Recovery

The Mesh uses strong cryptography to protect the confidentiality and integrity of data. If
the private keys used to secure a Mesh account are lost, all data stored under the account 
is lost and cannot be recovered.

Creation of at least one key escrow set is highly recommended.



To create a set of recovery shares, the escrow command is used specifying the number of 
shares to create and the number of shares required for recovery:

#%  ConsoleExample (Account.ProfileEscrow);

The recovery command is used to recover access to the account from another device if the
original administration device is lost or compromized.

#%  ConsoleExample (Account.ProfileRecover);


After verifying that the account can be recovered on another device, the primary secret 
may be purged from the administration device using the 'purge' command. This command is
of course irrevocable.

#%  ConsoleExample (Account.ProfilePurge);


#### Account import/export

#{FutureFeature("Import/Export")} These features are not currently implemented.

The export command causes the entire account profile to be written to an archive.
This may be used to create a backup copy of the account for archiving purposes
or to facilitate provisioning the account to a new machine.


#%  ConsoleExample (Account.Export);

The import command causes the account profile to be read back from the archive.

#%  ConsoleExample (Account.Import);

#### Device connection commands

The 'pin' command is used to create a PIN code to provide an out-of-band pre-authentication 
code for use in device connection. This command is only available to an administration device.

The authorizations to be granted to the device may be specified during PIN creation. This
allows the device connection process to be completed without additional user interaction. But
the connection can still only complete when an administration device creates the necessary 
credentials.

#%  ConsoleExample (Connect.ConnectPINCreate);

The 'connect' command is used to connect a device to the account by means of a 
connection URI. This is usually used to connect devices by means of a QR code 
printed on the device itself.

#%  ConsoleExample (Connect.ConnectStaticClaim);

The connecting device will only receive notice of the connection request if it
has some form of network connectivity allowing it to discover that the connection
request is pending.


#end zfile

#zfile CreateExamples AccountReference "Reference/profile.md" Examples
#% var CommandSet = CommandLineInterpreter.DescribeCommandSet_Account;


#% Describe(CommandSet);

The 'account' command set groups commands relating to account creation, maintenance and 
connection to the service.

The '/local', '/verbose', '/report' and '/json' options are supported by every command
in the set.

The '/account' option may be used to specify the Mesh account on which the device is 
to be performed. If unspecified, the default account is used.

#! ------------------ account connect
#% Describe(CommandSet, _AccountConnect._DescribeCommand);

The `account connect` command is used to initiate the process of device connection by means
of an account connection URI such as a URI encoded in a QR code on the device housing.

The request must specify the connection URI as the first (and only) parameter.

The '/account' option may be used to specify the Mesh account to which the device is 
connected. If unspecified, the default account is used.

The '/local' option may be used to specify a local name for the device.

The '/auth' option may be used to specify authorizations to be granted to the device by
name. Alternatively the flags '/admin', '/root', '/message', '/web', '/threshold', etc. 
may be used to specify the most commonly used authorizations.

#%  ConsoleReference (Connect.ConnectStaticClaim);

#! ------------------ account create
#% Describe(CommandSet, _AccountCreate._DescribeCommand);

The `account create` command is used to create accounts.

The command takes a single parameter, the make of the account to be created. This is always
specified in RFC822 style even if it is intended to bind the account to a callsign.

The '/localname' parameter may be used to specify a local (friendly) name for the account.

If the device has an existing device profile provisioned, this will be reused unless
the '/new' option is used to force creation of a new profile. The '/did' and 'dd'
options may be used to specify a name and description for the device. If not specified,
a default name will be used.

#%  ConsoleReference (Account.CreateAlice);


#! ------------------ account delete
#% Describe(CommandSet, _AccountDelete._DescribeCommand);

The `account delete` command is used to delete an account from the service and local machine
once completed, the command cannot be undone unless the service provides a recovery capability.

The principle use for the current implementation is to test use of the escrow and recovery
functions and it is not particularly recommended for any other purpose. To avoid accidental
use, the UDF of the device profile must be specified.

#%  ConsoleReference (Account.DeleteAlice);


#! ------------------ account escrow
#% Describe(CommandSet, _AccountEscrow._DescribeCommand);

The `account escrow` command is used to create a set of key recovery shares for the account
primary secret from which the escrow and signature keys are derrived.

The options 'shares' and 'quorum' are used to specify the number of shares to be created
(e.g. 5) and the threshold number of shares required to perform recovery (e.g. 3).

#%  ConsoleReference (Account.ProfileEscrow);


#! ------------------ account export
#% Describe(CommandSet, _AccountExport._DescribeCommand);

The `account export` command is used to export all data except for private keys associated with 
the account to a DARE archive.

#%  ConsoleReference (Account.Import);

#! ------------------ account get
#% Describe(CommandSet, _AccountGet._DescribeCommand);

The `account get` command returns a description of the account. This includes the 
account UDF fingerprint, the current service binding and the date of the most recent 
synchronization operation.

#%  ConsoleReference (Account.GetAccountAlice);


#! ------------------ account hello
#% Describe(CommandSet, _AccountHello._DescribeCommand);

The `account hello` command attempts to contact a Mesh service and reports the
service configuration if successful.

#%  ConsoleReference (Service.Hello);

#! ------------------ account import
#% Describe(CommandSet, _AccountImport._DescribeCommand);

The `account import` command imports Mesh account data from a DARE archive such as 
an archive created by the 'account export' command.

#%  ConsoleReference (Account.Import);


#! ------------------ account list
#% Describe(CommandSet, _AccountList._DescribeCommand);

The `account list` command lists all the Mesh accounts the current device is connected 
to.

#%  ConsoleReference (Account.ListAlice);


#! ------------------ account pin
#% Describe(CommandSet, _AccountGetPIN._DescribeCommand);

The `account pin` command generates and registers a new PIN code that may be used
to authenticate a device connection request.

The `/length` option specifies the length of the generated PIN in (significant)
characters.

The '/expire' option specifies an expiry time for the request as an integer 
followed by the letter m, h or d for minutes, hours and days respectively.

The remaining options allow the authorization(s) of the device to be specified so
that the connection can be completed without additional user interaction.


#%  ConsoleReference (Connect.ConnectPINCreate);


#! ------------------ account purge
#% Describe(CommandSet, _AccountPurge._DescribeCommand);

The `account purge` command eliminates deleted objects and messages from the catalogs
and spools stored on the current device. The Purge command does not cause data to be
deleted from the service.

#%  ConsoleReference (Account.ProfilePurge);


#! ------------------ account recover
#% Describe(CommandSet, _AccountRecover._DescribeCommand);

The `account recover` command reassembles the account primary secret from a set of
recovery shares.

#%  ConsoleReference (Account.ProfileRecover);


#! ------------------ account status
#% Describe(CommandSet, _AccountStatus._DescribeCommand);

The `account status` command returns the current status of the account catalogs and spools 
without attempting to synchronize with the service.

#%  ConsoleReference (Account.StatusAlice);



#! ------------------ account sync
#% Describe(CommandSet, _AccountSync._DescribeCommand);

The `account sync` command attempts to synchronize the account catalogs and spools with
the service and reports on the status of each.

If the '/auto' flag is set, pre-authorized device connection and contact exchange requests
in inbound messages will be performed automatically without further user interaction.

#%  ConsoleReference (Account.SyncAlice);





#end zfile

#end xclass

