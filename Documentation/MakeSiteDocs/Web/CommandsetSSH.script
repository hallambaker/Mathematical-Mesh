#using System.Text
#using Goedel.Mesh
#using Goedel.Mesh.Shell
#using Goedel.Protocol
#% #pragma warning disable IDE0022
#% #pragma warning disable IDE0060
#% #pragma warning disable IDE1006
#xclass ExampleGenerator CreateExamples



#zfile CreateExamples WebSSH "Guide/ssh.md" Examples
#% MakeTitle ("SSH");

The SSH command set contains commands that 

SSH is one of the most successful applications that provides strong cryptographic
protections today. It is certainly the first and so far only cryptographic application
to become so ubiquitous as to replace its insecure predecessor (telnet). 

Despite this success, SSH can be tricky to deploy and not through any fault of the 
design of the application. Configuring SSH access to a machine that you are accessing
via SSH is an inherently tricky task: Any error in the configuration may render the 
machine unavailable.

Another major weakness in the use of SSH is that following best practices for key
management such as using a different authentication key on each client device is
tedious at best. Most worrying of all is the fact that much of the advice given on
'how to configure SSH' is written from the perspective of <i>how to get SSH to work<i>
rather than <i>how to make an SSH configuration secure<i>.

Most people who use SSH reguilarly have developed a set of scripts to perform routine
administrative tasks. But while writing a script is a trivial task, debugging and 
checking for security vulnerabilities is certainly not.

Transferring configuration and administration tasks to the Mesh provides an approach
that is considerably more robust than a shell script is likely to provide and is 
far more likely to attract the third party review necessary to build confidence in
its security.

Since SSH authentication is bidirectional, an SSH profile is used to manage two separate
sets of public keys.

* Client Authentication keys

* Host Authentication keys

Client Authentication public keypairs are used to authenticate a client to a host. 
These are the keys whose private components are stored in user local storage and 
whose public components appear in generate the <tt>authorized_keys</tt> file.

Host Authentication keypairs are used to authenticate a host to a client. These are 
keys whose private components are stored in a system wide storage and whose public 
components appear in the <tt>known_hosts</tt> file.



#### Creating an SSH profile

The #{ToCommand("ssh create")} command adds an SSH profile named `ssh` to a Mesh account:

#%  ConsoleExample (Apps.SSHCreate);

Since the command creates a new application catalog entry, the command must be given to 
an administration device.

#### Client Configuration

Adding an SSH profile causes a public keypair to be created for use with SSH. To make use 
of this keypair for device authentication with legacy applications typically requires the
public and/or private keys to be extracted in a format supported by the application.

The #{ToCommand("ssh public")} command extracts the public key required top configure
an SSH client:

#%  ConsoleExample (Apps.SSHPublic);

The #{ToCommand("ssh private")} command extracts the private key required top configure
an SSH client:

#%  ConsoleExample (Apps.SSHPrivate);

If a script is being used to automate this process, the best practice is for the
script to first generate a random nonce and request that the private key file
be extracted encrypted under the nonce which can be discarded after the key is
successfully installed. [Not currently supported.]

The #{ToCommand("ssh list")} command with the '/client' option lists the authorized 
clients keys in the profile. This may be used to generate the `authorized_keys` file 
by specifying the SSH file format used by the particular SSH application in use.

Individual client entries may be added using the #{ToCommand("ssh client")} command
which imports a client entry from a file in the specified format.

[Not yet implemented, assume file format from extension/well known names.]

#%  ConsoleExample (Apps.SSHImport);

This command may be used to add SSH client public keys to the profile without adding
the private key. This provides a means of adding a legacy key that is not under Mesh control
to a Mesh profile. Attempts to access the public key work as normal:

#%  ConsoleExample (Apps.SSHGet);

Attempts to access the private key fail:

#%  ConsoleExample (Apps.SSHGetPrivate);


Client configurations may be deleted using the #{ToCommand("ssh delete")} command

#%  ConsoleExample (Apps.SSHDeleteList);


#### Host Configuration

Host configuration is not currently supported but is an obvious feature to add once
support is introduced for SSH certificates.


#### Managing Host Credentials

The #{ToCommand("ssh host")} command is used to add known hosts to the Mesh credential 
catalog.

#%  ConsoleExample (Apps.SSHAddHost);


The #{ToCommand("ssh list")}  command with the '/host' option lists the known host keys 
in the profile. This information is stored in the credential catalog and may also be 
retrieved through the password commands.

#%  ConsoleExample (Apps.SSHListHosts);

The #{ToCommand("ssh known")}  command returns the SSH parameters for a particular known host:

#%  ConsoleExample (Apps.SSHKnown);


#end zfile

#zfile CreateExamples SSHReference "Reference/ssh.md" Examples
#% var CommandSet = CommandLineInterpreter.DescribeCommandSet_SSH;


#% Describe(CommandSet);


#! ------------------ ssh client
#% Describe(CommandSet, _SSHClient._DescribeCommand);

The ssh client command adds a client entry to the application catalog from a file.

#%  ConsoleReference (Apps.SSHImport);



#! ------------------ ssh create
#% Describe(CommandSet, _SSHCreate._DescribeCommand);

The ssh create command creates a new SSH client entry.

#%  ConsoleReference (Apps.SSHCreate);


#! ------------------ ssh delete
#% Describe(CommandSet, _SSHDelete._DescribeCommand);

The ssh delete command deletes a client or host.

#%  ConsoleReference (Apps.SSHDelete);


#! ------------------ ssh get
#% Describe(CommandSet, _SSHGet._DescribeCommand);


The ssh get command describes a client or host entry.

#%  ConsoleReference (Apps.SSHGet);


#! ------------------ ssh host
#% Describe(CommandSet, _SSHHost._DescribeCommand);


The ssh host command adds a host entry to the credential catalog from a file.

#%  ConsoleReference (Apps.SSHAddHost);


#! ------------------ ssh known
#% Describe(CommandSet, _SSHKnown._DescribeCommand);


The SSH known command returns the SSH authentication data for the specified host

#%  ConsoleReference (Apps.SSHKnown);


#! ------------------ ssh list
#% Describe(CommandSet, _SSHList._DescribeCommand);

The SSH get command lists the client and/or host entries.

If the /client option is specified, only client entries are shown. If the /host option is
specified, only host entries are shown. In all other cases, both types of entry are shown.

#%  ConsoleReference (Apps.SSHList);


#end zfile

#end xclass

