#using System.Text
#using Goedel.Mesh
#using Goedel.Mesh.Shell
#using Goedel.Protocol
#% #pragma warning disable IDE0022
#% #pragma warning disable IDE0060
#% #pragma warning disable IDE1006
#xclass ExampleGenerator CreateExamples



#zfile CreateExamples WebSSH "Guide/ssh.md" Examples
#% MakeTitle ("SSH");

The SSH command set contains commands that 

SSH is one of the most successful applications that provides strong cryptographic
protections today. It is certainly the first and so far only cryptographic application
to become so ubiquitous as to replace its insecure predecessor (telnet). 

Despite this success, SSH can be tricky to deploy and not through any fault of the 
design of the application. Configuring SSH access to a machine that you are accessing
via SSH is an inherently tricky task: Any error in the configuration may render the 
machine unavailable.

Another major weakness in the use of SSH is that following best practices for key
management such as using a different authentication key on each client device is
tedious at best. Most worrying of all is the fact that much of the advice given on
'how to configure SSH' is written from the perspective of <i>how to get SSH to work<i>
rather than <i>how to make an SSH configuration secure<i>.

Most people who use SSH reguilarly have developed a set of scripts to perform routine
administrative tasks. But while writing a script is a trivial task, debugging and 
checking for security vulnerabilities is certainly not.

Transferring configuration and administration tasks to the Mesh provides an approach
that is considerably more robust than a shell script is likely to provide and is 
far more likely to attract the third party review necessary to build confidence in
its security.

Since SSH authentication is bidirectional, an SSH profile is used to manage two separate
sets of public keys.

* Client Authentication keys

* Host Authentication keys

Client Authentication public keypairs are used to authenticate a client to a host. 
These are the keys whose private components are stored in user local storage and 
whose public components appear in generate the <tt>authorized_keys</tt> file.

Host Authentication keypairs are used to authenticate a host to a client. These are 
keys whose private components are stored in a system wide storage and whose public 
components appear in the <tt>known_hosts</tt> file.



#### Creating an SSH profile

The #{ToCommand("ssh create")} command adds an SSH profile named `ssh` to a Mesh account:

#%  ConsoleExample (Apps.SSHCreate);

Since the command creates a new application catalog entry, the command must be given to 
an administration device.

#### Client Configuration

Adding an SSH profile causes a public keypair to be created for use with SSH. To make use 
of this keypair for device authentication with legacy applications typically requires the
public and/or private keys to be extracted in a format supported by the application.

The #{ToCommand("ssh private")} command extracts the private key required top configure
an SSH client:

#%  ConsoleExample (Apps.SSHPrivate);

The #{ToCommand("ssh public")} command extracts the public key required top configure
an SSH client:

#%  ConsoleExample (Apps.SSHPublic);

If a script is being used to automate this process, the best practice is for the
script to first generate a random nonce and request that the private key file
be extracted encrypted under the nonce which can be discarded after the key is
successfully installed. [Not currently supported.]


#### Host Configuration

Host configuration is not currently supported but is an obvious feature to add once
support is introduced for SSH certificates.

#### Configuring authentication entries on hosts and clients

The #{ToCommand("ssh merge client")}  command is run on a host to update mesh key entries 
in the `authorized_keys` file using information from the specified mesh portal.

For example, if the `authorized_keys` file has an entry for Alice's Mesh profile
(`alice@example.com.mm--ssss`), the corresponding profile is fetched and the 
corresponding SSH device public keys added:

#%  ConsoleExample (Apps.SSHMergeClients);

The #{ToCommand("ssh merge host")}  command reads the `known_hosts` file on a client machine and adds
the listed hosts to the user's ssh catalog.

#%  ConsoleExample (Apps.SSHMergeHosts);

#### Client Key management

SSH keys belonging to the user that are not part of the Mesh profile may be added using the 
#{ToCommand("ssh add client")} and #{ToCommand("ssh import client")}  commands.

The #{ToCommand("ssh add client")} adds key parameters specified on the command line.

#%  ConsoleExample (Apps.SSHAddClient);

The #{ToCommand("ssh import client")} adds key parameters specified in a separate file. A 
variety of SSH key formats is supported by means of options:


#%  ConsoleExample (Apps.SSHImport);

SSH client keys mayt be fetched using the #{ToCommand("ssh get")} command:

#%  ConsoleExample (Apps.SSHGet);



The list of authorized clients may be returned in various formats using the #{ToCommand("ssh list")}  command
with the /client option.

#%  ConsoleExample (Apps.SSHList);


A client key may be deleted using the  #{ToCommand("ssh delete")}  command:

#%  ConsoleExample (Apps.SSHDelete);

Finally, the #{ToCommand("ssh merge client")} command performs a two way merge of keys from
a authorized clients file and the ssh catalog entries:

#%  ConsoleExample (Apps.SSHMergeClients);




#### Host Key Management

The #{ToCommand("ssh add host")}  command adds specific host entries to the user's SSH profile.

#%  ConsoleExample (Apps.SSHAddHost);

The list of known hosts may be returned in various formats using the #{ToCommand("ssh list")}  command
with the /host option.

#%  ConsoleExample (Apps.SSHListHosts);


Finally, the #{ToCommand("ssh merge host")} command performs a two way merge of keys from
a known hosts file and the ssh catalog entries:

#%  ConsoleExample (Apps.SSHMergeHosts);


#### Additional Devices

Whenever an SSH profile is created, a separate keypair is created for every device
connected to the profile. This mitigates the consequences of a device being lost
or stolen. The device key for the compromised device can be removed from the 
profile without affecting any other device. Investigation of possibly unauthorized logins
can be focused on those from the compromised device alone.

The #{ToCommand("device auth /ssh")}  command is used *from an administration device* to 
enable use of ssh on the machine:

#%  ConsoleExample (Connect.ConnectSSHAuth );

Once the device has been authorized, the client machine can start using SSH immediately:

#%  ConsoleExample (Apps.SSHAuthProof);

#end zfile

#zfile CreateExamples SSHReference "Reference/ssh.md" Examples
#% var CommandSet = CommandLineInterpreter.DescribeCommandSet_SSH;


#% Describe(CommandSet);



#! ------------------ ssh add client
#% Describe(CommandSet, _SSHAddClient._DescribeCommand);

The add client command adds a client entry to the catalog from a file.

#%  ConsoleReference (Apps.SSHAddClient);

#! ------------------ ssh add host
#% Describe(CommandSet, _SSHAddHost._DescribeCommand);

The add client command adds a client entry to the catalog from a file.

#%  ConsoleReference (Apps.SSHAddHost);

#! ------------------ ssh create
#% Describe(CommandSet, _SSHCreate._DescribeCommand);

The SSH create command creates an SSH application store.

#%  ConsoleReference (Apps.SSHCreate);


#! ------------------ ssh delete
#% Describe(CommandSet, _SSHDelete._DescribeCommand);

The SSH delete command deletes a client or host.

#%  ConsoleReference (Apps.SSHDelete);

#! ------------------ ssh import
#% Describe(CommandSet, _SSHImport._DescribeCommand);


The SSH import command imports data from a file.

#%  ConsoleReference (Apps.SSHImport);

#! ------------------ ssh get
#% Describe(CommandSet, _SSHGet._DescribeCommand);


The SSH get command describes a client or host entry.

#%  ConsoleReference (Apps.SSHGet);


#! ------------------ ssh list
#% Describe(CommandSet, _SSHList._DescribeCommand);

The SSH get command lists the client and/or host entries.

If the /client option is specified, only client entries are shown. If the /host option is
specified, only host entries are shown. In all other cases, both types of entry are shown.


#%  ConsoleReference (Apps.SSHList);



#! ------------------ ssh merge client
#% Describe(CommandSet, _SSHMergeClients._DescribeCommand);

The merge client command performs a two-way merge of data in the specified authorized 
clients file with the SSH catalog.

#%  ConsoleReference (Apps.SSHMergeClients);


#! ------------------ ssh merge host
#% Describe(CommandSet, _SSHMergeHosts._DescribeCommand);

The merge client command performs a two-way merge of data in the specified known 
hosts file with the SSH catalog.

#%  ConsoleReference (Apps.SSHMergeHosts);


#! ------------------ ssh private
#% Describe(CommandSet, _SSHPrivate._DescribeCommand);

The ssh private command exports the private key data of the device on which it is 
executed in a range of formats.

#%  ConsoleReference (Apps.SSHPrivate);

#! ------------------ ssh public 
#% Describe(CommandSet, _SSHPublic._DescribeCommand);

The ssh private command exports the public key data of the device on which it is 
executed in a range of formats.

#%  ConsoleReference (Apps.SSHPublic);






















#end zfile

#end xclass

