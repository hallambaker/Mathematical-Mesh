#using System.Text
#using Goedel.Mesh
#using Goedel.Mesh.Shell
#using Goedel.Protocol
#% #pragma warning disable IDE0022
#% #pragma warning disable IDE0060
#% #pragma warning disable IDE1006
#xclass ExampleGenerator CreateExamples



#zfile CreateExamples WebMessage "Guide/message.md" Examples
#% MakeTitle ("message");

The `message` command set contains commands that send, receive and respond to 
Mesh transactional messages. Currently, two Mesh messaging applications are defined:

<dl>
<dt>Contact
<dd>Contact messages allow exchange of contact information. If a contact request
is accepted, the contact details are added to the recipient's contact catalog.
<dt>Confirmation
<dd>Confirmation messages allow authorized senders to ask for a specific request 
to be accepted or denied. If the recpient replies to a confirmation message, a
signed response is returned stating the user's response.</dd>
</dl>


## Contact Request

The Contacts catalog plays an important role in Mesh messaging as it is used to
determine the recipient's security policy to be applied to outbound messages and 
perform access control on inbound messages.

Having created a Mesh profile, Bob asks Alice to add him to her contacts catalog
using the #{ToCommand("message contact")} command:

#% ConsoleExample (Contact.ContactBobRequest);

Alice reviews her pending messages using the #{ToCommand("message pending")} command:

#% ConsoleExample (Contact.ContactAliceResponse);

Alice sees the request from Bob and accepts it with the #{ToCommand("message accept")} command:

#% ConsoleExample (Contact.ContactAliceAccept);

Bob's contact information has been added to Alice's address book:

#% ConsoleExample (Contact.ContactAliceList);

Bob can find out if Alice has accepted his contact request using the 
#{ToCommand("message status")} command:

#% ConsoleExample (Contact.ContactBobStatus);

Alice has accepted Bob's request and added him to her contacts list. She has also sent
Bob a contact request which for the sake of convenience, is accepted automatically.

Alice isn't required to accept contact requests. She rejects the request from Mallet 
using the #{ToCommand("message reject")} command:

#% ConsoleExample (Contact.ContactAliceReject);

For good measure, she decides to block further requests:

#% ConsoleExample (Contact.ContactAliceBlock);

The Mesh Confirmation protocol allows a message sender to ask the recipient a short
question. If the user chooses to respond, the sender receives back a non-repudiable 
answer to the question.

Currently, questions and responses are constrained to the simple binary choice 
Accept or Reject. It is possible that future versions of the protocol will permit 
more complex questions to be asked but such extension will only be considered after 
the base protocol has been extensively field tested.

Confirmation requests provide a superset of the funtionality afforded by traditional
second factor authentication systems. As with a second factor authentication system,
a confirmation response provides proof that the user approved a request but unlike
traditional systems, the proof provided is non repudiable and demonstrates that
a specific request was approved using a specific device belonging to the user.

As with the Mesh Contact application, the Confirmation application is designed for 
implementation on personal mobile devices such as watches or smartphonees making full 
use of the available graphics and other affordances.

## ConfirmationRequest

The confirmation message exchange provides a form of second factor authentication in
which the user provides explicit, non-repudiable authorization for a specific action.

Alice sends Bob an email asking him to buy some equipment costing $6,000. Since this
is a significant sum, Bob needs an authorization for the purchase. He sends Alice
a confirmation request `#{ShellMessage.BobPurchase}` using the  
#{ToCommand("message confirm")} command:

#%  ConsoleExample (ShellMessage.ConfirmRequest);

Alice reviews her pending messages using the using the #{ToCommand("message pending")} command:

#%  ConsoleExample (ShellMessage.ConfirmPending);

Alice she accepts Bob's request using the #{ToCommand("message pending")} command:

#%  ConsoleExample (ShellMessage.ConfirmAccept);

Bob receives Alice's approval using the #{ToCommand("message status")} command:

#%  ConsoleExample (ShellMessage.ConfirmGetAccept);

In a full workflow system, Bob might include the response from Alice in a message to
the accounts department asking them to place the order.

Alice can also reject requests using the #{ToCommand("message reject")} command:

#%  ConsoleExample (ShellMessage.ConfirmReject);

Bob receives a reply telling him the request was rejected:

#%  ConsoleExample (ShellMessage.ConfirmGetReject);

As with all Mesh messages, confirmation requests are subject to access control.
When Mallet attempts to make a request of Alice, it is rejected because Alice
hasn't accepted his credentials or authorized him to send confirmation requests:

#%  ConsoleExample (ShellMessage.ConfirmMallet);

Mallet cannot respond to the request sent by Bob because he can't read Alice's
messages to discover the request to reply to. Nor can he create a valid signature
on the response should this information be accidentally disclosed.

#end zfile

#zfile CreateExamples MessageReference "Reference/message.md" Examples
#% var CommandSet = CommandLineInterpreter.DescribeCommandSet_Message;


#% Describe(CommandSet);

The `message` command set contains commands that send, receive and respond to 
Mesh transactional messages.

#! ------------------ message accept
#% Describe(CommandSet, _MessageAccept._DescribeCommand);

The `message accept` command accepts a confirmation request. A request message is
created, signed under the device key and returned to the recipient's service
provider for forwarding to the requestor.

The confirmation request to be accepted is specified by its message identifier.

The required parameter is the message identifier of the request to be accepted.


#%  ConsoleReference (Contact.ContactAliceAccept);

#! ------------------ message block
#% Describe(CommandSet, _MessageBlock._DescribeCommand);

The `message block` command adds a party to the user's blocklist.

The required parameter is the identifier of the party to be blocked. This may
be a local name defined in the contacts book or an address.

#%  ConsoleReference (Contact.ContactAliceBlock);

#! ------------------ message confirm
#% Describe(CommandSet, _MessageConfirm._DescribeCommand);

The `message confirm` command initiates a confirmation interaction by sending a
confirmation request to the named party.

The first parameter is required and specifies the intended recipient.

The second parameter specifies the request text and is currently required but
may become optional if alternative means of specifying the request text are 
supported.


#%  ConsoleReference (ShellMessage.ConfirmRequest);

#! ------------------ message contact
#% Describe(CommandSet, _MessageContact._DescribeCommand);

The `message contact` command  initiates a contact interaction by sending a
confirmation request to the named party.

The first parameter is required and specifies the intended recipient.

#%  ConsoleReference (Contact.ContactBobRequest);

#! ------------------ message pending
#% Describe(CommandSet, _MessagePending._DescribeCommand);

The `message pending` command returns all pending messages in the spool. It
is used in the same way as the `device pending` command except that it causes
all pending messages matching the specified criteria to be returned, not just
the pending messages.

The 'read' and 'unread' flags may be used to filter responses to return messages
that have been read or are unread. By default, only unread messages are returned.


#%  ConsoleReference (Contact.ContactAlicePending);

#! ------------------ message reject
#% Describe(CommandSet, _MessageReject._DescribeCommand);

The `message reject` command rejects a confirmation request. A request message is
created, signed under the device key and returned to the recipient's service
provider for forwarding to the requestor.

The confirmation request to be rejected is specified by its message identifier.

The required parameter is the message identifier of the request to be rejected.


#%  ConsoleReference (Contact.ContactAliceReject);

#! ------------------ message status
#% Describe(CommandSet, _MessageStatus._DescribeCommand);

The `message status` command returns the status of a previously sent confirmation
request.

The confirmation request to be queried is specified by its message identifier.


#%  ConsoleReference (Contact.ContactBobStatus);





#end zfile

#end xclass

