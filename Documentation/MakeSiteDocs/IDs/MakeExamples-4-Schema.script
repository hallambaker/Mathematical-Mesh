#using System.Text
#using Goedel.Mesh
#using Goedel.Protocol
#using Goedel.Utilities
#using Goedel.Cryptography
#using Goedel.Cryptography.Dare
#using Goedel.Mesh.Shell
#% #pragma warning disable IDE0022
#% #pragma warning disable IDE0060
#% #pragma warning disable IDE1006
#xclass ExampleGenerator CreateExamples

#method MakeSchemaExamples CreateExamples Example
#% SchemaAliceProfile(Example);
#% SchemaAliceDeviceCoffee(Example);
#% SchemaAliceActivationCoffee(Example);
#% SchemaConnectionCoffee(Example);
#% SchemaAliceActivationWatch(Example);
#% SchemaProfileService(Example);
#% SchemaConnectionHost(Example);
#% SchemaEntrySSH(Example);
#% SchemaEntryMail(Example);
#% SchemaEntryContact(Example);
#% SchemaEntryCredential(Example);
#% SchemaEntryBookmark(Example);
#% SchemaEntryNetwork(Example);
#% SchemaEntryTask(Example);
#% SchemaDeriveTables(Example);
#% SchemaMessageIds(Example);
#% SchemaPINFunction(Example);
#% SchemaPINWitness(Example);
#% SchemaClientAuthKeyAgreement(Example);
#% SchemaDevice(Example);
#% DevicePreconfiguration(Example);
#% SchemaAccount(Example);
#% SchemaService(Example);
#% SchemaMessagePIN(Example);
#% SchemaMessageCompletion(Example);
#% SchemaMessageConnection(Example);
#% SchemaMessageContact(Example);
#% SchemaMessageConfirmation(Example);
#% SchemaCode1(Example);
#% SchemaCode2(Example);
#% SchemaCode3(Example);
#end method


#method DescribeMessage Goedel.Mesh.Message message
#% if (message == null) { ReportMissingExample(); return;}
#% Format(message);
#end method


#zfile CreateExamples SchemaCode1 "Examples\\SchemaCode1.md" Example
~~~~
public static string GetEnvelopeId(string messageID) =>
            UDF.ContentDigestOfUDF(messageID);
~~~~
#end zfile

#zfile CreateExamples SchemaCode2 "Examples\\SchemaCode2.md" Example
~~~~
static string MakeID(string udf, string content) {
    var (code, bds) = UDF.Parse(udf);
    return code switch
        {
            UdfTypeIdentifier.Digest_SHA_3_512 => 
                UDF.ContentDigestOfDataString(
                bds, content, cryptoAlgorithmId: 
                    CryptoAlgorithmId.SHA_3_512),
            _ => UDF.ContentDigestOfDataString(
            bds, content, cryptoAlgorithmId: 
                    CryptoAlgorithmId.SHA_2_512),
            };
~~~~
#end zfile

#zfile CreateExamples SchemaCode3 "Examples\\SchemaCode3.md" Example
~~~~
alg = UdfAlg (PIN)
pinData = UdfBDS (PIN)
saltedPINData = MAC (Action, pinData)
saltedPIN = UDFPresent (Authenticator_HMAC_SHA_2_512 + saltedPINData)
PinId = UDFPresent (MAC (Account, saltedPINData))
witnessData = Account.ToUTF8() + ClientNonce + PayloadDigest
witnessValue =  MAC (witnessData , saltedPINData)
~~~~
#end zfile


#zfile CreateExamples SchemaAliceProfile "Examples\\SchemaAliceProfile.md" Example

For example, the personal account profile Alice created is:

#%  Format (AliceProfileAccount);

#end zfile

#zfile CreateExamples SchemaAliceDeviceCoffee "Examples\\SchemaAliceDeviceCoffee.md" Example

#%  Format (Connect.AliceProfileDeviceCoffee);

#end zfile

#zfile CreateExamples SchemaAliceActivationCoffee "Examples\\SchemaAliceActivationCoffee.md" Example


#%  Format (Connect.AliceActivationDeviceCoffee);


#end zfile

#zfile CreateExamples SchemaConnectionCoffee "Examples\\SchemaConnectionCoffee.md" Example
#%  Format (Connect.AliceConnectionDeviceCoffee);
#end zfile

#zfile CreateExamples SchemaAliceActivationWatch "Examples\\SchemaAliceActivationWatch.md" Example
#%  Format (Connect.AliceActivationDeviceWatch);
#end zfile

#zfile CreateExamples SchemaProfileService "Examples\\SchemaProfileService.md" Example
#%  Format (Service.ProfileService);
#end zfile

#zfile CreateExamples SchemaConnectionHost "Examples\\SchemaConnectionHost.md" Example
#%  Format (Service.ConnectionHost);
#end zfile

#zfile CreateExamples SchemaEntrySSH "Examples\\SchemaEntrySSH.md" Example
#% Format(Apps.SSHCatalogEntry);
#end zfile


#zfile CreateExamples SchemaEntryMail "Examples\\SchemaEntryMail.md" Example
#% Format(Apps.MailCatalogEntry);
#end zfile

#zfile CreateExamples SchemaEntryBookmark "Examples\\SchemaEntryBookmark.md" Example
#% Format(Apps.BookmarkCatalogEntry);
#end zfile

#zfile CreateExamples SchemaEntryContact "Examples\\SchemaEntryContact.md" Example
#% Format(Apps.ContactCatalogEntry);
#end zfile

#zfile CreateExamples SchemaEntryCredential "Examples\\SchemaEntryCredential.md" Example
#% Format(Apps.CredentialCatalogEntry);
#end zfile

#zfile CreateExamples SchemaEntryNetwork "Examples\\SchemaEntryNetwork.md" Example
#% Format(Apps.NetworkCatalogEntry);
#end zfile

#zfile CreateExamples SchemaEntryTask "Examples\\SchemaEntryTask.md" Example
#% Format(Apps.TaskCatalogEntry);
#end zfile








#zfile CreateExamples SchemaDeriveTables "Examples\\SchemaDeriveTables.md" Example
#end zfile

#zfile CreateExamples SchemaMessageIds "Examples\\SchemaMessageIds.md" Example
[To be specified]
#end zfile

#zfile CreateExamples SchemaPINFunction "Examples\\SchemaPINFunction.md" Example
[To be specified]
#end zfile

#zfile CreateExamples SchemaPINWitness "Examples\\SchemaPINWitness.md" Example
[To be specified]
#end zfile

#zfile CreateExamples SchemaClientAuthKeyAgreement "Examples\\SchemaClientAuthKeyAgreement.md" Example
[To be specified]
#end zfile





#zfile CreateExamples SchemaMaster "Examples\\SchemaMaster.md" Example
#% Format(AliceProfileAccount);
#end zfile

#zfile CreateExamples SchemaDevice "Examples\\SchemaDevice.md" Example
#% Format(Connect.AliceProfileDeviceCoffee);
#end zfile

#zfile CreateExamples DevicePreconfiguration "Examples\\DevicePreconfiguration.md" Example
#% Format(Connect.ConnectStaticPreconfig);
#end zfile

#zfile CreateExamples SchemaAccount "Examples\\SchemaAccount.md" Example
#% var resultCreateAccount = ProfileCreateAlice?[0].Result as ResultCreateAccount;
#% var profileUser = resultCreateAccount?.ProfileAccount;
#% var activationUser = resultCreateAccount?.ActivationDevice;
#% var catalogedDevice = AliceProfiles?.CatalogedDevice;
#% var connectionUser = catalogedDevice?.ConnectionUser;


The account profile specifies the online and offline signature keys used to maintain the
profile and the encryption key to be used by the account.

#% Format(profileUser);

Each device connected to the account requires an activation record. This specifies the 
key contribtions added to the manufacturer device profile keys:

#% Format(activationUser);

The resulting key set is specified in the device connection:

#% Format(connectionUser);

All the above plus the ProfileDevice are combined to form the CatalogedDevice entry:

#% Format(catalogedDevice);


#end zfile




#zfile CreateExamples SchemaService "Examples\\SchemaService.md" Example
#% var response = ResultHello?.Response;
#% var profileService = response?.EnvelopedProfileService.Decode();
#% var profileHost = response?.EnvelopedProfileHost.Decode();

The service profile

#% Format(profileService);

The host also has a profile

#% Format(profileHost);

And there should be a connection of the host to the service but this isn't implemented yet:

#% Format(null);


#end zfile


#zfile CreateExamples SchemaMessagePIN "Examples\\SchemaMessagePIN.md" Example

For example, when Alice reads the connection request from the device in the architecture 
examples, a completion message is added to Alice's inbound spool so that the device is not 
activated a second time by mistake:

#% DescribeMessage (Connect.ConnectPINMessagePin);

The details of the presentation and verification of the PIN code
are further described in the section below.

#end zfile

#zfile CreateExamples SchemaMessageCompletion "Examples\\SchemaMessageCompletion.md" Example

Having processed a message, a completion message is added to the spool so that other devices 
can see that it has been read.

For example, when Alice's administration device uses the PIN registered above to 
authenticate a device connection request, a completion message is added to Alice's 
inbound spool so that the PIN cannot be reused to authenticate a second device:

#% DescribeMessage (Connect.ConnectPINCompleteMessage);



#end zfile

#zfile CreateExamples SchemaMessageConnection "Examples\\SchemaMessageConnection.md" Example

Alice connects a watch to her account. Since the watch has a camera (to allow for 
video calls) she can use the dynamic QR code connection mechanism.

The watch reads the QR code generated on Alice's watch. This contains
the device connection URI.

~~~~
QR = {Connect.ConnectQRURI}
~~~~

The URI tells the device the Mesh account to connect to and the PIN Code to be
used to authenticate the request. The device requesting the connection adds its
Profile device to create a RequestConnection message that will be presented to
the service as a Connect transaction request.

#% DescribeMessage (Connect.ConnectRequestPIN);

The service generates an AcknowledgeConnection message which is returned to the
device requesting the connection (via the Connect transaction response) and
adds it to the inbound spool of the account for Alice's approval (or not).

#% DescribeMessage (Connect.AcknowledgeConnectionPIN);

Alice's administration device synchronizes to the service and receives the
connection request acknowledgement from the service. Since the request is 
authenticated by a PIN code that has been marked for automatic execution, the
service can generate the assertions the device to participate in the account
and appends the corresponding RespondConnection message to the local delivery 
spool.

#% DescribeMessage (Connect.RespondConnectionPIN);


#end zfile

#zfile CreateExamples SchemaMessageContact "Examples\\SchemaMessageContact.md" Example

Bob asks Alice to send her contact details and sends his.

#% DescribeMessage (Contact.BobRequest);




#end zfile

#zfile CreateExamples SchemaMessageConfirmation "Examples\\SchemaMessageConfirmation.md" Example

The console generates a confirmation request message:

#% DescribeMessage (Confirm.RequestConfirmation);

Alice accepts the request and returns a ResponseConfirmation confirmation
containing both the request and the response:

#% DescribeMessage (Confirm.ResponseConfirmation);

#end zfile



#end xclass