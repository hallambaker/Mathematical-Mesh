#using System.Text
#using Goedel.Mesh
#using Goedel.Protocol
#using Goedel.Utilities
#using Goedel.Cryptography
#using Goedel.Cryptography.Dare
#% #pragma warning disable IDE0022
#% #pragma warning disable IDE0060
#% #pragma warning disable IDE1006
#xclass ExampleGenerator CreateExamples

#method MakeDareExamples CreateExamples Example
#% MeshExamplesMessageMail(Example);
#% MeshExamplesMessageEDS(Example);
#% MeshExamplesMessageEncrypted(Example);
#% DareSchemaCatalog(Example);
#% DareSchemaSpool(Example);
#% ExamplesDAREMessage(Example);
#% MeshExamplesContainer(Example);
#end method


#zfile CreateExamples DareSchemaCatalog "Examples\\DareSchemaCatalog.md" Example
#end zfile
#zfile CreateExamples DareSchemaSpool "Examples\\DareSchemaSpool.md" Example
#end zfile

#xfile CreateExamples MeshExamplesContainer "Examples\\ExamplesContainer.md" CreateExamples Example
The data payloads in all the following examples are identical, only the
authentication and/or encryption is different. 

* Frame 0 is omitted in each case

* Frame 1..n consists of 300 bytes being the byte sequence 00, 01, 02, etc. 
repeating after 256 bytes.

For conciseness, the raw data format is omitted for examples after the first, except
where the data payload has been transformed, (i.e. encrypted).


####Simple container

the following example shows a simple container with first frame and a single data frame:

~~~~
#{Example.ContainerFramingSimple}~~~~

Since there is no integrity check, there is no need for trailer entries.
The header values are:

#call DumpHeaders Example.ContainerHeadersSimple


####Payload and chain digests

The following example shows a chain container with a first frame and three 
data frames. The headers of these frames is the same as before but the
frames now have trailers specifying the PayloadDigest and ChainDigest values:

#call DumpHeaders Example.ContainerHeadersChain

####Merkle Tree

The following example shows a chain container with a first frame and six 
data frames. The trailers now contain the TreePosition and TreeDigest
values:

#call DumpHeaders Example.ContainerHeadersMerkleTree

####Signed container

The following example shows a tree container with a signature in the final record.
The signing key parameters are:



~~~~
#{JSONDebugWriter.Write (Example.SignatureAliceKey)}
~~~~

The container headers and trailers are:

#call DumpHeaders Example.ContainerHeadersSigned

####Encrypted container

The following example shows a container in which all the frame payloads are encrypted 
under the same master secret established in a key agreement specified in the first frame.

#call DumpHeaders Example.ContainerHeadersEncryptSingleSession

Here are the container bytes. Note that the content is now encrypted and has expanded by
25 bytes. These are the salt (16 bytes), the AES padding (4 bytes) and the 
JSON-B framing (5 bytes).

~~~~
#{Example.ContainerFramingEncrypted}

~~~~


The following example shows a container in which all the frame payloads are encrypted 
under separate key agreements specified in the payload frames.

#call DumpHeaders Example.ContainerHeadersEncryptIndependentSession

#end xfile


#method DumpHeaders List<ContainerFrame> Frames
#foreach (var Frame in Frames)
#% DumpHeader (Frame);
#end foreach
#end method

#method DumpHeader ContainerFrame Frame
Frame #{Frame.Header.ContainerInfo.Index}

~~~~
#{Frame.Header}

#if (Frame.Trailer != null)
#{Frame.Trailer}
#else
[Empty trailer]
#end if
~~~~

#end method

#file MeshExamplesMessageMail "Examples\\ExamplesDAREMessageMail.md" CreateExamples Example

For example, consider the following mail message:

~~~~
#{Example.MailMessageAsRFC822}~~~~

Existing encryption approaches require that header fields such as the subject line be encrypted 
with the body of the message or not encrypted at all. Neither approach is satisfactory.
In this example, the subject line gives away important information that the sender
probably assumed would be encrypted. But if the subject line is encrypted together with the
message body, a mail client must retrieve at least part of the message body to provide a 
'folder' view.

The plaintext form of the equivalent DARE Message encoding is:

~~~~
#{JSONDebugWriter.Write (Example.MailMessageAsDAREPlaintext, false)}
~~~~

This contains the same information as before but the mail message headers are 
now presented as  a list of Encoded Data Sequences.

#end file 

#file MeshExamplesMessageEDS "Examples\\ExamplesDAREMessageEDS.md" CreateExamples Example

The encoding of the 'From' header of the previous example as a plaintext EDS is as follows:

~~~~
#{Example.EDSText}
~~~~
#end file 

#file MeshExamplesMessageEncrypted "Examples\\MeshExamplesMessageEncrypted.md" CreateExamples Example

The following is an encrypted version of the message shown earlier. 
The payload and annotations have both increased in size as a result
of the block cipher padding. The header now
includes Recipients and Salt fields to enable the content to be decoded.

~~~~
#{JSONDebugWriter.Write (Example.MailMessageAsDAREEncrypted, false)}
~~~~

#end file 


#file ExamplesDAREMessage "Examples\\ExamplesDAREMessage.md" CreateExamples Example

##Test Examples

In the following examples, Alice's encryption private key parameters are:

~~~~
#{JSONDebugWriter.Write (Example.DareMessageAliceKey)}
~~~~

 Alice's signature private key parameters are:

~~~~
#{JSONDebugWriter.Write (Example.SignatureAliceKey)}
~~~~

The body of the test message is the UTF8 representation of the following string:

~~~~
"#{Example.DareMessageTest1.ToUTF8()}"
~~~~

The EDS sequences, are the UTF8 representation of the following strings:

~~~~
"#{Example.DareMessageTest2.ToUTF8()}"
"#{Example.DareMessageTest3.ToUTF8()}"
~~~~

#### Plaintext Message

A plaintext message without associated EDS sequences is an empty header
followed by the message body:

~~~~
#{JSONDebugWriter.Write (Example.DAREMessageAtomic)}
~~~~

#### Plaintext Message with EDS

If a plaintext message contains EDS sequences, these are also in plaintext:

~~~~
#{JSONDebugWriter.Write (Example.MessageAtomicDS)}
~~~~

#### Encrypted Message
#% var CryptoStackEncrypt = Example.CryptoStackEncrypt;
#% var Recipient = CryptoStackEncrypt.Recipients[0] as Goedel.Test.Core.DareRecipientDebug;
#% var MessageEnc = Example.MessageEnc;
#% var Salt = MessageEnc.Header.Salt;

The creator generates a master session key:

~~~~
#{CryptoStackEncrypt.MasterSecret.ToStringBase16FormatHex()}
~~~~

For each recipient of the message:

The creator generates an ephemeral key:

~~~~
#{JSONDebugWriter.Write (Recipient.EphemeralPrivate)}
~~~~

The key agreement value is calculated:

~~~~
#{Recipient.KeyAgreement.ToStringBase16FormatHex()}
~~~~

The key agreement value is used as the input to a HKDF key
derivation function with the info parameter 
#{DareRecipient.KDFInfo.ToUTF8()} to create the key used to wrap the master key:

~~~~
#{Recipient.EncryptionKey.ToStringBase16FormatHex()}
~~~~

The wrapped master key is:

~~~~
#{Recipient.WrappedMasterKey.ToStringBase16FormatHex()}
~~~~

This information is used to calculate the Recipient information
shown in the example below.

To encrypt a message, we first generate a unique salt value:


~~~~
#{Salt.ToStringBase16FormatHex()}
~~~~

The salt value and master key are used to generate the payload encryption
key:

~~~~
#{CryptoStackEncrypt.KeyEncrypt.ToStringBase16FormatHex()}
~~~~

Since AES is a block cipher, we also require an initializarion vector:

~~~~
#{CryptoStackEncrypt.IV.ToStringBase16FormatHex()}
~~~~

The output sequence is the encrypted bytes:

~~~~
#{Example.MessageEnc.Body.ToStringBase16FormatHex()}
~~~~

Since the message is not signed, there is no need for a trailer.
The completed message is:

~~~~
#{JSONDebugWriter.Write (Example.MessageEnc)}
~~~~

#### Signed Message

Signed messages specify the digest algorithm to be used in the header and
the signature value in the trailer. Note that the digest algorithm is not optional
since it serves as notice that a decoder should digest the payload value 
to enable signature verification.

~~~~
#{JSONDebugWriter.Write (Example.DAREMessageAtomicSign)}
~~~~

#### Signed and Encrypted Message

A signed and encrypted message is encrypted and then signed.
The signer proves knowledge of the payload plaintext by providing the
plaintext witness value.

~~~~
#{JSONDebugWriter.Write (Example.DAREMessageAtomicSignEncrypt)}
~~~~


#end file

#end xclass
