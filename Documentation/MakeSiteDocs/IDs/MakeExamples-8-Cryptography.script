#using System.Text
#using Goedel.Mesh
#using Goedel.Mesh.Protocol
#using Goedel.Mesh.Protocol.Server
#using Goedel.Protocol
#xclass ExampleGenerator CreateExamples

#method MakeCryptographyExamples CreateExamples Example
#% ExamplesAdvancedCoGeneration(Example);
#% ExamplesAdvancedRecryption(Example);
#% ExamplesAdvancedQuantum(Example);
#end method


#file ExamplesAdvancedCoGeneration "Examples\\ExamplesAdvancedCoGeneration.md" CreateExamples Example
####Example: Provisioning the Confirmation Service

For example, Alice provisions the confirmation service to her watch. The device profile
of the watch specifies an Ed25519 signature key. Note that for production use, Ed448 is
almost certainly prefered but Ed25519 has the advantage of more compact presentation.

~~~~
TBS: #{Example.AdvancedCogenDeviceProfile}
~~~~

The provisioning device could generate a signature key for the device and encrypt it
under the encryption key of the device. But this means that we cannot attribute signatures
to the watch with absolute certainty as the provisioning device has had knowledge of the 
watch signature key. Nor do we wish to use the device signature key for the confirmation
service.

Instead, the provisioning device generates a companion keypair. A random seed is generated.

~~~~
TBS: #{Example.AdvancedCogenPrivateKeySeed}
~~~~

A key derrivation function (HKDF) is used to derrive a 255 bit secret scalar.

~~~~
TBS: #{Example.AdvancedCogenPrivateKeyValue}
~~~~

The provisioning device can calculate the public key of the composite keypair
by adding the public keys of the device profile and the companion public key:

~~~~
TBS: #{Example.AdvancedCogenCompositeKey}
~~~~

The provisioning device encrypts the private key of the comanion keypair under the encryption
key of the device. 

~~~~
TBS: #{Example.AdvancedCogenPrivateKeySeedEncrypted}
~~~~

The provisioning device calculates the private key of the composite keypair by 
adding the two private key values and verifies that scalar multiplication of
the base point returns the composite public key value.

#end file

#file ExamplesAdvancedRecryption "Examples\\ExamplesAdvancedRecryption.md" CreateExamples Example
####Example: Messaging group

Alice creates a recryption group. The group encryption and signature key parameters are:

~~~~
TBS: #{Example.AdvancedRecryptionGroup}
~~~~

To verify the proper function of the group, Alice creates a test message and 
encrypts it under the group key.

~~~~
TBS: #{Example.AdvancedRecryptionMessagePlaintext}
TBS: #{Example.AdvancedRecryptionMessageEncrypted}
~~~~

Alice decides to add Bob to the group. Bob's recryption profile is:

~~~~
TBS: #{Example.AdvancedRecryptionBobProfile}
~~~~

The decryption key is specified in the same way as any other Ed25519 private key
using the hash of a private key seed value:

~~~~
TBS: #{Example.AdvancedRecryptionBobDecryptionKey}
~~~~

The the recryption key is the group secret scalar minus  (mod p)  the secret scalar of Bob's
private key:

~~~~
TBS: #{Example.AdvancedRecryptionBobRecryptionKey}
~~~~

The Recryption entry consists of Bob's address, the recryption key and the decryption
key encrypted under Bob's encryption key:


~~~~
TBS: #{Example.AdvancedRecryptionBobRecryptionEntry}
~~~~

The group administration tool creates a notification request to tell Bob that
he has been made a member of the new group and signs it using the group signature
key. The recryption entry and the notification are then sent to the recryption
service:

~~~~
TBS: #{Example.AdvancedRecryptionRecryptionAddMemberRequest}
~~~~

The notification message contains a link to the test message. When he accepts
membership of the group, Bob clicks on the link to test that his membership
has been fully provisioned. Providing an explicit test mechanism avoids the problem
that might otherwise occur in which the message spool fills up with test messages 
being posted.

Bob's Web browser requests the recryption data for the test message. The request is 
authenticated and encrypted under Bob's device keys. The plaintext of the message is:

~~~~
TBS: #{Example.AdvancedRecryptionRecryptionRecryptionRequest}
~~~~

The plaintext of the response contains the additional information Bob's Web browser
needs to complete the decryption process:

~~~~
TBS: #{Example.AdvancedRecryptionRecryptionRecryptionResponse}
~~~~

The Web browser decrypts the private key and uses it to calculate the decryption 
value:

~~~~
TBS: #{Example.AdvancedRecryptionDecryptionValue}
~~~~

The key agreement value is obtained by point addition of the recryption and decryption
values:

~~~~
TBS: #{Example.AdvancedRecryptionKeyAgreementValue}
~~~~

This value allows the test message to be decrypted.


#end file

#file ExamplesAdvancedQuantum "Examples\\ExamplesAdvancedQuantum.md" CreateExamples Example
####Example: Creating a Quantum Resistant Signature Fingerprint

Alice decides to add a QRSF to her Mesh Profile. She creates
a 256 bit master secret.

~~~~
TBS: #{Example.AdvancedQuantumMasterSecret}
~~~~

To enable recovery of the master key, Alice creates five keyshares with a quorum of three:

~~~~
TBS: #{Example.AdvancedQuantumShares}
~~~~

Alice uses the master secret to derrive her private key values:

~~~~
TBS: #{Example.AdvancedQuantumPrivate}
~~~~

These values are used to generate the public key value:

~~~~
TBS: #{Example.AdvancedQuantumPublic}
~~~~

The QRSF contains the UDF fingerprint of the public key
value plus the XMSS parameters:

~~~~
TBS: #{Example.AdvancedQuantumPublicUDF}
~~~~

Alice adds the QRSF to her profile and publishes it to a Mesh Service that is enrolled
in at least one multi-party notary scheme.


#end file

#end xclass

