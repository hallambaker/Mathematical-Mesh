#using System.Text
#using Goedel.Mesh
#using Goedel.Protocol
#using Goedel.Utilities
#using Goedel.Mesh.Test
#using Goedel.Cryptography
#using Goedel.Cryptography.Dare
#% #pragma warning disable IDE0022
#% #pragma warning disable IDE0060
#% #pragma warning disable IDE1006
#xclass ExampleGenerator CreateExamples
#% public static CreateExamples Instance (StreamWriter output) => new CreateExamples () {_Output = output};
#method MakeArchitectureExamples CreateExamples Example
#% Colophon(Example);
#% ArchitectureConnectPassword(Example);
#% ArchitectureCreateMesh(Example);
#% ArchitectureEncryptDecrypt(Example);
#% ArchitectureEscrow(Example);
#% ArchitectureRecovery(Example);
#% ArchitectureCredential(Example);
#% ArchitectureConnectDirect(Example);
#% ArchitectureConnectDisconnect(Example);
#% ArchitectureDisconnectWebDecrypts(Example);
#% ArchitectureDisconnectThresholdDecrypts(Example);
#% ArchitectureConfigSSH(Example);
#% ArchitectureConnectSSH(Example);
#% ArchitectureContactRemote(Example);
#% ArchitectureConfirm(Example);
#% ArchitectureRecrypt(Example);
#% ArchVariousUDF(Example);
#% ArchitectureConnectEARLRaw(Example);
#% ArchitectureConnectEARL(Example);
#% ArchSIN(Example);
#end method

#zfile CreateExamples Colophon "Examples\\Colophon.md" Example

The examples in this document were created on #{DateTime.Now.ToString()}. 
Out of #{TestCLI.CountTotal} examples,
#if (TestCLI.ErrorCountTotal ==0)
all passed.
#else
#{TestCLI.ErrorCountTotal} failed.
#end if

#end zfile

#zfile CreateExamples ArchitectureCreateMesh "Examples\\ArchitectureCreateMesh.md" Example
The user specifies the initial account address to be used (#{AliceAccount}). Use of this address
is of course dependent on authorization by the Mesh Service Provider (#{MeshServiceProvider})
and is likely to require authentication and possibly payment.

#%  ConsoleExample (Account.CreateAlice);

The command returns the value of Alice's Mesh Account fingerprint #{AliceFingerprint}. 
This value is used as a unique identifier that is cryptographically bound to the signature key used
to authenticate the account profile.

#end zfile

#zfile CreateExamples ArchitectureEncryptDecrypt "Examples\\ArchitectureEncryptDecrypt.md" Example

Alice encrypts the text file #{Account.EncryptSourceFile} to create an encrypted version
readable only by Alice:

#%  ConsoleExample (Account.ConsoleEncryptFile);

Alice can recover the file at any time using the decryption command:

#%  ConsoleExample (Account.ConsoleDecryptFile);

Although the encrypted file can be accessed by Alice with precisely the same ease as the plaintext
version, the contents of the encrypted file are not readable by any other user of the machine unless 
Alice explicitly grants access. The encrypted file may be stored on a shared drive, cloud file system
or removable storage without disclosing the contents.

#end zfile

#zfile CreateExamples ArchitectureEscrow "Examples\\ArchitectureEscrow.md" Example
#%  ConsoleExample (Example.Account.ProfileEscrow);
#end zfile

#zfile CreateExamples ArchitectureRecovery "Examples\\ArchitectureRecovery.md" Example
#{Unfinished ("ArchitectureRecovery")}
#%  ConsoleExample (Example.Account.ProfileRecover);
#end zfile

#zfile CreateExamples ArchitectureCredential "Examples\\ArchitectureCredential.md" Example

Alice adds the username and password she uses to access her weather service account 
to her credentials catalog:

#%  ConsoleExample (Example.Account.PasswordAdd);

As with all Mesh Catalogs, the catalog data is encrypted and cannot be accessed by any unauthorized
party including the Mesh Service Provider.

If needed, she can retrieve the credentials from the catalog by specifying the network
resource to which access is required:

#%  ConsoleExample (Example.Account.PasswordGet);

This capability provides a means of preventing one of the most common causes of enterprise password
breach in which a system administrator encodes the access credentials for a service into a 
script used to access the service. A script containing a command to extract the credentials from
a Mesh catalog will only work for a user authorized to access the credentials in the Mesh.

#end zfile

#zfile CreateExamples ArchitectureConnectDirect "Examples\\ArchitectureConnectDirect.md" Example
The connection request is initiated on the device being connected:

#%  ConsoleExample (Example.Connect.ConnectRequest);

Using her administration device, Alice gets a list of pending requests. Seeing that
there is a pending request matching the witness value presented by the device, Alice
accepts the request, granting the new device the messaging and web roles:

#%  ConsoleExample (Concat (Example.Connect.ConnectPending, Example.Connect.ConnectAccept) );

Alice can now synchronize her newly connected device to her account:

#%  ConsoleExample (Example.Connect.ConnectComplete);


#end zfile

#zfile CreateExamples ArchitectureConnectPassword "Examples\\ArchitectureConnectPassword.md" Example

For example, because Alice granted the device the Web role, she can now access her credential 
catalog and decrypt the file she encrypted on her first device from the new device:

#%  ConsoleExample (Example.Connect.PasswordList2);


#end zfile


#zfile CreateExamples ArchitectureConnectDisconnect "Examples\\ArchitectureConnectDisconnect.md" Example

Alice disconnects the new device:

#%  ConsoleExample (Example.Connect.Disconnect);



#end zfile

#zfile CreateExamples ArchitectureDisconnectWebDecrypts "Examples\\ArchitectureDisconnectWebDecrypts.md" Example

#{Unfinished ("ArchitectureDisconnectWebDecrypts")}

The device can no longer access the password catalog:

#%  ConsoleExample (Example.Connect.PasswordList2Disconnect);

#{Unfinished ("ArchitectureDisconnectWebDecrypts")}

But it can still decrypt files:


#end zfile

#zfile CreateExamples ArchitectureDisconnectThresholdDecrypts "Examples\\ArchitectureDisconnectThresholdDecrypts.md" Example

#{Unfinished ("ArchitectureDisconnectThresholdDecrypts")}

The device can no longer access the password catalog or decrypt files:

#%  ConsoleExample (null);


#end zfile

#zfile CreateExamples ArchitectureConfigSSH "Examples\\ArchitectureConfigSSH.md" Example

Alice creates an SSH profile within her Mesh on the administrative device making the 
private key information available to devices she has connected to her Mesh with the 
'web' access right.

#%  ConsoleExample (Example.Apps.SSH);

She can extract the private key to configure her SSH clients:

#%  ConsoleExample (Example.Apps.SSHPrivate);

She can also extract her public key to configure her SSH server to allow access to 
the machine:

#%  ConsoleExample (Example.Apps.SSHPublic);

Ideally however, these steps would be performed on Alice's behalf by an automated script
that detects the applications Alice has installed on her device and performs the
necessary configuration on her behalf. 

#end zfile

#zfile CreateExamples ArchitectureConnectSSH "Examples\\ArchitectureConnectSSH.md" Example

The SSH keys created on one device are available to every device connected by the 'web' access 
right:

#%  ConsoleExample (Example.Apps.SSHConnect);

#end zfile


#zfile CreateExamples ArchitectureContactRemote "Examples\\ArchitectureContactRemote.md" Example

Alice wants to exchange Mesh messages with Bob. Although Alice knows Bob's Mesh address 
(#{BobAccount}), she does not (yet) have permission to send any message to Bob
excepting a request to exchange contact information.

Bob sends Alice a contact exchange request:

#%  ConsoleExample (Example.Contact.ContactBobRequest);

Alice checks his Mesh messages and approves Bob's request:

#%  ConsoleExample (Example.Contact.ContactAliceResponse);

Bob can now collect Alice's contact:

#%  ConsoleExample (Example.Contact.ContactBobFinal);

#end zfile


#zfile CreateExamples ArchitectureConfirm "Examples\\ArchitectureConfirm.md" Example

Alice attempts to log into a secure console in the control room. The secure console recognizes 
Alice but a second factor is required. The console issues a challenge to Alice at her
registered account asking if she would like to log into the secure console:

#%  ConsoleExample (Example.Confirm.ConfirmRequest);

Alice checks her pending messages and accepts the request:

#%  ConsoleExample (Example.Confirm.ConfirmAliceResponse);

The secure console verifies the response and grants access:

#%  ConsoleExample (Example.Confirm.ConfirmVerify);

#end zfile

#zfile CreateExamples ArchitectureRecrypt "Examples\\ArchitectureRecrypt.md" Example
Alice creates the recryption group #{GroupAccount} to share confidential information with
her closest friends:

#%  ConsoleExample (Example.Group.GroupCreate);

Alice encrypts a test file but she can't decrypt it because she hasn't added herself 
to the group yet.

#%  ConsoleExample (Example.Group.GroupEncrypt);

Alice adds herself to the group, now she can decrypt:


#%  ConsoleExample (Example.Group.GroupAddAlice);

At this point, Bob can't encrypt or decrypt messages because he doesn't know the 
public key and he isn't in the group. Alice could allow Bob to encrypt but not
decrypt by sending him the group contact information. Instead she adds Bob to 
the group:

#%  ConsoleExample (Example.Group.GroupAddBob);

Adding Bob to the group gives him immediate access to any file encrypted under
the group key without making any change to the encrypted files:

#%  ConsoleExample (Example.Group.GroupDecryptBobSuccess);

Removing Bob from the group immediately withdraws his access.

#%  ConsoleExample (Example.Group.GroupDeleteBob);

Bob cannot decrypt files encrypted under the group key any more. But he 
still has access to the file #{Group.GroupDecryptBobFile} he decrypted earlier.

#%  ConsoleExample (Example.Group.GroupDecryptBobRevoked);

The threshold key service acts as a policy enforcement point and can impose 
additional accounting and authorization controls on the use of the decryption
service.

For example, the threshold key service might be configured to alert a 
supervisor and/or deny decryption requests if a group member made an unusual 
volume of requests in a short period.


#end zfile


#zfile CreateExamples ArchVariousUDF "Examples\\ArchVariousUDF.md" Example
#{Preformat}
#{Example.ResultUDFNonce.Key}
#{Example.ResultUDFSecret.Key}
#{Example.ResultUDFSecret.Shares[0]}
#{Example.ResultDigestSHA2.Digest}
#{Example.ResultDigestSHA3.Digest}
#{Example.ResultCommitSHA2.Digest}
#{Preformat}
#end zfile

#zfile CreateExamples ArchitectureConnectEARLRaw "Examples\\ArchitectureConnectEARL-raw.md" Example
#{Connect.ConnectEARL}#!
#end zfile


#zfile CreateExamples ArchitectureConnectEARL "Examples\\ArchitectureConnectEARL.md" Example
#{Preformat}
#{Connect.ConnectEARL}
#{Preformat}
#end zfile

#zfile CreateExamples ArchSIN "Examples\\ArchSIN.md" Example
#% var aliceSIN = "mm--" + Example.AliceProfileUDF.ToLower();
<dl>
<dt>alice@example.com
<dd>Alice's regular email address (not a SIN). 
<dt>alice@#{aliceSIN}.example.com
<dd>A strong email address for Alice that can be used by a regular email client.
<dt>alice@#example.com.#{aliceSIN}
<dd>A strong email address for Alice that can only used by an email client that can process SINs.
</dl>
#end zfile






#end xclass