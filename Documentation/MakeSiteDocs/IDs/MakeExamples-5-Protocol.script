#using System.Text
#using Goedel.Mesh
#using Goedel.Protocol
#using Goedel.Utilities
#using Goedel.Cryptography
#using Goedel.Cryptography.Dare
#% #pragma warning disable IDE0022
#% #pragma warning disable IDE0060
#% #pragma warning disable IDE1006
#xclass ExampleGenerator CreateExamples

#method MakeProtocolExamples CreateExamples Example
#% ProtocolHello(Example);
#% ProtocolAccountCreate(Example);
#% ProtocolCreateGroup(Example);
#% ProtocolStatus(Example);
#% ProtocolPostClientService(Example);
#% ProtocolClaim(Example);
#% ProtocolPollClaim(Example);
#% ProtocolCryptoKeyShare(Example);
#% ProtocolCryptoKeyAgree(Example);
#% ProtocolMessagePIN(Example);
#% ProtocolContactRemote(Example);
#% ProtocolContactQR(Example);
#% ProtocolContactStatic(Example);
#% ProtocolGroupInvite(Example);
#% ProtocolConfirmation(Example);
#% ProtocolConnect(Example);
#% ProtocolConnectEARL(Example);
#% ProtocolMessageCompletion(Example);
#!!!!! Missing
#% ProtocolHelloRequest(Example);
#% ProtocolHelloResponse(Example);
#% ProtocolAccountDelete(Example);
#% ProtocolPostServiceService(Example);
#% ProtocolConnectPIN(Example);
#!!!!! Obsolete ???
#% ProtocolDownload(Example);
#% ProtocolUpload(Example);
#end method

#zfile CreateExamples ProtocolHelloRequest "Examples\\ProtocolHelloRequest.md" Example
#! This is to show the binding

#%  DescribeRequestBinding (Service.Hello?[0].Traces[0]);

#end zfile

#zfile CreateExamples ProtocolHelloResponse "Examples\\ProtocolHelloResponse.md" Example
#! This is to show the binding

#%  DescribeResponseBinding (Service.Hello?[0].Traces[0]);

#end zfile


#zfile CreateExamples ProtocolHello "Examples\\ProtocolHello.md" Example

The request payload:

#%  DescribeRequest(Service?.Hello?[0].Traces[0]);

The response payload:

#%  DescribeResponse(Service?.Hello?[0].Traces[0]);


#end zfile

#zfile CreateExamples ProtocolAccountCreate "Examples\\ProtocolAccountCreate.md" Example

The request payload:

#%  DescribeRequest (Account?.CreateAlice?[0].Traces?[0]);

The response payload:

#%  DescribeResponse (Account?.CreateAlice?[0].Traces?[0]);

#end zfile

#zfile CreateExamples ProtocolCreateGroup "Examples\\ProtocolCreateGroup.md" Example

The request payload:

#%  DescribeRequest (Group?.GroupCreate?[0].Traces?[0]);

The response payload:

#%  DescribeResponse (Group?.GroupCreate?[0].Traces?[0]);

#end zfile



#zfile CreateExamples ProtocolAccountDelete "Examples\\ProtocolAccountDelete.md" Example



The request payload:

#%  DescribeRequest (Account?.DeleteAlice?[0].Traces?[0]);

The response payload:

#%  DescribeResponse (Account?.DeleteAlice?[0].Traces?[0]);

#end zfile



#zfile CreateExamples ProtocolStatus "Examples\\ProtocolStatus.md" Example


The request payload:

#%  DescribeRequest (Account?.SyncAlice?[0].Traces?[0]);

The response payload:

#%  DescribeResponse (Account?.SyncAlice?[0].Traces?[0]);

#end zfile


#zfile CreateExamples ProtocolDownload "Examples\\ProtocolDownload.md" Example
#% ReportObsoleteExample();



#end zfile


#zfile CreateExamples ProtocolUpload "Examples\\ProtocolUpload.md" Example
#% ReportObsoleteExample();


#end zfile

#zfile CreateExamples ProtocolPostClientService "Examples\\ProtocolPostClientService.md" Example



The request payload:

#%  DescribeRequest (Connect?.ConnectRequest?[0].Traces?[0]);

The response payload:

#%  DescribeResponse (Connect?.ConnectRequest?[0].Traces?[0]);

#end zfile



#zfile CreateExamples ProtocolPostServiceService "Examples\\ProtocolPostServiceService.md" Example
#% ReportMissingExample();


#end zfile


#zfile CreateExamples ProtocolCryptoKeyShare "Examples\\ProtocolCryptoKeyShare.md" Example
The request payload:

#%  DescribeRequest (Group?.GroupAddBob?[0].Traces?[1]);

The response payload:

#%  DescribeResponse (Group?.GroupAddBob?[0].Traces?[1]);
#end zfile


#zfile CreateExamples ProtocolCryptoKeyAgree "Examples\\ProtocolCryptoKeyAgree.md" Example
The request payload:

#%  DescribeRequest (Group?.GroupDecryptBobSuccess?[0].Traces?[1]);

The response payload:

#%  DescribeResponse (Group?.GroupDecryptBobSuccess?[0].Traces?[1]);
#end zfile




#zfile CreateExamples ProtocolMessagePIN "Examples\\ProtocolMessagePIN.md" Example

Alice connects a device using a QR code presented by her administrative device.

The administration device creates a PIN code and records it to the Local spool:

#%  DescribeMessage (Connect.ConnectPINMessagePin);

This pin value is used to authenticate the connection request from the device:

#%  DescribeMessage (Connect.ConnectRequestPIN);

The administration device can now use the PIN Identifier to retreive the 
MessagePIN from the Local spool and use it to verify the request.

#end zfile


#zfile CreateExamples ProtocolMessageCompletion "Examples\\ProtocolMessageCompletion.md" Example

After using the PIN code to authenticate connection of a device in the previous 
example, the corresponding MessagePin is marked as having been used by appending 
a completion message to the Local spool.

#%  DescribeMessage (Connect.ConnectPINCompleteMessage);

#end zfile



#zfile CreateExamples ProtocolContactRemote "Examples\\ProtocolContactRemote.md" Example

#%  DescribeMessage (Contact.BobRequest);

#end zfile

#zfile CreateExamples ProtocolContactQR "Examples\\ProtocolContactQR.md" Example

When they meet in person, Alice creates a pin code and presents it to Bob on her mobile.

QR code is #{Contact.AliceDynamicQRCode} yadda yaddda

The resulting contact exchange does not change the contact data itself but does change
the valudation method. It is more difficult and riskier to falsify an in-person exchange
than a remote one.


#end zfile

#zfile CreateExamples ProtocolContactStatic "Examples\\ProtocolContactStatic.md" Example

Alice creates a contact and publishes it through her service.

QR code is #{Contact.AliceStaticQRCode} yadda yaddda

#end zfile



#zfile CreateExamples ProtocolGroupInvite "Examples\\ProtocolGroupInvite.md" Example


#% Format(Group.GroupInvitation);
#end zfile


#zfile CreateExamples ProtocolClaim "Examples\\ProtocolClaim.md" Example

A device is preconfigured during manufacture and a Device Description published to the
EARL:

#{Connect.ClaimUri}

The client claiming the publication creates a claim message specifying the 
resource being claimed and the address of the Mesh account making the claim.

#% DescribeMessage(Connect.MessageClaim);

The message is signed by the claimant to make a RequestClaim to the service:

#% DescribeRequest(Connect.RequestClaim);

The publication is found and the claim is accepted, the publication  is returned
in the response.

#% DescribeResponse(Connect.ResponseClaim);

The device waiting to be connected uses the PollClaim transaction to receive notification
of a claim having been posted.

#end zfile

#zfile CreateExamples ProtocolPollClaim "Examples\\ProtocolPollClaim.md" Example

The device in the example above periodically polls the service to which the device 
description is published to find if a claim has been registered.

The PollClaimRequest contains the account to which the document is published
and the publication ID:

#% DescribeRequest(Connect.RequestPollClaim);

The response returns the latest claim made as signed message:

#% DescribeResponse(Connect.ResponsePollClaim);

#end zfile

#zfile CreateExamples ProtocolConfirmation "Examples\\ProtocolConfirmation.md" Example

The service sends out the following request:

#% DescribeMessage(Confirm.RequestConfirmation);

Alice accepts the request and returns the following response:

#% DescribeMessage(Confirm.ResponseConfirmation);



#end zfile







#zfile CreateExamples ProtocolConnectPIN "Examples\\ProtocolConnectPIN.md" Example


###### Phase 1:

#%  ConsoleExample (Connect.ConnectPINCreate);

The registration of this PIN value was shown earlier in section $$$

The URI containing the account address and PIN is:

~~~~
#{Connect.ConnectDynamicURI}
~~~~

###### Phase 2:

The onboarding device scans the QR code to obtain the account address and PIN code.
The PIN code is used to authenticate a connection request:

#%  ConsoleExample (Connect.ConnectPINRequest);

The device issues a connection request to the service corresponding to the account. 
This specifies the device profile, the account to which the device is to be 
connected and the client nonce value:

#%  DescribeRequest (Connect.ConnectPINRequestConnection);

The service generates the service nonce value and uses it to create the 
AcknowledgeConnection message.

#%  DescribeMessage (Connect.ConnectPINAcknowledgeConnection);

The AcknowledgeConnection message is appended to the Inbound spool of the account
to which connection was requested so that the user can approve the request. The
ConnectResponse message is returned to the device containing the AcknowledgeConnection 
message and the profile of the account.

#% DescribeResponse(Connect.ConnectPINResponseConnection);

The device generates the witness value and presents it to the user as shown above.

###### Phase 3:

The user synchronizes their pending messages:

#%  ConsoleExample (Connect.ConnectPINPending);

The administration device determines that the device connection request is authenticated
by a PIN code. The PIN code is retrieved and the message authenticated. This is shown in
the PIN registration interation example in section $$$ above.

#%  Format (Connect.ConnectPINActivationDevice);

The Cataloged device record is created from the public key values corresponding to the
combination of the public keys in the device profile and those defined by the activation:

#%  Format (Connect.ConnectPINCatalogedDevice);

The ActivationDevice and CatalogedDevice records are ???


###### Phase 4

The device periodically polls for completion of the connection request using the
Complete transaction.

To provide a final check on the process, the command line tool presents the UDF of 
the account profile to which the device has connected if successful:

#%  ConsoleExample (Connect.ConnectPINComplete);

The completion request specified the device requesting completion:

#%  DescribeRequest (Connect.ConnectPINRequestComplete);

The response contains the information the device requires to complete the connection
to the mesh:

#%  DescribeRequest (Connect.ConnectPINRespondComplete);


#end zfile


#zfile CreateExamples ProtocolConnect "Examples\\ProtocolConnect.md" Example

###### Phase 1:

There are no first phase actions.

###### Phase 2:

Alice enters the connection request on the device to be connected. This specifies the 
address of the account to which she wishes to connect:

#%  ConsoleExample (Connect.ConnectRequest);


###### Phase 3:

The user reviews their pending messages:

#%  ConsoleExample (Connect.ConnectPending);

The administration device receives the AcknowledgeConnection message from the service 
and verifies that the signature is valid and the witness value correctly computed.

The user verifies that the witness value presented in the AcknowledgeConnection message
matches the one presented on the device. Since they match, the request is accepted:

#%  ConsoleExample (Connect.ConnectAccept);

###### Phase 4

The device completes the connection as before:

#%  ConsoleExample (Connect.ConnectComplete);

#end zfile


#zfile CreateExamples ProtocolConnectEARL "Examples\\ProtocolConnectEARL.md" Example

###### Phase 1

The device is prepopulated with a Device description, this is shown in section $$$ of
Schema.

###### Phase 2

The administration device scans the QR code and obtains the Device Description using
the Claim transaction as shown in section $$$$.

###### Phase 3

Tha administration device creates the ActivationDevice and CatalogedDevice records
and populates the service as before.

###### Phase 4

The device polls the publication service until a claim message is returned. This 
interaction is shown in section $$$$ above.


#end zfile








#end xclass