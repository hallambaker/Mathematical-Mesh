<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Goedel.Cryptography.Windows</name>
    </assembly>
    <members>
        <member name="T:Goedel.Cryptography.Windows.DPAPI">
            <summary>
            Provide access to the Windows Data Protection API. This binds data to the user's
            public key so that th user's password is required to unlock it.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Windows.DPAPI.KeyType">
            <summary>The key type</summary>
        </member>
        <member name="F:Goedel.Cryptography.Windows.DPAPI.KeyType.UserKey">
            <summary>Key is bound to user</summary>
        </member>
        <member name="F:Goedel.Cryptography.Windows.DPAPI.KeyType.MachineKey">
            <summary>Key is bound to machine</summary>
        </member>
        <member name="M:Goedel.Cryptography.Windows.DPAPI.Encrypt(System.Byte[],Goedel.Cryptography.Windows.DPAPI.KeyType,System.String,System.Byte[])">
            <summary>
            Encrypt data using DAPI
            </summary>
            <param name="KeyType">The Key type, user or machine</param>
            <param name="PlainTextBytes">The data to be encrypted</param>
            <param name="EntropyBytes">Additional Key material used to salt the key</param>
            <param name="Description">Description of the stored data</param>
            <returns>The encrypted data.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Windows.DPAPI.Decrypt(System.Byte[],System.String@,System.Byte[])">
            <summary>
            Decrypt data stored using the Data Protection API
            </summary>
            <param name="CipherTextBytes">The encrypted data</param>
            <param name="Description">Description of the encrypted data</param>
            <param name="EntropyBytes">Additional Key material</param>
            <returns>The decrypted data.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Windows.DecryptionFailed">
            <summary>
            Encrypted data could not be decrypted. 
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Windows.DecryptionFailed.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Windows.DecryptionFailed.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Windows.DecryptionFailed.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Cryptography.Windows.DecryptionFailed._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Cryptography.Windows.DecryptionFailed.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Windows.EncryptionFailed">
            <summary>
            Data could not be encrypted. 
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Windows.EncryptionFailed.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Windows.EncryptionFailed.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Windows.EncryptionFailed.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Cryptography.Windows.EncryptionFailed._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Cryptography.Windows.EncryptionFailed.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Windows.InsufficientMemory">
            <summary>
            Memory allocation failed.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Windows.InsufficientMemory.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Windows.InsufficientMemory.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Windows.InsufficientMemory.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Cryptography.Windows.InsufficientMemory._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Cryptography.Windows.InsufficientMemory.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Windows.EventExtensions">
            <summary>
            Extensions class defining logging events and convenience methods.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Windows.EventExtensions.#cctor">
            <summary>
            Static initializer, is called once when the module loads.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Windows.Initialization">
            <summary>
            Initialization class.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Windows.Initialization.Initialized">
            <summary>Always returns true. Requesting this value forces initialization.</summary> 
        </member>
        <member name="T:Goedel.Cryptography.Windows.ComponentCryptographyWindows">
            <summary>
            Windows specifice component initialization. Provides access to platform specific
            features such as keys encrypted to the platform.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Windows.ComponentCryptographyWindows.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Goedel.Cryptography.Windows.ComponentCryptographyWindows.Terminate">
            <inheritdoc/>
        </member>
        <member name="T:Goedel.Cryptography.Windows.KeyContainer">
            <summary>Key container class. This makes use of windows specific platform
            encryption to bind keys to the user's log in password in a transparent fashion.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Windows.KeyContainer.GetKeyContainerNames">
            <summary>
            Get the set of key container names.
            </summary>
            <returns>The set of container names.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Windows.KeyContainer.EraseTest">
            <summary>Erase all test data from the system. Use with care!</summary>
        </member>
        <member name="M:Goedel.Cryptography.Windows.KeyContainer.Delete(System.String)">
            <summary>Delete the specified key</summary>
            <param name="Key">Key to delete.</param>
        </member>
        <member name="T:Goedel.Cryptography.Windows.NamespaceDoc">
            <summary>
            Platform specific support for Windows.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.KeyPairRSA1">
            <summary>
            RSA Key Pair
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairRSA1.AsymmetricAlgorithm">
            <summary>
            Return the underlying .NET cryptographic provider.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairRSA1.PKIXPrivateKey">
            <summary>The private key parameters represented in PKIX form</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairRSA1.PkixPublicKey">
            <summary>The public key parameters represented in PKIX form</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairRSA1.PkixPrivateKeyRSA">
            <summary>
            Return private key parameters in PKIX structure
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairRSA1.PkixPublicKeyRsa">
            <summary>
            Return public key parameters in PKIX structure
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairRSA1.KeyUses">
            <summary>The supported key uses (e.g. signing, encryption)</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairRSA1.PublicOnly">
            <summary>If true, the key only has access to public key values.</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairRSA1.LengthSignature">
            <summary>The length of a signature in bytes.</summary> 
        </member>
        <member name="M:Goedel.Cryptography.KeyPairRSA1.SignatureAlgorithmID(Goedel.Cryptography.CryptoAlgorithmId)">
            <summary>
            Return the CryptoAlgorithmID that would be used with the specified base parameters.
            </summary>
            <param name="Base">The base algorithm</param>
            <returns>The computed CryptoAlgorithmID</returns>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairRSA1.KeyInfoData">
            <summary>
            Return a PKIX SubjectPublicKeyInfo structure for the public key.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairRSA1.#ctor(System.Security.Cryptography.RSACryptoServiceProvider,Goedel.Cryptography.KeySecurity,Goedel.Cryptography.KeyUses)">
            <summary>
            Generate an ephemeral RSA key with the specified key size.
            </summary>
            <param name="rsa">The cryptographic provider.</param>
            <param name="keyType">The key type.</param>
            <param name="keyUses">The permitted key uses.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairRSA1.#ctor(System.Security.Cryptography.RSAParameters,Goedel.Cryptography.KeySecurity,Goedel.Cryptography.KeyUses)">
            <summary>
            Generate a KeyPair from a .NET set of parameters.
            </summary>
            <param name="RSAParameters">The RSA parameters.</param>
            <param name="keyType">The key type.</param>
            <param name="keyUses">The permitted key uses.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairRSA1.#ctor(Goedel.Cryptography.PKIX.PkixPublicKeyRsa)">
            <summary>
            Generate a KeyPair from a .NET set of parameters.
            </summary>
            <param name="PKIXParameters">The RSA parameters as a PKIX structure</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairRSA1.#ctor(Goedel.Cryptography.PKIX.PkixPrivateKeyRsa)">
            <summary>
            Generate a KeyPair from a .NET set of parameters.
            </summary>
            <param name="PKIXParameters">The RSA parameters as a PKIX structure</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairRSA1.Generate(System.Int32,Goedel.Cryptography.KeySecurity,Goedel.Cryptography.KeyUses,Goedel.Cryptography.CryptoAlgorithmId)">
            <summary>
            Generate a new RSA KeyPair with the specified parameters.
            </summary>
            <param name="keySize">The Key size</param>
            <param name="keySecurity">The key security model</param>
            <param name="keyUses">The permitted uses (signing, exchange) for the key.</param>
            <param name="algorithmID">The key algorithm (ignored).</param>
            <returns>The created key pair</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairRSA1.Persist(Goedel.Cryptography.KeyCollection)">
            <summary>
            Persist key to <paramref name="keyCollection"/>.
            </summary>
            <param name="keyCollection">Key Collection the key is to be persisted to.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairRSA1.KeyPairPublic">
            <summary>
            Returns a new KeyPair instance which only has the public values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairRSA1.Locate(System.String,Goedel.Cryptography.KeyPair@)">
            <summary>
            Locate key by fingerprint.
            </summary>
            <param name="UDF">Fingerprint of key to be located.</param>
             <param name="keyPair">The key, (if found).</param>
            <returns>The located key (if found).</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairRSA1.KeyPairPublicFactory(Goedel.Cryptography.PKIX.PkixPublicKeyRsa)">
            <summary>
            Delegate to create a key pair base
            </summary>
            <param name="pkixParameters">The parameters to construct from</param>
            <returns>The created key pair</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairRSA1.KeyPairPrivateFactory(Goedel.Cryptography.PKIX.PkixPrivateKeyRsa,Goedel.Cryptography.KeySecurity,Goedel.Cryptography.KeyCollection)">
            <summary>
            Delegate to create a key pair base
            </summary>
            <param name="PKIXParameters">The parameters to construct from</param>
            <param name="keySecurity">The key security model</param>
            <param name="keyCollection">The key collection that keys are to be persisted to (dependent on 
            the value of <paramref name="keySecurity"/></param>/// <returns>The created key pair</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairRSA1.Encrypt(System.Byte[],System.Byte[]@,Goedel.Cryptography.KeyPair@,System.Byte[])">
            <summary>
            Encrypt a bulk key.
            </summary>
            <returns>The encoder</returns>
            <param name="Key">The key to encrypt.</param>
            <param name="Ephemeral">The ephemeral key to use for the exchange (if used)</param>
            <param name="Exchange">The private key to use for the exchange.</param>
            <param name="Salt">Optional salt value for use in key derivation.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairRSA1.Decrypt(System.Byte[],Goedel.Cryptography.KeyPair,Goedel.Cryptography.CryptoAlgorithmId,Goedel.Cryptography.KeyAgreementResult,System.Byte[])">
            <summary>
            Perform a key exchange to encrypt a bulk or wrapped key under this one.
            </summary>
            <param name="EncryptedKey">The encrypted session</param>
            <param name="Ephemeral">Ephemeral key input (required for DH)</param>
            <param name="AlgorithmID">The algorithm to use.</param>
            <param name="Partial">Partial key agreement carry in (for recryption)</param>
            <param name="Salt">Optional salt value for use in key derivation. If specified
            must match the salt used to encrypt.</param>        
            <returns>The decoded data instance</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairRSA1.SignHash(System.Byte[],Goedel.Cryptography.CryptoAlgorithmId,System.Byte[])">
            <summary>
            Sign a precomputed digest
            </summary>
            <param name="Data">The data to sign.</param>
            <param name="AlgorithmID">The algorithm to use.</param>
            <param name="Context">Additional data added to the signature scope
            for protocol isolation.</param>
            <returns>The signature data</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairRSA1.VerifyHash(System.Byte[],System.Byte[],Goedel.Cryptography.CryptoAlgorithmId,System.Byte[])">
            <summary>
            Verify a signature over the purported data digest.
            </summary>
            <param name="Signature">The signature blob value.</param>
            <param name="AlgorithmID">The signature and hash algorithm to use.</param>
            <param name="Context">Additional data added to the signature scope
            for protocol isolation.</param>
            <param name="Digest">The digest value to be verified.</param>
            <returns>True if the signature is valid, otherwise false.</returns>
        </member>
    </members>
</doc>
