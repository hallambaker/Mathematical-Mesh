<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Goedel.Cryptography.KeyFile</name>
    </assembly>
    <members>
        <member name="T:Goedel.Cryptography.KeyFile.KeyFileDecode">
            <summary>
            Encoders and decoders for various key file formats
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.KeyFileDecode.DecodeAuthHost(System.String)">
            <summary>
            Decode SSH Authorized Key file format
            </summary>
            <param name="fileName">File to decode.</param>
            <returns>List of authorized keys</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.KeyFileDecode.DecodeAuthHost(Goedel.FSR.LexReader)">
            <summary>
            Decode an authorized hosts format file.
            </summary>
            <param name="lexReader">Input</param>
            <returns>List of authorized keys</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.KeyFileDecode.DecodePEM(System.String,Goedel.Cryptography.KeySecurity,Goedel.Cryptography.KeyCollection)">
            <summary>
            Decode PEM format key file.
            </summary>
            <param name="fileName">Name of the file</param>
            <returns>Public key information</returns>
            <param name="keySecurity">The key security model</param>
            <param name="keyCollection">The key collection that keys are to be persisted to (dependent on 
            the value of <paramref name="keySecurity"/></param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.KeyFileDecode.DecodePEMText(System.String,Goedel.Cryptography.KeySecurity,Goedel.Cryptography.KeyCollection)">
            <summary>
            Decode PEM format key file.
            </summary>
            <param name="text">Text input.</param>
            <returns>Public key information</returns>
            <param name="keySecurity">The key security model</param>
            <param name="keyCollection">The key collection that keys are to be persisted to (dependent on 
            the value of <paramref name="keySecurity"/></param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.KeyFileDecode.DecodePEM(Goedel.FSR.LexReader,Goedel.Cryptography.KeySecurity,Goedel.Cryptography.KeyCollection)">
            <summary>
            Decode PEM format key file.
            </summary>
            <param name="lexReader">Input file.</param>
            <returns>Public key information</returns>
            <param name="keySecurity">The key security model</param>
            <param name="keyCollection">The key collection that keys are to be persisted to (dependent on 
            the value of <paramref name="keySecurity"/></param>
        </member>
        <member name="T:Goedel.Cryptography.KeyFile.KeyFileFormat">
            <summary>
            Recognized key file formats
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.KeyFileFormat.Default">
            <summary>Default format according to context.</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.KeyFileFormat.PEMPrivate">
            <summary>PEM private key file, used for many SSH implementations</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.KeyFileFormat.PEMPublic">
            <summary>PEM public key file</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.KeyFileFormat.PuTTY">
            <summary>PuTTY private key file</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.KeyFileFormat.OpenSSH">
            <summary>OpenSSH native format</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.KeyFileFormat.X509DER">
            <summary>X509</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.KeyFileFormat.PKCS12">
            <summary>PKCS 12 / PFX</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.KeyFileFormat.PKCS7">
            <summary>PKCS 7</summary>
        </member>
        <member name="T:Goedel.Cryptography.KeyFile.Extension">
            <summary>Extension methods</summary>
            <remarks>This currently hard wires to the .NET framework providers
            rather than the portable base classes.</remarks>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.Extension.ToKeyFile(Goedel.Cryptography.KeyPair,Goedel.Cryptography.KeyFile.KeyFileFormat,System.String)">
            <summary>
            Convert key pair to specified format
            </summary>
            <param name="keyPair">Keypair to convert</param>
            <param name="keyFileFormat">Format to convert to</param>
            <param name="passphrase">Optional passphrase to be used as encryption key.</param>
            <returns>The keyfile data</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.Extension.ToOpenSSH(Goedel.Cryptography.KeyPair,System.String)">
            <summary>
            Convert key pair to OpenSSH format
            </summary>
            <param name="keyPair">Key pair to convert</param>
            <returns>The keyfile data</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.Extension.ToPEMPrivate(Goedel.Cryptography.KeyPair,System.String)">
            <summary>
            Convert key pair to PEMPrivate format
            </summary>
            <param name="keyPair">Key pair to convert</param>
            <param name="passphrase">Optional passphrase to be used as encryption key.</param>
            <returns>The keyfile data</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.Extension.ToPEMPublic(Goedel.Cryptography.KeyPair)">
            <summary>
            Convert key pair to PEMPublic format
            </summary>
            <param name="keyPair">Key pair to convert</param>
            <returns>The keyfile data</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.Extension.ToPuTTY(Goedel.Cryptography.KeyPair)">
            <summary>
            Convert key pair to PuTTY format
            </summary>
            <param name="keyPair">Key pair to convert</param>
            <returns>The keyfile data</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.Extension.ToPuTTY(Goedel.Cryptography.KeyPairBaseRSA)">
            <summary>
            Convert key pair to PEM formatted string.
            </summary>
            <param name="rsaKeyPair">A  Key pair</param>
            <returns>Key Pair in PEM format</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.Extension.Dump(System.Security.Cryptography.RSAParameters)">
            <summary>
            Debug utility
            </summary>
            <param name="RSAParameters">RSA Parameters in /NET format</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.Extension.Dump(System.Byte[],System.String)">
            <summary>
            Debug output utility
            </summary>
            <param name="Data">Data to print</param>
            <param name="Tag">Tag to prepend to data</param>
        </member>
        <member name="T:Goedel.Cryptography.KeyFile.KeyFileException">
            <summary>
            Exception occurred parsing or encoding a key file.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.KeyFileException.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.KeyFileException.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.KeyFileException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.KeyFileException._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.KeyFileException.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.KeyFile.NoProviderSpecified">
            <summary>
            The specified key did not have a valid cryptographic
            provider. This may be because the key algorithm is 
            not supported or the key parameters were found to be invalid.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.NoProviderSpecified.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.NoProviderSpecified.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.NoProviderSpecified.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.NoProviderSpecified._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static new global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.NoProviderSpecified.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.KeyFile.PrivateKeyNotAvailable">
            <summary>
            An attempt was made to perform a private key operation
            and the private key parameters could not be found.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.PrivateKeyNotAvailable.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.PrivateKeyNotAvailable.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.PrivateKeyNotAvailable.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.PrivateKeyNotAvailable._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static new global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.PrivateKeyNotAvailable.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.KeyFile.UnexpectedEnd">
            <summary>
            An attempt to read a file failed because data was
            missing or corrupted.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.UnexpectedEnd.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.UnexpectedEnd.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.UnexpectedEnd.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.UnexpectedEnd._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static new global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.UnexpectedEnd.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.KeyFile.ParseError">
            <summary>
            An unidentifier parse error occurred.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.ParseError.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.ParseError.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.ParseError.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.ParseError._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static new global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.ParseError.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.KeyFile.FileFormatNotImplemented">
            <summary>
            The key file format is not implemented
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.FileFormatNotImplemented.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.FileFormatNotImplemented.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.FileFormatNotImplemented.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.FileFormatNotImplemented._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static new global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.FileFormatNotImplemented.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.KeyFile.FileFormatAlgorithmNotImplemented">
            <summary>
            The key file format is not implemented for the algorithm
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.FileFormatAlgorithmNotImplemented.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.FileFormatAlgorithmNotImplemented.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.FileFormatAlgorithmNotImplemented.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.FileFormatAlgorithmNotImplemented._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static new global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.FileFormatAlgorithmNotImplemented.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.KeyFile.EventExtensions">
            <summary>
            Extensions class defining logging events and convenience methods.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.EventExtensions.#cctor">
            <summary>
            Static initializer, is called once when the module loads.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.KeyFile.AuthKeysFileLex">
            <summary>
            Lexical analyzer for parsing the OpenSSH public key format and
            authorized_keys file.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.AuthKeysFileLex.#ctor(Goedel.FSR.LexReader)">
            <summary>
            Create and initialize a lexical analyzer.
            </summary>
            <param name="Reader">The input source.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.AuthKeysFileLex.#ctor(System.IO.Stream)">
            <summary>
            Create and initialize a lexical analyzer.
            </summary>
            <param name="Stream">The input source.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.AuthKeysFileLex.#ctor(System.IO.TextReader)">
            <summary>
            Create and initialize a lexical analyzer.
            </summary>
            <param name="TextReader">The input source.</param>
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.AuthKeysFileLex.CharacterMappings">
            <summary>
            Maps characters to character sets
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.AuthKeysFileLex.CompressedTransitions">
            <summary>
            State transitions in response to character set
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.AuthKeysFileLex.GetToken(Goedel.Cryptography.KeyFile.AuthKeysFileLex.State)">
            <summary>
            Get the next token from the stream
            </summary>
            <param name="StartState">The initial starting state</param>
            <returns>The token detected or -1 if an error occurred</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.AuthKeysFileLex.GetToken">
            <summary>
            Get the next token from the stream
            </summary>
            <returns>The token detected or -1 if an error occurred</returns>
        </member>
        <member name="T:Goedel.Cryptography.KeyFile.AuthKeysFileLex.State">
            <summary>State types</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.AuthKeysFileLex.State.LineStart">
            <summary>LineStart</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.AuthKeysFileLex.State.AlgRead">
            <summary>AlgRead</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.AuthKeysFileLex.State.AlgSpace">
            <summary>AlgSpace</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.AuthKeysFileLex.State.DataRead">
            <summary>DataRead</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.AuthKeysFileLex.State.CommentSpace">
            <summary>CommentSpace</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.AuthKeysFileLex.State.Comment">
            <summary>Comment</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.AuthKeysFileLex.State.Finished">
            <summary>Finished</summary>
        </member>
        <member name="T:Goedel.Cryptography.KeyFile.AuthKeysFileLex.Token">
            <summary>Token Types</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.AuthKeysFileLex.Token.INVALID">
            <summary>Could not find a valid token.</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.AuthKeysFileLex.Token.Empty">
            <summary>Empty</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.AuthKeysFileLex.Token.Data">
            <summary>Data</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.AuthKeysFileLex.Token.Algorithm">
            <summary>Algorithm</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.AuthKeysFileLex.Character_Mapping">
            <summary>Mapping of characters to character groups</summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.AuthKeysFileLex.Init">
            <summary>Generated initialization method, is called automatically 
            the FSR to reset </summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.AuthKeysFileLex.AddAlgorithm(System.Int32)">
            <summary>
            Add characters to the algorithm
            </summary>
            <param name="c">The character read</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.AuthKeysFileLex.AddData(System.Int32)">
            <summary>
            Add characters to the base64 encoded data section
            </summary>
            <param name="c">The character read</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.AuthKeysFileLex.AddComment(System.Int32)">
            <summary>
            Add characters to the comment section
            </summary>
            <param name="c">The character read</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.AuthKeysFileLex.Ignore(System.Int32)">
            <summary>
            Do nothing
            </summary>
            <param name="c">The character read</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.AuthKeysFileLex.GetTaggedData">
            <summary>
            Retrieve tagged data and reset lexical analyzer to read the next line
            </summary>
            <returns>A public key record</returns>
        </member>
        <member name="T:Goedel.Cryptography.KeyFile.AuthorizedKey">
            <summary>
            A key authorization entry.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.AuthorizedKey.Data">
            <summary>
            The raw key data.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.AuthorizedKey.Algorithm">
            <summary>
            The key algorithm
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.AuthorizedKey.Comment">
            <summary>
            Optional user comment
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.AuthorizedKey.SSHData">
            <summary>
            The parsed key data
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.KeyFile.KeyFileLex">
            <summary>
            Read a PEM style private key file (unencrypted)
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.KeyFileLex.#ctor(Goedel.FSR.LexReader)">
            <summary>
            Create and initialize a lexical analyzer.
            </summary>
            <param name="Reader">The input source.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.KeyFileLex.#ctor(System.IO.Stream)">
            <summary>
            Create and initialize a lexical analyzer.
            </summary>
            <param name="Stream">The input source.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.KeyFileLex.#ctor(System.IO.TextReader)">
            <summary>
            Create and initialize a lexical analyzer.
            </summary>
            <param name="TextReader">The input source.</param>
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.KeyFileLex.CharacterMappings">
            <summary>
            Maps characters to character sets
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.KeyFileLex.CompressedTransitions">
            <summary>
            State transitions in response to character set
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.KeyFileLex.GetToken(Goedel.Cryptography.KeyFile.KeyFileLex.State)">
            <summary>
            Get the next token from the stream
            </summary>
            <param name="StartState">The initial starting state</param>
            <returns>The token detected or -1 if an error occurred</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.KeyFileLex.GetToken">
            <summary>
            Get the next token from the stream
            </summary>
            <returns>The token detected or -1 if an error occurred</returns>
        </member>
        <member name="T:Goedel.Cryptography.KeyFile.KeyFileLex.State">
            <summary>State types</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.KeyFileLex.State.FileStart">
            <summary>FileStart</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.KeyFileLex.State.ArmorStart1">
            <summary>ArmorStart1</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.KeyFileLex.State.TagStartBegin">
            <summary>TagStartBegin</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.KeyFileLex.State.TagStart">
            <summary>TagStart</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.KeyFileLex.State.ArmorStart2">
            <summary>ArmorStart2</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.KeyFileLex.State.Base64Data">
            <summary>Base64Data</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.KeyFileLex.State.IsHeader">
            <summary>IsHeader</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.KeyFileLex.State.HeaderData">
            <summary>HeaderData</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.KeyFileLex.State.HeaderEnd">
            <summary>HeaderEnd</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.KeyFileLex.State.ArmorEnd1">
            <summary>ArmorEnd1</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.KeyFileLex.State.TagEndEnd">
            <summary>TagEndEnd</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.KeyFileLex.State.TagEnd">
            <summary>TagEnd</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.KeyFileLex.State.ArmorEnd2">
            <summary>ArmorEnd2</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.KeyFileLex.State.StartTag">
            <summary>StartTag</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.KeyFileLex.State.Fail">
            <summary>Fail</summary>
        </member>
        <member name="T:Goedel.Cryptography.KeyFile.KeyFileLex.Token">
            <summary>Token Types</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.KeyFileLex.Token.INVALID">
            <summary>Could not find a valid token.</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.KeyFileLex.Token.Empty">
            <summary>Empty</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.KeyFileLex.Token.Tag">
            <summary>Tag</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.KeyFileLex.Token.Armor">
            <summary>Armor</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.KeyFileLex.Token.Data">
            <summary>Data</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.KeyFileLex.Character_Mapping">
            <summary>Mapping of characters to character groups</summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.KeyFileLex.Init">
            <summary>Generated initialization method, is called automatically 
            the FSR to reset </summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.KeyFileLex.Headers">
            <summary>List of headers</summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.KeyFileLex.Reset(System.Int32)">
            <summary>
            Do nothing
            </summary>
            <param name="c">Character that was read</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.KeyFileLex.Count1(System.Int32)">
            <summary>
            Count the inital staring armor tag
            </summary>
            <param name="c">Character that was read</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.KeyFileLex.Count2(System.Int32)">
            <summary>
            Count the inital finishing armor tag;
            </summary>
            <param name="c">Character that was read</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.KeyFileLex.Count3(System.Int32)">
            <summary>
            Count the final staring armor tag;
            </summary>
            <param name="c">Character that was read</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.KeyFileLex.Count4(System.Int32)">
            <summary>
            Count the final finishing armor tag;
            </summary>
            <param name="c">Character that was read</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.KeyFileLex.Tag1(System.Int32)">
            <summary>
            Record the initial item description
            </summary>
            <param name="c">Character that was read</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.KeyFileLex.Base64(System.Int32)">
            <summary>
            Record the encoded data
            </summary>
            <param name="c">Character that was read</param> 
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.KeyFileLex.Tag2(System.Int32)">
            <summary>
            Record the final item description
            </summary>
            <param name="c">Character that was read</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.KeyFileLex.Begin(System.Int32)">
            <summary>
            Verify the initial BEGIN tag
            </summary>
            <param name="c">Character that was read</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.KeyFileLex.End(System.Int32)">
            <summary>
            Verify the final End tag
            </summary>
            <param name="c">Character that was read</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.KeyFileLex.AddTag(System.Int32)">
            <summary>
            Add character to tag
            </summary>
            <param name="c">Character value to add</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.KeyFileLex.Abort(System.Int32)">
            <summary>
            Do nothing
            </summary>
            <param name="c">Character value read</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.KeyFileLex.StartHeader(System.Int32)">
            <summary>
            Do nothing
            </summary>
            <param name="c">Character value read</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.KeyFileLex.HeaderAdd(System.Int32)">
            <summary>
            Do nothing
            </summary>
            <param name="c">Character value read</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.KeyFileLex.CopyHeader(System.Int32)">
            <summary>
            Do nothing
            </summary>
            <param name="c">Character value read</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.KeyFileLex.GetTaggedData">
            <summary>
            Process tagged data
            </summary>
            <returns>Summary of tagged data.</returns>
        </member>
        <member name="T:Goedel.Cryptography.KeyFile.TaggedData">
            <summary>Tagged data from file</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.TaggedData.Strict">
            <summary>If true the file is strictly compliant with the PEM spec,
            the number of dashes at the start and end of the header and footer
            armor match.</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.TaggedData.Count">
            <summary>Number of dashes counted</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.TaggedData.Tag">
            <summary>The tag (excluding BEGIN or END)</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.TaggedData.Data">
            <summary>The tagged data converted from Base64.</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.TaggedData.Headers">
            <summary>Listy of header values</summary>
        </member>
        <member name="T:Goedel.Cryptography.KeyFile.Header">
            <summary>Header value</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.Header.Tag">
            <summary>The header tag</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.Header.Value">
            <summary>The header value</summary>
        </member>
        <member name="T:Goedel.Cryptography.KeyFile.NamespaceDoc">
            <summary>
            Classes and methods to read and write various popular key file formats.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.KeyFile.DataBuffer">
            <summary>
            Implement a tokenized buffer for the data encoding used in SSH.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.DataBuffer.Data">
            <summary>The collected data</summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.DataBuffer.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.DataBuffer.#ctor(System.Byte[])">
            <summary>
            Constructor for use decoding the specified input buffer
            </summary>
            <param name="Data">Data input</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.DataBuffer.Size(System.Byte[])">
            <summary>
            Reserve space for a data item
            </summary>
            <param name="Data">Byte array.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.DataBuffer.Size(System.String)">
            <summary>
            Reserve space for a data item
            </summary>
            <param name="Data">UTF8 string data</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.DataBuffer.Allocate">
            <summary>
            Allocate a new data buffer for encoding with enough space for the 
            data items whose space has been reserved using the Size() method.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.DataBuffer.EncodeLength(System.UInt32)">
            <summary>
            Encode a 32 bit length
            </summary>
            <param name="Length">The length value to encode.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.DataBuffer.Encode(System.Byte[])">
            <summary>
            Encode byte array.
            </summary>
            <param name="Input">Data to encode.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.DataBuffer.Encode(System.String)">
            <summary>
            Encode text
            </summary>
            <param name="Text">Data to encode.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.DataBuffer.DecodeLength">
            <summary>
            Decode a length value.
            </summary>
            <returns>The decoded length.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.DataBuffer.Decode(System.Byte[]@)">
            <summary>
            Decode byte array item.
            </summary>
            <param name="Result">Decoded data</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.DataBuffer.Decode(System.String@)">
            <summary>
            Decode string data.
            </summary>
            <param name="Result">Decoded data.</param>
        </member>
        <member name="T:Goedel.Cryptography.KeyFile.SSHData">
            <summary>
            Base class for SSH data encoding.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.SSHData.Tag">
            <summary>
            The tag for the data for use in files.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.SSHData.Decode(System.Byte[])">
            <summary>
            Decode file containing a tagged data item.
            </summary>
            <param name="Data">Input</param>
            <returns>Parsed data.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.SSHData.Encode">
            <summary>
            Encode data item.
            </summary>
            <returns>The encoded data</returns>
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.SSHData.KeyPair">
            <summary>The key pair</summary>
        </member>
        <member name="T:Goedel.Cryptography.KeyFile.SSH_RSA">
            <summary>
            RSA data in SSH format.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.SSH_RSA.Tag">
            <summary>The SSH tag</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.SSH_RSA.TagID">
            <summary>The SSH tag</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.SSH_RSA.Exponent">
            <summary>RSA public key exponent.</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.SSH_RSA.Modulus">
            <summary>RSA public key modulus.</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.SSH_RSA.RSAPublicKey">
            <summary>The RSA Key Pair</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.SSH_RSA.KeyPair">
            <summary>The key pair</summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.SSH_RSA.#ctor(Goedel.Cryptography.KeyPairBaseRSA)">
            <summary>
            Construct an SSH_RSA object from an RSAKeyPair
            </summary>
            <param name="RSAKeyPair">Keypair to construct from</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.SSH_RSA.Encode">
            <summary>Encode structure</summary>
            <returns>Byte array representing structure.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.SSH_RSA.#ctor(Goedel.Cryptography.KeyFile.DataBuffer)">
            <summary>
            Constructor, decode the data item from the specified buffer.
            </summary>
            <param name="DataBuffer">Data input.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.SSH_RSA.#ctor(System.Byte[])">
            <summary>
            Constructor, decode the data item from the specified buffer.
            </summary>
            <param name="Data">Data input.</param>
        </member>
        <member name="T:Goedel.Cryptography.KeyFile.SSH_DSS">
            <summary>
            DSS private key in SSH format.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.SSH_DSS.Tag">
            <summary>The SSH tag</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyFile.SSH_DSS.TagID">
            <summary>The SSH tag</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.SSH_DSS.P">
            <summary>The parameter P</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.SSH_DSS.Q">
            <summary>The parameter Q</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.SSH_DSS.G">
            <summary>The parameter G</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyFile.SSH_DSS.Y">
            <summary>The parameter Y</summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.SSH_DSS.Encode">
            <summary>Encode structure</summary>
            <returns>Byte array representing structure.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyFile.SSH_DSS.#ctor(Goedel.Cryptography.KeyFile.DataBuffer)">
            <summary>
            Constructor, decode the data item from the specified buffer.
            </summary>
            <param name="DataBuffer">Data input.</param>
        </member>
    </members>
</doc>
