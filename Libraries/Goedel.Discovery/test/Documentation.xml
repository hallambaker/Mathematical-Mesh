<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Goedel.Discovery</name>
    </assembly>
    <members>
        <member name="T:Goedel.Discovery.ClientUDP">
            <summary>
            UDP Client wrapper. Performs buffering on reads.
            </summary>
        </member>
        <member name="F:Goedel.Discovery.ClientUDP.Data">
            <summary>The last data read.</summary>
        </member>
        <member name="F:Goedel.Discovery.ClientUDP.ReadCount">
            <summary>The number of reads</summary>
        </member>
        <member name="M:Goedel.Discovery.ClientUDP.#ctor(System.Net.IPAddress,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="address">IP Address to bind to</param>
            <param name="port">UDP Port to bind to.</param>
            <param name="timeOut">Optional timeout value, if zero reads will not timeout.</param>
            <param name="maxRead">Maximum number of data values to accept</param>
        </member>
        <member name="M:Goedel.Discovery.ClientUDP.Disposing">
            <summary>
            The class specific disposal routine.
            </summary>
        </member>
        <member name="M:Goedel.Discovery.ClientUDP.Listen">
            <summary>
            The listener thread
            </summary>
        </member>
        <member name="T:Goedel.Discovery.DNSBuffer">
            <summary>
            Buffer class for DNS operations.
            </summary>
        </member>
        <member name="F:Goedel.Discovery.DNSBuffer.Buffer">
            <summary>The buffer data</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSBuffer.MaxLength">
            <summary>The maximum buffer length</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSBuffer.Length">
            <summary>The current buffer length.</summary>
        </member>
        <member name="M:Goedel.Discovery.DNSBuffer.#ctor(System.Int32,System.Int32)">
            <summary>
            Create buffer with specified initial and maximum size.
            </summary>
            <param name="Start">Starting buffer size.</param>
            <param name="Max">Maximum buffer size.</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBuffer.#ctor(System.Byte[],System.Int32)">
            <summary>
            Create buffer from received data buffer and length specification.
            </summary>
            <param name="data">Input data</param>
            <param name="LengthIn">Length of message received.</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBuffer.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="T:Goedel.Discovery.DNSBufferIndex">
            <summary>Buffer class for DNS operations using a portion of a 
            buffer specified by a separate index. This buffer class is used 
            to read in records etc. whose length is specified by an external
            range with proper buffer overrun checks.</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSBufferIndex.Buffer">
            <summary>The underlying buffer.</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSBufferIndex.Bytes">
            <summary>Return the buffer data window as a byte array.</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSBufferIndex.Pointer">
            <summary>Current read/write pointer.</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSBufferIndex.MaxRead">
            <summary>Maximum number of bytes to be buffered.</summary>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor from existing data set
            </summary>
            <param name="data">Binary data.</param>
            <param name="LengthIn">Number of bytes</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.#ctor(System.Byte[])">
            <summary>
            Constructor from existing data set
            </summary>
            <param name="Data">Binary data.</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.#ctor(Goedel.Discovery.DNSBuffer)">
            <summary>
            Constructor from existing data set
            </summary>
            <param name="BufferIn">Data buffer</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.#ctor(Goedel.Discovery.DNSBuffer,System.Int32,System.Int32)">
            <summary>
            Constructor from existing data set
            </summary>
            <param name="BufferIn">Data buffer</param>
            <param name="PointerIn">Starting point of buffer window.</param>
            <param name="LengthIn">Length of buffer window.</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSBufferIndex.Start">
            <summary>
            Mark and return the current position.
            </summary>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.Remainder(System.Int32)">
            <summary>
            Returns the space remaining in a buffer of Length bytes begun from the
            point last marked with Start.
            </summary>
            <param name="Length">Length of the buffer</param>
            <returns>The remaining bytes.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.Write(System.UInt16)">
            <summary>Write 16 bit integer value</summary>
            <param name="data">Data to write</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.WriteString(System.String)">
            <summary>Write string value with no length prefix (length specified otherwise)</summary>
            <param name="data">Data to write</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.WriteString8(System.String)">
            <summary>Write string value with 8 bit length prefix</summary>
            <param name="data">Data to write</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.WriteByte(System.Byte)">
            <summary>Write byte value</summary>
            <param name="data">Data to write</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.WriteIPv4(System.Net.IPAddress)">
            <summary>Write IPv4 Address value</summary>
            <param name="data">Data to write</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.WriteIPv6(System.Net.IPAddress)">
            <summary>Write IPv6 value</summary>
            <param name="data">Data to write</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.WriteInt16(System.UInt16)">
            <summary>Write 16 bit integer value.value</summary>
            <param name="data">Data to write</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.WriteInt16(Goedel.Discovery.DNSTypeCode)">
            <summary>Write DNS code value</summary>
            <param name="data">Data to write</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.WriteInt16(Goedel.Discovery.DNSClass)">
            <summary>Write DNC Class value</summary>
            <param name="data">Data to write</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.WriteInt16(Goedel.Discovery.DNSFlags)">
            <summary>Write DNS Flags value</summary>
            <param name="data">Data to write</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.WriteInt16(System.Int32)">
            <summary>Write int 16 value</summary>
            <param name="data">Data to write</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.WriteInt32(System.UInt32)">
            <summary>Write int 32 value</summary>
            <param name="data">Data to write</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.WriteInt48(System.UInt64)">
            <summary>Write int 48 value</summary>
            <param name="data">Data to write</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.WriteInt64(System.UInt64)">
            <summary>Write int 64 value</summary>
            <param name="data">Data to write</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.WriteDomain(Goedel.Discovery.Domain)">
            <summary>Write domain name value</summary>
            <param name="Domain">Data to write</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.WriteMail(System.String)">
            <summary>Write Mail address value</summary>
            <param name="Data">Data to write</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.WriteName(System.String)">
            <summary>Write DNS name value</summary>
            <param name="Name">Data to write</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.WriteTag(System.String)">
            <summary>Write Tag value</summary>
            <param name="Tag">Data to write</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.WriteL8Data(System.Byte[])">
            <summary>Write data value with byte length prefix value</summary>
            <param name="data">Data to write</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.WriteL16Data(System.Byte[])">
            <summary>Write value with 2 byte length prefix.</summary>
            <param name="data">Data to write</param>                  
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.WriteData(System.Byte[])">
            <summary>Write value with no length prefix</summary>
            <param name="data">Data to write</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.ReadByte">
            <summary>Read byte value</summary>
            <returns>The value read</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.ReadByte(System.Byte@)">
            <summary>Read byte value</summary>
            <param name="data">Data read</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.ReadInt16">
            <summary>Read 16 bit integer value</summary>
            <returns>The value read</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.ReadInt16(System.UInt16@)">
            <summary>Read 16 bit integer value</summary>
            <param name="data">Data read</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.ReadInt16(Goedel.Discovery.DNSTypeCode@)">
            <summary>Read DNS Type value</summary>
            <param name="data">Data read</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.ReadInt16(Goedel.Discovery.DNSClass@)">
            <summary>Read DNS Class value</summary>
            <param name="data">Data read</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.ReadInt16(Goedel.Discovery.DNSFlags@)">
            <summary>Read DNS Flags value</summary>
            <param name="data">Data read</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.ReadInt16(System.Int32@)">
            <summary>Read 16 bit integer value</summary>
            <param name="data">Data read</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.ReadInt32">
            <summary>Read 32 bit integer value</summary>
            <returns>The value read</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.ReadInt64">
            <summary>Read 64 bit integer value</summary>
            <returns>The value read</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.ReadInt32(System.UInt32@)">
            <summary>Read 32 bit integer value</summary>
            <param name="data">The value read</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.ReadInt64(System.UInt64@)">
            <summary>Read 64 bit integer value</summary>
            <param name="data">Data to write</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.ReadNodeID(System.UInt64@)">
            <summary>Read 64 bit node identifier value</summary>
            <param name="data">The value read</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.ReadNodeID">
            <summary>Read Node identifier value</summary>
            <returns>The value read</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.ReadDomain">
            <summary>Read Domain name value</summary>
            <returns>The value read</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.ReadName">
            <summary>Read name value</summary>
            <returns>The value read</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.ReadTag">
            <summary>Read tag value</summary>
            <returns>The value read</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.ReadL8Data">
            <summary>Read string value with 8 bit length prefix</summary>
            <returns>The value read</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.ReadL16Data">
            <summary>Read string value with 16 bit length prefix</summary>
            <returns>The value read</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.ReadL16Data(Goedel.Discovery.DNSBufferIndex@)">
            <summary>Read data value with 16 bit length delimeter.</summary>
            <param name="data">The value read.</param>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.ReadData">
            <summary>Read binary data value (remainder of the buffer)</summary>
            <returns>The value read</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.ReadData(System.Int32)">
            <summary>Read remainder of the buffer as binary data value</summary>
            <param name="Length">Number of bytes to read</param>
            <returns>The value read</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.ReadString">
            <summary>Read value</summary>
            <returns>The value read</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.ReadString(System.Int32)">
            <summary>Read string value with specified length.</summary>
            <param name="length">Number of bytes to read.</param>
            <returns>The value read</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.ReadStrings(System.Int32)">
            <summary>Read set of strings value</summary>
            <param name="Extent">Number of bytes to read.</param>
            <returns>Null list, this is a stub</returns>
            <remarks>Not yet implemented.</remarks>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.ReadIPv4">
            <summary>Read IPv4 address value</summary>
            <returns>The value read</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.ReadIPv6">
            <summary>Read value</summary>
            <returns>The value read</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.ReadMail">
            <summary>Read value</summary>
            <returns>The value read</returns>
            <remarks>Not yet implemented</remarks>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.ReadOptionalString">
            <summary>Read value</summary>
            <returns>The value read</returns>
            <remarks>Not yet implemented</remarks>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.ReadTime32">
            <summary>Read 32 bit time value</summary>
            <returns>The value read</returns>
            <remarks>Not yet implemented</remarks>
        </member>
        <member name="M:Goedel.Discovery.DNSBufferIndex.ReadTime48">
            <summary>Read 48 bit time value</summary>
            <returns>The value read</returns>
            <remarks>Not yet implemented</remarks>
        </member>
        <member name="T:Goedel.Discovery.DNSFallback">
            <summary>DNS Fallback Options</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSFallback.None">
            <summary>Do not attempt fallback if no SRV record exists</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSFallback.Address">
            <summary>Attempt to resolve &lt;Address&gt; if SRV resolution fails</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSFallback.Prefix">
            <summary>Attempt to resolve &lt;Service&gt;.&lt;Address&gt; if SRV resolution fails</summary>
        </member>
        <member name="T:Goedel.Discovery.TransportSecurity">
            <summary>Transport security policy</summary>
        </member>
        <member name="F:Goedel.Discovery.TransportSecurity.Refuse">
            <summary>Do not accept TLX</summary>
        </member>
        <member name="F:Goedel.Discovery.TransportSecurity.Any">
            <summary>Allow any transport security protocol</summary>
        </member>
        <member name="F:Goedel.Discovery.TransportSecurity.Require">
            <summary>Require transport security</summary>
        </member>
        <member name="F:Goedel.Discovery.TransportSecurity.TLS_1_1">
            <summary>Accept TLS 1.1 or earlier</summary>
        </member>
        <member name="F:Goedel.Discovery.TransportSecurity.TLS_1_2">
            <summary>Accept TLS 1.2</summary>
        </member>
        <member name="F:Goedel.Discovery.TransportSecurity.TLS_1_3">
            <summary>Accept TLS 1.3</summary>
        </member>
        <member name="F:Goedel.Discovery.TransportSecurity.NULL">
            <summary>No value specified</summary>
        </member>
        <member name="T:Goedel.Discovery.Transport">
            <summary>Transport protocol</summary>
        </member>
        <member name="F:Goedel.Discovery.Transport.HTTP">
            <summary>Accept HTTP 1.1</summary>
        </member>
        <member name="F:Goedel.Discovery.Transport.HTTP2">
            <summary>Accept HTTP/2</summary>
        </member>
        <member name="F:Goedel.Discovery.Transport.QUIC">
            <summary>Accept QUIC</summary>
        </member>
        <member name="F:Goedel.Discovery.Transport.NULL">
            <summary>No value specified</summary>
        </member>
        <member name="T:Goedel.Discovery.DnsClient">
            <summary>
            DNS client.
            </summary>
        </member>
        <member name="P:Goedel.Discovery.DnsClient.Default">
            <summary>Default client context for DNS query (result is cached for reuse)</summary>
        </member>
        <member name="M:Goedel.Discovery.DnsClient.GetContext">
            <summary>Return a DNS Client Context in which to make a set of queries.
            </summary>
            <returns>The DNS Client Context</returns>
        </member>
        <member name="M:Goedel.Discovery.DnsClient.ResolveService(System.String,System.String,System.Nullable{System.Int32},Goedel.Discovery.DNSFallback)">
            <summary>
            Resolve a DNS name to an address and service characteristics.
            </summary>
            <param name="Address">The address to use</param>
            <param name="Service">The DNS service prefix</param>
            <param name="Port">The default DNS port number</param>
            <param name="Fallback">The fallback mode to use if SRV lookup fails</param>
            <returns>IP Destination describing the resolution results</returns>
        </member>
        <member name="M:Goedel.Discovery.DnsClient.ResolveServiceAsync(System.String,System.String,System.Nullable{System.Int32},Goedel.Discovery.DNSFallback)">
            <summary>
            Perform Asynchronous query for Service discovery and description records
            using the platform default DNSClient.
            </summary>
            <param name="Address">The address to query</param>
            <param name="Service">The IANA service name</param>
            <param name="Port">The default DNS port number</param>
            <param name="Fallback">The fallback mode to use if SRV lookup fails</param> 
            <returns>Description of the discovered services.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSContext">
            <summary>
            Multiple managed DNS queries.
            </summary>
        </member>
        <member name="F:Goedel.Discovery.DNSContext.pendingRequests">
            <summary>Scoreboard of current requests.</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSContext.timeout">
            <summary>The timeout value</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSContext.TaskListen">
            <summary>
            A task listening on the DNS port
            </summary>
        </member>
        <member name="P:Goedel.Discovery.DNSContext.Pending">
            <summary>
            If true there are pending requests and the context has not timed out
            </summary>
        </member>
        <member name="F:Goedel.Discovery.DNSContext.Active">
            <summary>
            If true, the context has not timed out
            </summary>
        </member>
        <member name="M:Goedel.Discovery.DNSContext.Disposing">
            <summary>
            Dispose allocated resources.
            </summary>
        </member>
        <member name="M:Goedel.Discovery.DNSContext.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="timeout">The maximum length of time to wait for a query to be satisfied</param>
            <param name="retry">Retry interval.</param>
        </member>
        <member name="M:Goedel.Discovery.DNSContext.SendRequest(Goedel.Discovery.DNSRequest)">
            <summary>
            Make a DNS request to the default client without waiting for a response
            </summary>
            <param name="Request">DNS request set</param>
            <returns>Task instance.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSContext.GetResponseAsync">
            <summary>
            Get the next DNS response
            </summary>
            <returns>The first valid response received.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSContext.GetResponseRawAsync">
            <summary>
            Get the next DNS response
            </summary>
            <returns>The first valid response received.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSContext.Close">
            <summary>
            Close the context.
            </summary>
        </member>
        <member name="M:Goedel.Discovery.DNSContext.NextAsync">
            <summary>
            Return the next response to a pending DNS request.
            </summary>
            <returns>Task instance.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSContext.QueueRequest(Goedel.Discovery.DNSRequest)">
            <summary>
            Make a DNS request to the default client without waiting for a response
            </summary>
            <param name="Request">DNS request set</param>
            <returns>Task instance.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSContext.QueueRequest(System.String,Goedel.Discovery.DNSTypeCode)">
            <summary>
            Make a DNS request to the default client without waiting for a response
            </summary>
            <param name="Address">The DNS address to query</param>
            <param name="DNSTypeCode">The DNS Type code to query</param>
            <returns>Task instance.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSContext.QueryServiceAsync(System.String,System.String,System.Nullable{System.Int32},Goedel.Discovery.DNSFallback)">
            <summary>
            Perform Asynchronous query for Service discovery and description records.
            </summary>
            <param name="Address">The address to query</param>
            <param name="Service">The IANA service name</param>
            <param name="Port">The default port number to use if no SRV record is found</param>
            <param name="Fallback">Fallback mode for if no SRV record is found</param>
            <returns>Description of the discovered services.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSContext.Add(Goedel.Discovery.ServiceDescription,Goedel.Discovery.DNSRecord)">
            <summary>
            Add information from the received record iff it is within the baliwick.
            </summary>
            <param name="ServiceDescription">The service description to add to</param>
            <param name="Record">DNS record to add data from</param>
        </member>
        <member name="T:Goedel.Discovery.DnsClientUDP">
            <summary>
            DNS client implementation
            </summary>
        </member>
        <member name="F:Goedel.Discovery.DnsClientUDP.ListIPAddress">
            <summary>
            List of IP addresses to contact.
            </summary>
        </member>
        <member name="F:Goedel.Discovery.DnsClientUDP.Port">
            <summary>
            Port number to contact.
            </summary>
        </member>
        <member name="M:Goedel.Discovery.DnsClientUDP.#ctor">
            <summary>
            Default constructor using platform default DNS.
            </summary>
        </member>
        <member name="M:Goedel.Discovery.DnsClientUDP.#ctor(System.String)">
            <summary>
            Constructor from server name.
            </summary>
            <param name="Server">Address of DNS server</param>
        </member>
        <member name="M:Goedel.Discovery.DnsClientUDP.#ctor(System.Net.IPAddress)">
            <summary>
            Constructor from IP Address using default DNS port (53).
            </summary>
            <param name="IPAddress">Address of DNS server</param>
        </member>
        <member name="M:Goedel.Discovery.DnsClientUDP.#ctor(System.Collections.Generic.List{System.Net.IPAddress})">
            <summary>
            Constructor from list of IP Addresses
            </summary>
            <param name="ListIPAddress">List of addresses of DNS server</param>
        </member>
        <member name="M:Goedel.Discovery.DnsClientUDP.#ctor(System.Net.IPAddress,System.UInt16)">
            <summary>
            Constructor from IP Address and port.
            </summary>
            <param name="IPAddress">Address of DNS server</param>
            <param name="Port">Port number</param>
        </member>
        <member name="M:Goedel.Discovery.DnsClientUDP.GetHostDNS">
            <summary>
            Stub method for non portable function to get the host DNS server address.
            </summary>
            <returns>List of DNS servers.</returns>
        </member>
        <member name="M:Goedel.Discovery.DnsClientUDP.GetContext">
            <summary>Return a DNS Client Context in which to make a set of queries.
            </summary>
            <returns>The DNS Client Context</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSContextUDP">
            <summary>
            DNS client implementation
            </summary>
        </member>
        <member name="M:Goedel.Discovery.DNSContextUDP.Disposing">
            <summary>
            The disposal method, frees the UdpClient if allocated.
            </summary>
        </member>
        <member name="M:Goedel.Discovery.DNSContextUDP.#ctor(System.Collections.Generic.List{System.Net.IPAddress},System.UInt16)">
            <summary>
            Default Constructor
            </summary>
            <param name="ListIPAddress">List of IP addresses to contact.</param>
            <param name="Port">Port number.</param>
        </member>
        <member name="M:Goedel.Discovery.DNSContextUDP.Close">
            <summary>
            Close the context.
            </summary>
        </member>
        <member name="M:Goedel.Discovery.DNSContextUDP.SendRequest(Goedel.Discovery.DNSRequest)">
            <summary>
            Make a DNS request to the default client without waiting for a response
            </summary>
            <param name="Request">DNS request set</param>
            <returns>Task instance.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSContextUDP.GetResponseAsync">
            <summary>
            Make DNS query and wait for response.
            </summary>
            <returns>The first valid response received.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSContextUDP.GetResponseRawAsync">
            <summary>
            Get asynchronous raw response.
            </summary>
            <returns>The first valid response received.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSOption">
            <summary>Describe DNS Option</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSOption.Code">
            <summary>Code</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSOption.Data">
            <summary>Data</summary>
        </member>
        <member name="T:Goedel.Discovery.DNSGatewayType">
            <summary>The type of gateway</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSGatewayType.NULL">
            <summary>Unknown</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSGatewayType.IPv4">
            <summary>IPv4 Address</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSGatewayType.IPv6">
            <summary>IPv6 Address</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSGatewayType.DomainName">
            <summary>Domain name</summary>
        </member>
        <member name="T:Goedel.Discovery.DNSGateway">
            <summary>DNS Gateway</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSGateway.Type">
            <summary>The type of gateway</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSGateway.IPAddress">
            <summary>The IP address of the gateway</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSGateway.DomainName">
            <summary>The DNS address of the gateway</summary>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord">
            <summary>Base class for DNS records</summary>
            <summary>
            Base class for DNS Records
            </summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord.Domain">
            <summary>The domain name</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord.RType">
            <summary>Record type code</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord.RClass">
            <summary>Record class</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord.TTL">
            <summary>Time to live</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord.RData">
            <summary>Record data</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord.Start">
            <summary>Start index</summary>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord.Write">
            <summary>Write value</summary>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord.Label">
            <summary>The type text</summary>		
        </member>
        <member name="P:Goedel.Discovery.DNSRecord.Description">
            <summary>Description</summary>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord.Decode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Decode record or query from buffer</summary>	
            <param name="Index">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord.Parse(System.String,Goedel.Discovery.Parse)">
            <summary>Dispatch parser to parse text representation of specific DNS record</summary>
            <param name="Tag">Record tag</param>
            <param name="Parse">Parser</param>
            <returns>Parsed record</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord.Unknown">
            <summary>
            Return data value in default unknown encoding.
            </summary>
            <returns>Encoding of record in unknown text encoding.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord.Unknown(System.Byte[]@)">
            <summary>
            Return data value in default unknown encoding.
            </summary>
            <param name="encoding">Encoded parameters in byte form</param>
            <returns>Encoding of record in unknown text encoding.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSFlags">
            <summary>DNS Flags</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSFlags.QR">
            <summary>QR</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSFlags.OPCODE_Mask">
            <summary>OP Codes</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSFlags.OPCODE_QUERY">
            <summary>Query</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSFlags.OPCODE_IQUERY">
            <summary>I Query</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSFlags.OPCODE_STATUS">
            <summary>Status </summary>
        </member>
        <member name="F:Goedel.Discovery.DNSFlags.AA">
            <summary>AA</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSFlags.TC">
            <summary>TC</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSFlags.RD">
            <summary>RD</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSFlags.RA">
            <summary>RA</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSFlags.Z_Mask">
            <summary>Z</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSFlags.RCODE_Mask">
            <summary>Result code Flags</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSFlags.RCODE_Success">
            <summary>Success</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSFlags.RCODE_FormatError">
            <summary>Format error</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSFlags.RCODE_ServerFailure">
            <summary>Failure at server</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSFlags.RCODE_NameError">
            <summary>Name not understood</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSFlags.RCODE_NotImplemented">
            <summary>Feature not implemented</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSFlags.RCODE_Refused">
            <summary>Request refused.</summary>
        </member>
        <member name="T:Goedel.Discovery.DNSClass">
            <summary>DNS Classes</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSClass.IN">
            <summary>Internet (IN)</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSClass.CH">
            <summary>Chaos (CH) </summary>
        </member>
        <member name="F:Goedel.Discovery.DNSClass.HS">
            <summary>Hesiod (HS</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSClass.NONE">
            <summary>QCLASS NONE  </summary>
        </member>
        <member name="F:Goedel.Discovery.DNSClass.ANY">
            <summary>QCLASS * (ANY) </summary>
        </member>
        <member name="T:Goedel.Discovery.Domain">
            <summary>Domain name</summary>
        </member>
        <member name="F:Goedel.Discovery.Domain.Name">
            <summary>Unicode representation of name</summary>
        </member>
        <member name="F:Goedel.Discovery.Domain.Data">
            <summary>DNSClient represenation (punycode)</summary>
        </member>
        <member name="M:Goedel.Discovery.Domain.#ctor(System.String)">
            <summary>Constructor from string</summary>
            <param name="Name">The DNS name in UNICODE format.</param>
        </member>
        <member name="T:Goedel.Discovery.DNSMessage">
            <summary>DNS Message class</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSMessage.Data">
            <summary>The message data</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSMessage.Buffer">
            <summary>The message data buffer</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSMessage.ID">
            <summary>Message identifier code for matching requests and responses.</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSMessage.Flags">
            <summary>Flags</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSMessage.OPCODE">
            <summary>OPCode flags</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSMessage.RCODE">
            <summary>Request code flags</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSMessage.QR">
            <summary>The QR flag</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSMessage.AA">
            <summary>The AA flag</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSMessage.TC">
            <summary>The TC flag</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSMessage.RD">
            <summary>The RD flag</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSMessage.RA">
            <summary>The RA flag</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSMessage.Query">
            <summary>The DNS Query</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSMessage.Answers">
            <summary>The authoritative answers</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSMessage.Authorities">
            <summary>The authorities answering</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSMessage.Additional">
            <summary>Additional records</summary>
        </member>
        <member name="M:Goedel.Discovery.DNSMessage.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Encode message to buffer</summary>
            <param name="Index">Buffer out</param>
        </member>
        <member name="M:Goedel.Discovery.DNSMessage.Decode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Decode message from buffer</summary>
            <param name="Index">Buffer in</param>
        </member>
        <member name="M:Goedel.Discovery.DNSMessage.#ctor(System.Byte[])">
            <summary>Parse the data in the buffer BufferIn </summary>
            <param name="data">The encoded message</param>
        </member>
        <member name="M:Goedel.Discovery.DNSMessage.#ctor">
            <summary> Create Empty Message buffer (do not parse, done in sub);</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSMessage.TypeTag">
            <summary>The type tag</summary>
        </member>
        <member name="T:Goedel.Discovery.DNSRequest">
            <summary>DNS request message</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRequest.TypeTag">
            <summary>Text tag describing message type.</summary>
        </member>
        <member name="M:Goedel.Discovery.DNSRequest.#ctor(System.String,System.String)">
            <summary>Constructor for request</summary>
            <param name="Domain">The domain name</param>
            <param name="QType">The query type</param>
        </member>
        <member name="M:Goedel.Discovery.DNSRequest.#ctor(System.String,Goedel.Discovery.DNSTypeCode)">
            <summary>Constructor for request</summary>
            <param name="Domain">The domain name</param>
            <param name="QCode">The query type</param>
        </member>
        <member name="T:Goedel.Discovery.DNSResponse">
            <summary>DNS response message</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSResponse.TypeTag">
            <summary>The type of the message</summary>
        </member>
        <member name="M:Goedel.Discovery.DNSResponse.#ctor(System.Byte[])">
            <summary>Default constructor</summary>
            <param name="Data">Input data</param>
        </member>
        <member name="T:Goedel.Discovery.DNSQuery">
            <summary>DNS Query class</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSQuery.QName">
            <summary>The Query name</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSQuery.QType">
            <summary>The Query Type</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSQuery.QClass">
            <summary>The Class</summary>
        </member>
        <member name="M:Goedel.Discovery.DNSQuery.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Encode Query</summary>
            <param name="Index">Output buffer</param>
        </member>
        <member name="M:Goedel.Discovery.DNSQuery.Decode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Decode Query</summary>
            <param name="Index">Input buffer</param>
            <returns>Query</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSQuery.#ctor(System.String,Goedel.Discovery.DNSTypeCode,Goedel.Discovery.DNSClass)">
            <summary>Constructor from main components</summary>
            <param name="Domain">Domain name</param>
            <param name="QTypeIn">Query type</param>
            <param name="QClassIn">Query class</param>
        </member>
        <member name="M:Goedel.Discovery.DNSQuery.#ctor(System.String,Goedel.Discovery.DNSTypeCode)">
            <summary>Constructor from main components for internet class</summary>
            <param name="Domain">Domain name</param>
            <param name="QTypeIn">Query type</param>
        </member>
        <member name="T:Goedel.Discovery.DNS">
            <summary>DNS management interface class.</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNS.TypeCode(System.String)">
            <summary>Convert RR text code to type code.</summary>
            <param name="Tag">DNS text code</param>
            <returns>Type code</returns>
        </member>
        <member name="M:Goedel.Discovery.DNS.TypeCode(System.Int32)">
            <summary>Convert RR type code to text code.</summary>
            <param name="Code">Type code</param>
            <returns>DNS text code</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSTypeCode">
            <summary>DNT Type codes</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.A">
            <summary>Resource record A = 1, Host address</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.NS">
            <summary>Resource record NS = 2, Authoritative name server</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.MD">
            <summary>Resource record MD = 3, Mail destination</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.MF">
            <summary>Resource record MF = 4, Mail forwarder</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.CNAME">
            <summary>Resource record CNAME = 5, Canonical name for an alias</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.SOA">
            <summary>Resource record SOA = 6, Start of a zone of authority</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.MB">
            <summary>Resource record MB = 7, Mailbox domain name</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.MG">
            <summary>Resource record MG = 8, Mail group member</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.MR">
            <summary>Resource record MR = 9, Mail rename domain name</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.NULL">
            <summary>Resource record NULL = 10, Null RR</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.WKS">
            <summary>Resource record WKS = 11, Well known service description</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.PTR">
            <summary>Resource record PTR = 12, Domain name pointer</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.HINFO">
            <summary>Resource record HINFO = 13, Host information</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.MINFO">
            <summary>Resource record MINFO = 14, Mailbox or mail list information</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.MX">
            <summary>Resource record MX = 15, Mail exchange</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.TXT">
            <summary>Resource record TXT = 16, Text strings</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.RP">
            <summary>Resource record RP = 17, Responsible Person</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.AFSDB">
            <summary>Resource record AFSDB = 18, AFS Data Base location</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.X25">
            <summary>Resource record X25 = 19, X.25 PSDN address</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.ISDN">
            <summary>Resource record ISDN = 20, ISDN address</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.RT">
            <summary>Resource record RT = 21, Route Through</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.NSAP">
            <summary>Deprecated type NSAP = 22</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.NSAPPTR">
            <summary>Deprecated type NSAPPTR = 23</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.SIG">
            <summary>Resource record SIG = 24, Security signature</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.KEY">
            <summary>Resource record KEY = 25, Security key</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.PX">
            <summary>Deprecated type PX = 26</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.GPOS">
            <summary>Deprecated type GPOS = 27</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.AAAA">
            <summary>Resource record AAAA = 28, IP6 Address</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.LOC">
            <summary>Deprecated type LOC = 29</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.NXT">
            <summary>Deprecated type NXT = 30</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.EID">
            <summary>Deprecated type EID = 31</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.NIMLOC">
            <summary>Deprecated type NIMLOC = 32</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.SRV">
            <summary>Resource record SRV = 33, Server Selection</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.ATMA">
            <summary>Deprecated type ATMA = 34</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.NAPTR">
            <summary>Resource record NAPTR = 35, Naming Authority Pointer</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.KX">
            <summary>Resource record KX = 36, Key Exchanger</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.CERT">
            <summary>Resource record CERT = 37, CERT</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.A6">
            <summary>Deprecated type A6 = 38</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.DNAME">
            <summary>Resource record DNAME = 39, DNAME</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.SINK">
            <summary>Deprecated type SINK = 40</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.OPT">
            <summary>Resource record OPT = 41, OPT</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.APL">
            <summary>Deprecated type APL = 42</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.DS">
            <summary>Resource record DS = 43, Delegation Signer</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.SSHFP">
            <summary>Resource record SSHFP = 44, SSH Key Fingerprint</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.IPSECKEY">
            <summary>Resource record IPSECKEY = 45, IPSECKEY</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.RRSIG">
            <summary>Resource record RRSIG = 46, RRSIG</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.NSEC">
            <summary>Resource record NSEC = 47, NSEC</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.DNSKEY">
            <summary>Resource record DNSKEY = 48, DNSKEY</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.DHCID">
            <summary>Resource record DHCID = 49, DHCID</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.NSEC3">
            <summary>Resource record NSEC3 = 50, NSEC3</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.NSEC3PARAM">
            <summary>Resource record NSEC3PARAM = 51, NSEC3PARAM</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.TLSA">
            <summary>Resource record TLSA = 52, TLSA</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.NINFO">
            <summary>Deprecated type NINFO = 56</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.RKEY">
            <summary>Deprecated type RKEY = 57</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.TALINK">
            <summary>Deprecated type TALINK = 58</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.CDS">
            <summary>Deprecated type CDS = 59</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.SPF">
            <summary>Resource record SPF = 99, Sender Policy Framework</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.UINFO">
            <summary>Deprecated type UINFO = 100</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.UID">
            <summary>Deprecated type UID = 101</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.GID">
            <summary>Deprecated type GID = 102</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.UNSPEC">
            <summary>Deprecated type UNSPEC = 103</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.NID">
            <summary>Resource record NID = 104, </summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.L32">
            <summary>Resource record L32 = 105, </summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.L64">
            <summary>Resource record L64 = 106, </summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.LP">
            <summary>Resource record LP = 107, </summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.TKEY">
            <summary>Resource record TKEY = 249, Transaction Key</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.TSIG">
            <summary>Resource record TSIG = 250, Transaction Signature</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.IXFR">
            <summary>Query type IXFR = 251</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.AXFR">
            <summary>Query type AXFR = 252</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.MAILB">
            <summary>Query type MAILB = 253</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.MAILA">
            <summary>Query type MAILA = 254</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.ALL">
            <summary>Query type ALL = 255</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.URI">
            <summary>Resource record URI = 256, URI</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.CAA">
            <summary>Resource record CAA = 257, Certification Authority Restriction</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.TA">
            <summary>Resource record TA = 32768, DNSSEC Trust Authorities</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.DLV">
            <summary>Resource record DLV = 32769, DNSSEC Lookaside Validation</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSTypeCode.Unknown">
            Unknown record type.
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_A">
            <summary> A 1 Host address see RFC1035</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_A.Address">
            <summary>Address</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_A.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_A.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_A.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_A.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_A.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_A.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_A.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_NS">
            <summary> NS 2 Authoritative name server see RFC1035</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_NS.NSDNAME">
            <summary>NSDNAME</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_NS.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_NS.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_NS.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_NS.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_NS.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_NS.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_NS.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_MD">
            <summary> MD 3 Mail destination see RFC1035</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_MD.MADNAME">
            <summary>MADNAME</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_MD.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_MD.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_MD.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_MD.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_MD.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_MD.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_MD.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_MF">
            <summary> MF 4 Mail forwarder see RFC1035</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_MF.MADNAME">
            <summary>MADNAME</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_MF.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_MF.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_MF.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_MF.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_MF.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_MF.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_MF.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_CNAME">
            <summary> CNAME 5 Canonical name for an alias see RFC1035</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_CNAME.CNAME">
            <summary>CNAME</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_CNAME.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_CNAME.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_CNAME.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_CNAME.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_CNAME.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_CNAME.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_CNAME.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_SOA">
            <summary> SOA 6 Start of a zone of authority see RFC1035</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_SOA.MNAME">
            <summary>MNAME</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_SOA.RNAME">
            <summary>RNAME</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_SOA.SERIAL">
            <summary>SERIAL</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_SOA.REFRESH">
            <summary>REFRESH</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_SOA.RETRY">
            <summary>RETRY</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_SOA.EXPIRE">
            <summary>EXPIRE</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_SOA.MINIMUM">
            <summary>MINIMUM</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_SOA.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_SOA.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_SOA.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_SOA.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_SOA.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_SOA.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_SOA.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_MB">
            <summary> MB 7 Mailbox domain name see RFC1035</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_MB.MadName">
            <summary>MadName</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_MB.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_MB.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_MB.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_MB.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_MB.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_MB.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_MB.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_MG">
            <summary> MG 8 Mail group member see RFC1035</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_MG.MGMNAME">
            <summary>MGMNAME</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_MG.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_MG.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_MG.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_MG.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_MG.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_MG.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_MG.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_MR">
            <summary> MR 9 Mail rename domain name see RFC1035</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_MR.NEWNAME">
            <summary>NEWNAME</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_MR.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_MR.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_MR.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_MR.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_MR.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_MR.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_MR.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_NULL">
            <summary> NULL 10 Null RR see RFC1035</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_NULL.Anything">
            <summary>Anything</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_NULL.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_NULL.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_NULL.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_NULL.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_NULL.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_NULL.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_NULL.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_WKS">
            <summary> WKS 11 Well known service description see RFC1035</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_WKS.Address">
            <summary>Address</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_WKS.Protocol">
            <summary>Protocol</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_WKS.BITMAP">
            <summary>BITMAP</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_WKS.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_WKS.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_WKS.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_WKS.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_WKS.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_WKS.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_WKS.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_PTR">
            <summary> PTR 12 Domain name pointer see RFC1035</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_PTR.PTRDNAME">
            <summary>PTRDNAME</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_PTR.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_PTR.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_PTR.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_PTR.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_PTR.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_PTR.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_PTR.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_HINFO">
            <summary> HINFO 13 Host information see RFC1035</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_HINFO.CPU">
            <summary>CPU</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_HINFO.OS">
            <summary>OS</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_HINFO.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_HINFO.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_HINFO.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_HINFO.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_HINFO.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_HINFO.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_HINFO.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_MINFO">
            <summary> MINFO 14 Mailbox or mail list information see RFC1035</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_MINFO.RMAILBX">
            <summary>RMAILBX</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_MINFO.EMAILBX">
            <summary>EMAILBX</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_MINFO.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_MINFO.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_MINFO.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_MINFO.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_MINFO.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_MINFO.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_MINFO.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_MX">
            <summary> MX 15 Mail exchange see RFC1035</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_MX.Preference">
            <summary>Preference</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_MX.Exchange">
            <summary>Exchange</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_MX.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_MX.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_MX.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_MX.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_MX.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_MX.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_MX.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_TXT">
            <summary> TXT 16 Text strings see RFC1035</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_TXT.Text">
            <summary>Text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_TXT.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_TXT.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_TXT.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_TXT.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_TXT.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_TXT.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_TXT.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_RP">
            <summary> RP 17 Responsible Person see RFC1183</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_RP.MBox">
            <summary>MBox</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_RP.Txt">
            <summary>Txt</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_RP.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_RP.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_RP.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_RP.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_RP.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_RP.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_RP.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_AFSDB">
            <summary> AFSDB 18 AFS Data Base location see RFC1183,RFC5864</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_AFSDB.SubType">
            <summary>SubType</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_AFSDB.HostName">
            <summary>HostName</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_AFSDB.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_AFSDB.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_AFSDB.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_AFSDB.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_AFSDB.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_AFSDB.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_AFSDB.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_X25">
            <summary> X25 19 X.25 PSDN address see RFC1183</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_X25.PSDN">
            <summary>PSDN</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_X25.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_X25.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_X25.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_X25.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_X25.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_X25.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_X25.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_ISDN">
            <summary> ISDN 20 ISDN address see RFC1183</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_ISDN.ISDN">
            <summary>ISDN</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_ISDN.SA">
            <summary>SA</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_ISDN.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_ISDN.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_ISDN.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_ISDN.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_ISDN.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_ISDN.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_ISDN.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_RT">
            <summary> RT 21 Route Through see RFC1183</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_RT.Preference">
            <summary>Preference</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_RT.Exchange">
            <summary>Exchange</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_RT.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_RT.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_RT.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_RT.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_RT.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_RT.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_RT.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_SIG">
            <summary> SIG 24 Security signature see RFC2535</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_SIG.TypeCovered">
            <summary>TypeCovered</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_SIG.Algorithm">
            <summary>Algorithm</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_SIG.Labels">
            <summary>Labels</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_SIG.OriginalTTL">
            <summary>OriginalTTL</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_SIG.SignatureExpiration">
            <summary>SignatureExpiration</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_SIG.SignatureInception">
            <summary>SignatureInception</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_SIG.KeyTag">
            <summary>KeyTag</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_SIG.SignersName">
            <summary>SignersName</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_SIG.Signature">
            <summary>Signature</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_SIG.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_SIG.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_SIG.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_SIG.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_SIG.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_SIG.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_SIG.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_KEY">
            <summary> KEY 25 Security key see RFC2535</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_KEY.Flags">
            <summary>Flags</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_KEY.Protocol">
            <summary>Protocol</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_KEY.Algorithm">
            <summary>Algorithm</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_KEY.PublicKey">
            <summary>PublicKey</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_KEY.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_KEY.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_KEY.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_KEY.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_KEY.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_KEY.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_KEY.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_AAAA">
            <summary> AAAA 28 IP6 Address see RFC3596</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_AAAA.Address">
            <summary>Address</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_AAAA.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_AAAA.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_AAAA.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_AAAA.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_AAAA.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_AAAA.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_AAAA.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_SRV">
            <summary> SRV 33 Server Selection see RFC2782</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_SRV.Priority">
            <summary>Priority</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_SRV.Weight">
            <summary>Weight</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_SRV.Port">
            <summary>Port</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_SRV.Target">
            <summary>Target</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_SRV.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_SRV.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_SRV.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_SRV.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_SRV.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_SRV.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_SRV.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_NAPTR">
            <summary> NAPTR 35 Naming Authority Pointer see RFC2915,RFC2168,RFC3403</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_NAPTR.Order">
            <summary>Order</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_NAPTR.Preference">
            <summary>Preference</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_NAPTR.Flags">
            <summary>Flags</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_NAPTR.Services">
            <summary>Services</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_NAPTR.Regexp">
            <summary>Regexp</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_NAPTR.Replacement">
            <summary>Replacement</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_NAPTR.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_NAPTR.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_NAPTR.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_NAPTR.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_NAPTR.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_NAPTR.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_NAPTR.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_KX">
            <summary> KX 36 Key Exchanger see RFC2230</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_KX.Preference">
            <summary>Preference</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_KX.Exchange">
            <summary>Exchange</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_KX.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_KX.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_KX.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_KX.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_KX.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_KX.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_KX.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_CERT">
            <summary> CERT 37 CERT see RFC4398</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_CERT.Type">
            <summary>Type</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_CERT.KeyTag">
            <summary>KeyTag</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_CERT.Algorithm">
            <summary>Algorithm</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_CERT.Certificate">
            <summary>Certificate</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_CERT.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_CERT.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_CERT.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_CERT.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_CERT.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_CERT.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_CERT.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_DNAME">
            <summary> DNAME 39 DNAME see RFC6672</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_DNAME.Target">
            <summary>Target</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_DNAME.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_DNAME.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_DNAME.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_DNAME.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_DNAME.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_DNAME.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_DNAME.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_OPT">
            <summary> OPT 41 OPT see RFC2671,RFC3225</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_OPT.Options">
            <summary>Options</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_OPT.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_OPT.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_OPT.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_OPT.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_OPT.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_OPT.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_OPT.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_DS">
            <summary> DS 43 Delegation Signer see RFC4034,RFC3658</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_DS.KeyTag">
            <summary>KeyTag</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_DS.Algorithm">
            <summary>Algorithm</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_DS.DigestType">
            <summary>DigestType</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_DS.Digest">
            <summary>Digest</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_DS.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_DS.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_DS.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_DS.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_DS.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_DS.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_DS.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_SSHFP">
            <summary> SSHFP 44 SSH Key Fingerprint see RFC4255</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_SSHFP.Algorithm">
            <summary>Algorithm</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_SSHFP.FPType">
            <summary>FPType</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_SSHFP.Fingerprint">
            <summary>Fingerprint</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_SSHFP.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_SSHFP.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_SSHFP.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_SSHFP.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_SSHFP.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_SSHFP.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_SSHFP.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_IPSECKEY">
            <summary> IPSECKEY 45 IPSECKEY see RFC4025</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_IPSECKEY.Precedence">
            <summary>Precedence</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_IPSECKEY.GatewayType">
            <summary>GatewayType</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_IPSECKEY.Algorithm">
            <summary>Algorithm</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_IPSECKEY.Gateway">
            <summary>Gateway</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_IPSECKEY.PublicKey">
            <summary>PublicKey</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_IPSECKEY.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_IPSECKEY.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_IPSECKEY.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_IPSECKEY.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_IPSECKEY.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_IPSECKEY.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_IPSECKEY.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_RRSIG">
            <summary> RRSIG 46 RRSIG see RFC4034,RFC3755</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_RRSIG.TypeCovered">
            <summary>TypeCovered</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_RRSIG.Algorithm">
            <summary>Algorithm</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_RRSIG.Labels">
            <summary>Labels</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_RRSIG.OriginalTTL">
            <summary>OriginalTTL</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_RRSIG.SignatureExpiration">
            <summary>SignatureExpiration</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_RRSIG.SignatureInception">
            <summary>SignatureInception</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_RRSIG.KeyTag">
            <summary>KeyTag</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_RRSIG.SignersName">
            <summary>SignersName</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_RRSIG.Signature">
            <summary>Signature</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_RRSIG.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_RRSIG.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_RRSIG.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_RRSIG.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_RRSIG.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_RRSIG.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_RRSIG.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_NSEC">
            <summary> NSEC 47 NSEC see RFC4034,RFC3755</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_NSEC.NextDomain">
            <summary>NextDomain</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_NSEC.TypeBitMaps">
            <summary>TypeBitMaps</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_NSEC.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_NSEC.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_NSEC.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_NSEC.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_NSEC.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_NSEC.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_NSEC.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_DNSKEY">
            <summary> DNSKEY 48 DNSKEY see RFC4034,RFC3755</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_DNSKEY.Flags">
            <summary>Flags</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_DNSKEY.Protocol">
            <summary>Protocol</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_DNSKEY.Algorithm">
            <summary>Algorithm</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_DNSKEY.PublicKey">
            <summary>PublicKey</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_DNSKEY.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_DNSKEY.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_DNSKEY.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_DNSKEY.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_DNSKEY.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_DNSKEY.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_DNSKEY.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_DHCID">
            <summary> DHCID 49 DHCID see RFC4701</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_DHCID.Identifier">
            <summary>Identifier</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_DHCID.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_DHCID.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_DHCID.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_DHCID.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_DHCID.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_DHCID.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_DHCID.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_NSEC3">
            <summary> NSEC3 50 NSEC3 see RFC5155</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_NSEC3.HashAlgorithm">
            <summary>HashAlgorithm</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_NSEC3.Flags">
            <summary>Flags</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_NSEC3.Iterations">
            <summary>Iterations</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_NSEC3.Salt">
            <summary>Salt</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_NSEC3.NextHashedOwnerName">
            <summary>NextHashedOwnerName</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_NSEC3.TypeBitMaps">
            <summary>TypeBitMaps</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_NSEC3.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_NSEC3.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_NSEC3.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_NSEC3.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_NSEC3.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_NSEC3.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_NSEC3.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_NSEC3PARAM">
            <summary> NSEC3PARAM 51 NSEC3PARAM see RFC5155</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_NSEC3PARAM.HashAlgorithm">
            <summary>HashAlgorithm</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_NSEC3PARAM.Flags">
            <summary>Flags</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_NSEC3PARAM.Iterations">
            <summary>Iterations</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_NSEC3PARAM.Salt">
            <summary>Salt</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_NSEC3PARAM.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_NSEC3PARAM.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_NSEC3PARAM.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_NSEC3PARAM.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_NSEC3PARAM.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_NSEC3PARAM.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_NSEC3PARAM.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_TLSA">
            <summary> TLSA 52 TLSA see RFC6698</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_TLSA.CertificateUsage">
            <summary>CertificateUsage</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_TLSA.Selector">
            <summary>Selector</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_TLSA.MatchingType">
            <summary>MatchingType</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_TLSA.Certificate">
            <summary>Certificate</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_TLSA.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_TLSA.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_TLSA.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_TLSA.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_TLSA.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_TLSA.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_TLSA.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_SPF">
            <summary> SPF 99 Sender Policy Framework see RFC4408</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_SPF.Text">
            <summary>Text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_SPF.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_SPF.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_SPF.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_SPF.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_SPF.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_SPF.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_SPF.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_NID">
            <summary> NID 104  see RFC6742</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_NID.Preference">
            <summary>Preference</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_NID.NodeID">
            <summary>NodeID</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_NID.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_NID.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_NID.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_NID.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_NID.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_NID.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_NID.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_L32">
            <summary> L32 105  see RFC6742</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_L32.Preference">
            <summary>Preference</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_L32.Locator">
            <summary>Locator</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_L32.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_L32.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_L32.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_L32.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_L32.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_L32.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_L32.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_L64">
            <summary> L64 106  see RFC6742</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_L64.Preference">
            <summary>Preference</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_L64.Locator">
            <summary>Locator</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_L64.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_L64.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_L64.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_L64.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_L64.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_L64.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_L64.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_LP">
            <summary> LP 107  see RFC6742</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_LP.Preference">
            <summary>Preference</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_LP.FQDN">
            <summary>FQDN</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_LP.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_LP.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_LP.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_LP.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_LP.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_LP.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_LP.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_TKEY">
            <summary> TKEY 249 Transaction Key see RFC2930</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_TKEY.Algorithm">
            <summary>Algorithm</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_TKEY.Inception">
            <summary>Inception</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_TKEY.Expiration">
            <summary>Expiration</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_TKEY.Mode">
            <summary>Mode</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_TKEY.Error">
            <summary>Error</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_TKEY.KeyData">
            <summary>KeyData</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_TKEY.OtherData">
            <summary>OtherData</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_TKEY.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_TKEY.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_TKEY.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_TKEY.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_TKEY.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_TKEY.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_TKEY.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_TSIG">
            <summary> TSIG 250 Transaction Signature see RFC2845</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_TSIG.Algorithm">
            <summary>Algorithm</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_TSIG.TimeSigned">
            <summary>TimeSigned</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_TSIG.Fudge">
            <summary>Fudge</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_TSIG.MAC">
            <summary>MAC</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_TSIG.OriginalID">
            <summary>OriginalID</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_TSIG.Error">
            <summary>Error</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_TSIG.OtherData">
            <summary>OtherData</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_TSIG.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_TSIG.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_TSIG.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_TSIG.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_TSIG.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_TSIG.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_TSIG.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_URI">
            <summary> URI 256 URI see Patrik_Faltstrom</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_URI.Priority">
            <summary>Priority</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_URI.Weight">
            <summary>Weight</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_URI.Target">
            <summary>Target</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_URI.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_URI.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_URI.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_URI.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_URI.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_URI.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_URI.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_CAA">
            <summary> CAA 257 Certification Authority Restriction see RFC-ietf-pkix-caa-15</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_CAA.Flags">
            <summary>Flags</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_CAA.Tag">
            <summary>Tag</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_CAA.Value">
            <summary>Value</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_CAA.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_CAA.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_CAA.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_CAA.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_CAA.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_CAA.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_CAA.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_TA">
            <summary> TA 32768 DNSSEC Trust Authorities see Sam_Weiler</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_TA.KeyTag">
            <summary>KeyTag</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_TA.Algorithm">
            <summary>Algorithm</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_TA.DigestType">
            <summary>DigestType</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_TA.Digest">
            <summary>Digest</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_TA.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_TA.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_TA.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_TA.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_TA.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_TA.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_TA.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_DLV">
            <summary> DLV 32769 DNSSEC Lookaside Validation see RFC4431</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_DLV.KeyTag">
            <summary>KeyTag</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_DLV.Algorithm">
            <summary>Algorithm</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_DLV.DigestType">
            <summary>DigestType</summary>
        </member>
        <member name="F:Goedel.Discovery.DNSRecord_DLV.Digest">
            <summary>Digest</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_DLV.Code">
            <summary>The type code</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_DLV.Label">
            <summary>The type text</summary>
        </member>
        <member name="P:Goedel.Discovery.DNSRecord_DLV.Description">
            <summary>Description</summary>	
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_DLV.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_DLV.Parse(Goedel.Discovery.Parse)">
            <summary>Parse record or query from string</summary>	
            <param name="Parse">Input data</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_DLV.Encode(Goedel.Discovery.DNSBufferIndex)">
            <summary>Convert to wire form</summary>
            <param name="Index">Output buffer</param>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_DLV.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from byte form buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="T:Goedel.Discovery.DNSRecord_Unknown">
            <summary>Unknown DNS record</summary>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_Unknown.Decode(Goedel.Discovery.DNSBufferIndex,System.Int32)">
            <summary>Decode record or query from buffer</summary>	
            <param name="Index">Input data</param>
            <param name="Length">Maximum amount of data to read</param>
            <returns>Parsed record.</returns>
        </member>
        <member name="M:Goedel.Discovery.DNSRecord_Unknown.Canonical">
            <summary>Convert to canonical form</summary>
            <returns>Canonical form of record data contents</returns>
        </member>
        <member name="T:Goedel.Discovery.DiscoveryException">
            <summary>
            Base class for protocol exceptions.
            </summary>
        </member>
        <member name="P:Goedel.Discovery.DiscoveryException.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Discovery.DiscoveryException.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Discovery.DiscoveryException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Discovery.DiscoveryException._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Discovery.DiscoveryException.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Discovery.BufferWriteOverflow">
            <summary>
            An attempt was made to write past the end of a buffer.
            </summary>
        </member>
        <member name="P:Goedel.Discovery.BufferWriteOverflow.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Discovery.BufferWriteOverflow.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Discovery.BufferWriteOverflow.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Discovery.BufferWriteOverflow._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static new global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Discovery.BufferWriteOverflow.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Discovery.BufferReadOverflow">
            <summary>
            An attempt was made to read past the end of a buffer.
            </summary>
        </member>
        <member name="P:Goedel.Discovery.BufferReadOverflow.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Discovery.BufferReadOverflow.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Discovery.BufferReadOverflow.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Discovery.BufferReadOverflow._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static new global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Discovery.BufferReadOverflow.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Discovery.LabelTooLong">
            <summary>
            A message contained a label longer than the permitted length
            </summary>
        </member>
        <member name="P:Goedel.Discovery.LabelTooLong.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Discovery.LabelTooLong.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Discovery.LabelTooLong.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Discovery.LabelTooLong._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static new global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Discovery.LabelTooLong.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Discovery.UnicodeNotSupported">
            <summary>
            Unicode labels are not supported
            </summary>
        </member>
        <member name="P:Goedel.Discovery.UnicodeNotSupported.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Discovery.UnicodeNotSupported.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Discovery.UnicodeNotSupported.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Discovery.UnicodeNotSupported._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static new global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Discovery.UnicodeNotSupported.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Discovery.IllegalCharacter">
            <summary>
            An illegal character was encountered
            </summary>
        </member>
        <member name="P:Goedel.Discovery.IllegalCharacter.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Discovery.IllegalCharacter.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Discovery.IllegalCharacter.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Discovery.IllegalCharacter._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static new global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Discovery.IllegalCharacter.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Discovery.TagTooLong">
            <summary>
            A message contained a tag longer than the permitted length
            </summary>
        </member>
        <member name="P:Goedel.Discovery.TagTooLong.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Discovery.TagTooLong.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Discovery.TagTooLong.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Discovery.TagTooLong._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static new global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Discovery.TagTooLong.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Discovery.InvalidIPv4">
            <summary>
            A message contained an invalid IPv4 address
            </summary>
        </member>
        <member name="P:Goedel.Discovery.InvalidIPv4.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Discovery.InvalidIPv4.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Discovery.InvalidIPv4.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Discovery.InvalidIPv4._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static new global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Discovery.InvalidIPv4.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Discovery.InvalidIPv6">
            <summary>
            A message contained an invalid IPv6 address
            </summary>
        </member>
        <member name="P:Goedel.Discovery.InvalidIPv6.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Discovery.InvalidIPv6.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Discovery.InvalidIPv6.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Discovery.InvalidIPv6._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static new global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Discovery.InvalidIPv6.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Discovery.NamespaceDoc">
            <summary>
            Provides a hook 
            </summary>
        </member>
        <member name="T:Goedel.Discovery.TokenType">
            <summary>DNS Token types</summary>
        </member>
        <member name="F:Goedel.Discovery.TokenType.EOF">
            <summary>End of file</summary>
        </member>
        <member name="F:Goedel.Discovery.TokenType.EOL">
            <summary>End of line</summary>
        </member>
        <member name="F:Goedel.Discovery.TokenType.Directive">
            <summary>Directive</summary>
        </member>
        <member name="F:Goedel.Discovery.TokenType.ALabel">
            <summary>ALabel</summary>
        </member>
        <member name="F:Goedel.Discovery.TokenType.DLabel">
            <summary>Domain Label</summary>
        </member>
        <member name="F:Goedel.Discovery.TokenType.Number">
            <summary>Integer</summary>
        </member>
        <member name="F:Goedel.Discovery.TokenType.Left">
            <summary>Left parethesis</summary>
        </member>
        <member name="F:Goedel.Discovery.TokenType.Right">
            <summary>Right parethesis</summary>
        </member>
        <member name="F:Goedel.Discovery.TokenType.At">
            <summary>Character @</summary>
        </member>
        <member name="F:Goedel.Discovery.TokenType.String">
            <summary>String value</summary>
        </member>
        <member name="F:Goedel.Discovery.TokenType.Literal">
            <summary>Literal value</summary>
        </member>
        <member name="F:Goedel.Discovery.TokenType.Unknown">
            <summary>Unknown value</summary>
        </member>
        <member name="T:Goedel.Discovery.CharType">
            <summary>Character groups</summary>
        </member>
        <member name="F:Goedel.Discovery.CharType.White">
            <summary>Whitespace</summary>
        </member>
        <member name="F:Goedel.Discovery.CharType.Digit">
            <summary>Digit</summary>
        </member>
        <member name="F:Goedel.Discovery.CharType.Lower">
            <summary>a-z</summary>
        </member>
        <member name="F:Goedel.Discovery.CharType.Upper">
            <summary>A-Z</summary>
        </member>
        <member name="F:Goedel.Discovery.CharType.Dot">
            <summary>.</summary>
        </member>
        <member name="F:Goedel.Discovery.CharType.Under">
            <summary>_</summary>
        </member>
        <member name="F:Goedel.Discovery.CharType.Dash">
            <summary>-</summary>
        </member>
        <member name="F:Goedel.Discovery.CharType.Quote">
            <summary>"</summary>
        </member>
        <member name="F:Goedel.Discovery.CharType.Dollar">
            <summary>$</summary>
        </member>
        <member name="F:Goedel.Discovery.CharType.Semi">
            <summary>;</summary>
        </member>
        <member name="F:Goedel.Discovery.CharType.Left">
            <summary>(</summary>
        </member>
        <member name="F:Goedel.Discovery.CharType.Right">
            <summary>)</summary>
        </member>
        <member name="F:Goedel.Discovery.CharType.Return">
            <summary>End of line</summary>
        </member>
        <member name="F:Goedel.Discovery.CharType.At">
            <summary>@</summary>
        </member>
        <member name="F:Goedel.Discovery.CharType.Backslash">
            <summary>\</summary>
        </member>
        <member name="F:Goedel.Discovery.CharType.Hash">
            <summary>#</summary>
        </member>
        <member name="F:Goedel.Discovery.CharType.Unknown">
            <summary>Other</summary>
        </member>
        <member name="T:Goedel.Discovery.Parse">
            <summary>Stub DNS parser class. Not currently implemented. 
            Could be the basis for a DNS config file parser.</summary>
        </member>
        <member name="M:Goedel.Discovery.Parse.#ctor(System.String)">
            <summary>Construct from specified string.</summary>
            <param name="Buffer">Input data to parse.</param>
        </member>
        <member name="M:Goedel.Discovery.Parse.Token(Goedel.Discovery.TokenType)">
            <summary>
            Get next input token
            </summary>
            <param name="TokenType">Type of parse token received.</param>
            <returns>The token value as a string.</returns>
        </member>
        <member name="M:Goedel.Discovery.Parse.Token(Goedel.Discovery.TokenType@)">
            <summary>
            Get next token after eliminating EOL tokens inside parenthesis blocks ( foo )
            and parenthesis block markers
            </summary>
            <param name="TokenType">The token type</param>
            <returns>The token received</returns>
        </member>
        <member name="M:Goedel.Discovery.Parse.RawToken(Goedel.Discovery.TokenType@)">
            <summary>
            Get next raw token (including parenthesis tokens)
            </summary>
            <param name="TokenType">The token type</param>
            <returns>The token received</returns>
        </member>
        <member name="M:Goedel.Discovery.Parse.DNSRecord">
            <summary>
            Get the next record
            </summary>
            <returns>The record received.</returns>
        </member>
        <member name="M:Goedel.Discovery.Parse.IPv4">
            <summary>Get IPv4Address</summary>
            <returns>The value returned</returns>
        </member>
        <member name="M:Goedel.Discovery.Parse.IPv6">
            <summary>Get IPv6Address</summary>
            <returns>The value returned</returns>
        </member>
        <member name="M:Goedel.Discovery.Parse.Domain">
            <summary>Get Domain name</summary>
            <returns>The value returned</returns>
        </member>
        <member name="M:Goedel.Discovery.Parse.Mail">
            <summary>Get Mail Address</summary>
            <returns>The value returned</returns>
        </member>
        <member name="M:Goedel.Discovery.Parse.NodeID">
            <summary>Get Node ID</summary>
            <returns>The value returned</returns>
        </member>
        <member name="M:Goedel.Discovery.Parse.Byte">
            <summary>Get Byte</summary>
            <returns>The value returned</returns>
        </member>
        <member name="M:Goedel.Discovery.Parse.Int16">
            <summary>Get Int16</summary>
            <returns>The value returned</returns>
        </member>
        <member name="M:Goedel.Discovery.Parse.Int32">
            <summary>Get Int32</summary>
            <returns>The value returned</returns>
        </member>
        <member name="M:Goedel.Discovery.Parse.Time32">
            <summary>Get Time32</summary>
            <returns>The value returned</returns>
        </member>
        <member name="M:Goedel.Discovery.Parse.Time48">
            <summary>Get Time48</summary>
            <returns>The value returned</returns>
        </member>
        <member name="M:Goedel.Discovery.Parse.String">
            <summary>Get String</summary>
            <returns>The value returned</returns>
        </member>
        <member name="M:Goedel.Discovery.Parse.OptionalString">
            <summary>Get Optional String</summary>
            <returns>The value returned</returns>
        </member>
        <member name="M:Goedel.Discovery.Parse.StringX">
            <summary>Get String with otherwise specified length</summary>
            <returns>The value returned</returns>
        </member>
        <member name="M:Goedel.Discovery.Parse.Strings">
            <summary>Get multiple strings</summary>
            <returns>The value returned</returns>
        </member>
        <member name="M:Goedel.Discovery.Parse.Binary">
            <summary>Get Binary data</summary>
            <returns>The value returned</returns>
        </member>
        <member name="M:Goedel.Discovery.Parse.Binary8">
            <summary>Get Binary data with 8 bit length value</summary>
            <returns>The value returned</returns>
        </member>
        <member name="M:Goedel.Discovery.Parse.Binary16">
            <summary>Get Binary data with 16 bit length value</summary>
            <returns>The value returned</returns>
        </member>
        <member name="M:Goedel.Discovery.Parse.LBinary">
            <summary>Get Binary data with L production</summary>
            <returns>The value returned</returns>
        </member>
        <member name="M:Goedel.Discovery.Parse.Hex">
            <summary>Get Hex data</summary>
            <returns>The value returned</returns>>
        </member>
        <member name="M:Goedel.Discovery.Parse.Hex8">
            <summary>Get Hex data with 8 bit length value</summary>
            <returns>The value returned</returns>
        </member>
        <member name="M:Goedel.Discovery.Parse.Hex16">
            <summary>Get Hex data with 8 bit length value</summary>
            <returns>The value returned</returns>
        </member>
        <member name="T:Goedel.Discovery.Platform">
            <summary>
            Contains static links to delegates to perform platform specific
            operations not supported in the portable libraries. Delegates must 
            be bound before use.
            </summary>
        </member>
        <member name="T:Goedel.Discovery.ServiceDescription">
            <summary>
            Represents an Internet destination, this may be a single IPv4 or IPv6 
            address or a sequence of prioritized IP addresses.
            </summary>
        </member>
        <member name="F:Goedel.Discovery.ServiceDescription.Entries">
            <summary>The list of policy entries</summary>
        </member>
        <member name="F:Goedel.Discovery.ServiceDescription.SortedEntries">
            <summary>Sorted Array of policy entries</summary>
        </member>
        <member name="P:Goedel.Discovery.ServiceDescription.Default">
            <summary>The list of policy entries</summary>
        </member>
        <member name="P:Goedel.Discovery.ServiceDescription.Address">
            <summary>The target address for discovery</summary>
        </member>
        <member name="P:Goedel.Discovery.ServiceDescription.Service">
            <summary>The service being discovered</summary>
        </member>
        <member name="P:Goedel.Discovery.ServiceDescription.Prefix">
            <summary>The service prefix</summary>
        </member>
        <member name="P:Goedel.Discovery.ServiceDescription.ServiceAddress">
            <summary>The service address being discovered</summary>
        </member>
        <member name="P:Goedel.Discovery.ServiceDescription.DefaultPath">
            <summary>The default path for the Web Service Endpoint</summary>
        </member>
        <member name="P:Goedel.Discovery.ServiceDescription.TXT">
            <summary>Text policy records</summary>
        </member>
        <member name="M:Goedel.Discovery.ServiceDescription.Next">
            <summary>Returns the next service entry</summary>
            <returns>The next service entry.</returns>
        </member>
        <member name="M:Goedel.Discovery.ServiceDescription.#ctor(System.String,System.String)">
            <summary>
            Standard constructor, used for when policy description data is found
            </summary>
            <param name="address">DNS address of service</param>
            <param name="service">Service identifier (without decorations)</param>
        </member>
        <member name="M:Goedel.Discovery.ServiceDescription.#ctor(System.String,System.String,System.Nullable{System.Int32},Goedel.Discovery.DNSFallback)">
            <summary>
            Fallback constructor, construct entry with no policy information.
            </summary>
            <param name="address">DNS address of service</param>
            <param name="service">Service identifier (without decorations)</param>
            <param name="port">IP port number</param>
            <param name="fallback">Fallback mode for if no SRV record is found</param>
        </member>
        <member name="M:Goedel.Discovery.ServiceDescription.Fallback(System.Nullable{System.Int32},Goedel.Discovery.DNSFallback)">
            <summary>
            Fallback discovery for if no SRV records are found.
            </summary>
            <param name="port">IP port number</param>
            <param name="fallback">Fallback mode for if no SRV record is found</param>
        </member>
        <member name="M:Goedel.Discovery.ServiceDescription.Add(Goedel.Discovery.ServiceEntry)">
            <summary>
            Add a service entry. NB a service entry can only be attached to one
            description.
            </summary>
            <param name="serviceEntry">The service entry to add</param>
        </member>
        <member name="M:Goedel.Discovery.ServiceDescription.Sort">
            <summary>
            Sort the entries into order using the SRV weightings and priorities.
            </summary>
        </member>
        <member name="M:Goedel.Discovery.ServiceDescription.Fallback(System.String,System.String,Goedel.Discovery.DNSFallback)">
            <summary>
            Calculate fallback address if SRV resolution is not available
            </summary>
            <param name="address">The stem address</param>
            <param name="service">The IANA assigned service identifier. This is the actual
            identifier as assigned and not the SRV prefix formed from the identifier.</param>
            <param name="fallback">The fallback mode.</param>
            <returns>The constructed string</returns>
        </member>
        <member name="T:Goedel.Discovery.ServiceEntry">
            <summary>
            Represents an Internet destination, this may be a single IPv4 or IPv6 
            address or a sequence of prioritized IP addresses.
            </summary>
        </member>
        <member name="P:Goedel.Discovery.ServiceEntry.HostAddress">
            <summary>The prefixed Host address</summary>
        </member>
        <member name="P:Goedel.Discovery.ServiceEntry.Address">
            <summary>The DNS Address to resolve</summary>
        </member>
        <member name="P:Goedel.Discovery.ServiceEntry.Port">
            <summary>The port number to connect to</summary>
        </member>
        <member name="P:Goedel.Discovery.ServiceEntry.Priority">
            <summary>Priority of this service entry</summary>
        </member>
        <member name="P:Goedel.Discovery.ServiceEntry.Weight">
            <summary>Weight of this service entry</summary>
        </member>
        <member name="P:Goedel.Discovery.ServiceEntry.Path">
            <summary>URI path to connect to (will default to /.well-known/&lt;Service&gt;</summary>
        </member>
        <member name="P:Goedel.Discovery.ServiceEntry.TransportSecurity">
            <summary>Transport security setting</summary>
        </member>
        <member name="P:Goedel.Discovery.ServiceEntry.Transport">
            <summary>Transport setting</summary>
        </member>
        <member name="P:Goedel.Discovery.ServiceEntry.URI">
            <summary>Security policy URI</summary>
        </member>
        <member name="P:Goedel.Discovery.ServiceEntry.UDF">
            <summary>Security policy fingerprint</summary>
        </member>
        <member name="P:Goedel.Discovery.ServiceEntry.TXT">
            <summary>Text policy records</summary>
        </member>
        <member name="P:Goedel.Discovery.ServiceEntry.Flag">
            <summary>Internal flag used in the sorting algorithm to mark allocated entries. </summary>
        </member>
        <member name="P:Goedel.Discovery.ServiceEntry.ServiceDescription">
            <summary>The service description to which this entry is attached</summary>
        </member>
        <member name="P:Goedel.Discovery.ServiceEntry.HTTPEndpoint">
            <summary>Calculate the Web Service Endpoint for a HTTP binding</summary>
        </member>
        <member name="T:Goedel.Discovery.WebServiceEndpoint">
            <summary>
            Describes a service endpoint for HTTP and HTTPS transport.
            </summary>
        </member>
        <member name="M:Goedel.Discovery.WebServiceEndpoint.GetEndpoint(System.String,System.String,System.String,System.String)">
            <summary>
            Return a host endpoint to allow a client to access the service <paramref name="srv"/>
            at domain <paramref name="domain"/>.
            </summary>
            <param name="domain">Service name.</param>
            <param name="wellKnown">Protocol identifier.</param>
            <param name="srv">DNS protocol identifier.</param>
            <param name="instance">Optional instance used to identify a sepcific instance
            of the service on a host.</param>
            <returns>The service endpoint.</returns>
        </member>
    </members>
</doc>
