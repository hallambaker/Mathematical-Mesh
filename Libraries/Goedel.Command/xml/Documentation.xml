<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Goedel.Command</name>
    </assembly>
    <members>
        <member name="T:Goedel.Command.HandleDelegate">
            <summary>
            Delegate calling a dispatch routine.
            </summary>
            <param name="Dispatch">The command description.</param>
            <param name="args">The set of arguments.</param>
            <param name="index">The first unparsed argument.</param>
        </member>
        <member name="T:Goedel.Command.CommandLineInterpreterBase">
            <summary>
            Base class for command line interpreters
            </summary>
        </member>
        <member name="P:Goedel.Command.CommandLineInterpreterBase.FlagIndicator">
            <summary>The default flag indicator for display to terminal, this is a forward slash / for Windows
            and a double dash -- for UNIX.</summary>
        </member>
        <member name="M:Goedel.Command.CommandLineInterpreterBase.Brief(System.String,Goedel.Command.DescribeCommandEntry,System.Collections.Generic.SortedDictionary{System.String,Goedel.Command.DescribeCommand},System.IO.TextWriter)">
            <summary>
            Provide the summary of a command set
            </summary>
            <param name="DefaultCommand">The description of the default command.</param>
            <param name="Description">The command description</param>
            <param name="Entries">The command entries</param>
            <param name="Output">The output stream (defaults to Console)</param>
        </member>
        <member name="M:Goedel.Command.CommandLineInterpreterBase.ProcessOptions(System.String[],System.Int32,Goedel.Command.Dispatch)">
            <summary>
            Process command options.
            </summary>
            <param name="Args">The command line arguments.</param>
            <param name="Index">The first unparsed argument.</param>
            <param name="Options">The option values to set.</param>
        </member>
        <member name="M:Goedel.Command.CommandLineInterpreterBase.DescribeValues(Goedel.Command.Dispatch)">
            <summary>
            Describe the values in an command.
            </summary>
            <param name="Dispatch">The command to describe.</param>
        </member>
        <member name="M:Goedel.Command.CommandLineInterpreterBase.IsFlagged(System.String)">
            <summary>
            Return true iff the text value is flagged.
            </summary>
            <param name="Text">Text to test.</param>
            <returns>Result of the test.</returns>
        </member>
        <member name="M:Goedel.Command.CommandLineInterpreterBase.Dispatcher(System.Collections.Generic.SortedDictionary{System.String,Goedel.Command.DescribeCommand},Goedel.Command.DescribeCommandEntry,Goedel.Command.DispatchShell,System.String[],System.Int32)">
            <summary>
            The main dispatch point
            </summary>
            <param name="Entries">Dictionary describing the shell commands and dispatchers.</param>
            <param name="DefaultCommand">The default command entry</param>
            <param name="Dispatch">The command description.</param>
            <param name="Args">The set of arguments.</param>
            <param name="Index">The first unparsed argument.</param>
        </member>
        <member name="T:Goedel.Command.DescribeEntry">
            <summary>
            Describe a command or parameter entry 
            </summary>
        </member>
        <member name="P:Goedel.Command.DescribeEntry.Identifier">
            <summary>The identifier name.</summary>
        </member>
        <member name="P:Goedel.Command.DescribeEntry.Brief">
            <summary>Brief description</summary>
        </member>
        <member name="P:Goedel.Command.DescribeEntry.Default">
            <summary>The default value (if specified)</summary>
        </member>
        <member name="P:Goedel.Command.DescribeEntry.Key">
            <summary>The command line key.</summary>
        </member>
        <member name="P:Goedel.Command.DescribeEntry.Index">
            <summary>The position in the options array.</summary>
        </member>
        <member name="T:Goedel.Command.DescribeCommand">
            <summary>
            Describe a command set.
            </summary>
        </member>
        <member name="F:Goedel.Command.DescribeCommand.IsDefault">
            <summary>If true, this is the default command.</summary>
        </member>
        <member name="M:Goedel.Command.DescribeCommand.Describe(System.Char,System.IO.TextWriter,System.Boolean)">
            <summary>
            Describe the command set.
            </summary>
            <param name="FlagIndicator">The flag indicator to use when printing the description.</param>
            <param name="Output">The output stream (defaults to Console)</param>
            <param name="PrefixCommands">If true, prefix command tags with the flag.</param>
        </member>
        <member name="T:Goedel.Command.DescribeCommandEntry">
            <summary>
            Describe a command entry
            </summary>
        </member>
        <member name="P:Goedel.Command.DescribeCommandEntry.HandleDelegate">
            <summary>Delegate to dispatch if command is selected.</summary>
        </member>
        <member name="P:Goedel.Command.DescribeCommandEntry.Lazy">
            <summary>If true perform lezy evaluation of parameters.</summary>
        </member>
        <member name="P:Goedel.Command.DescribeCommandEntry.Entries">
            <summary>The command entries.</summary>
        </member>
        <member name="M:Goedel.Command.DescribeCommandEntry.GetDefault(System.String)">
            <summary>
            Get the default for the value.
            </summary>
            <param name="Tag">The tag text</param>
            <returns>The default value if it exists, null otherwise.</returns>
        </member>
        <member name="M:Goedel.Command.DescribeCommandEntry.SetDefault(System.String,System.String)">
            <summary>
            Set the default value for the tag
            </summary>
            <param name="Tag">The tag text</param>
            <param name="Default">The value to set as the default.</param>
        </member>
        <member name="M:Goedel.Command.DescribeCommandEntry.Describe(System.Char,System.IO.TextWriter,System.Boolean)">
            <summary>
            Describe the command to the console.
            </summary>
            <param name="FlagIndicator">The flag indicator to use in display.</param>
            <param name="Output">The output stream (defaults to Console)</param>
            <param name="PrefixCommands">If true, add prefix to command descriptions</param>
        </member>
        <member name="T:Goedel.Command.DescribeCommandSet">
            <summary>
            Describe a command set.
            </summary>
        </member>
        <member name="F:Goedel.Command.DescribeCommandSet.Entries">
            <summary>Dictionary of command entries.</summary>
        </member>
        <member name="M:Goedel.Command.DescribeCommandSet.Describe(System.Char,System.IO.TextWriter,System.Boolean)">
            <summary>
            Describe the command set to the console.
            </summary>
            <param name="FlagIndicator">The flag indicator to use in display.</param>
            <param name="Output">The output stream (defaults to Console)</param>
            <param name="PrefixCommands">If true, add prefix to command descriptions</param>
        </member>
        <member name="T:Goedel.Command.DescribeEntryValue">
            <summary>
            Describe an entry value.
            </summary>
        </member>
        <member name="T:Goedel.Command.DescribeEntryOption">
            <summary>
            Describe an option value.
            </summary>
        </member>
        <member name="T:Goedel.Command.DescribeEntryParameter">
            <summary>
            Describe a parameter value.
            </summary>
        </member>
        <member name="T:Goedel.Command.DescribeEntryEnumerate">
            <summary>
            Describe a parameter value.
            </summary>
        </member>
        <member name="P:Goedel.Command.DescribeEntryEnumerate.Entries">
            <summary>The command entries.</summary>
        </member>
        <member name="T:Goedel.Command.DescribeCase">
            <summary>
            Describe an entry value.
            </summary>
        </member>
        <member name="F:Goedel.Command.DescribeCase.Value">
            <summary>The index value</summary>
        </member>
        <member name="T:Goedel.Command.DispatchShell">
            <summary>
            Describe a shell.
            </summary>
        </member>
        <member name="M:Goedel.Command.DispatchShell._PreProcess(Goedel.Command.Dispatch)">
            <summary>
            Method called before acommand is dispatched.
            </summary>
            <param name="dispatch">The options for the command dispatched.</param>
        </member>
        <member name="T:Goedel.Command.CommandLex">
            <summary>
            Lexical analyzer for command line parsing.
            </summary>
        </member>
        <member name="M:Goedel.Command.CommandLex.#ctor(Goedel.FSR.LexReader)">
            <summary>
            Create and initialize a lexical analyzer.
            </summary>
            <param name="Reader">The input source.</param>
        </member>
        <member name="M:Goedel.Command.CommandLex.#ctor(System.IO.Stream)">
            <summary>
            Create and initialize a lexical analyzer.
            </summary>
            <param name="Stream">The input source.</param>
        </member>
        <member name="M:Goedel.Command.CommandLex.#ctor(System.IO.TextReader)">
            <summary>
            Create and initialize a lexical analyzer.
            </summary>
            <param name="TextReader">The input source.</param>
        </member>
        <member name="P:Goedel.Command.CommandLex.CharacterMappings">
            <summary>
            Maps characters to character sets
            </summary>
        </member>
        <member name="P:Goedel.Command.CommandLex.CompressedTransitions">
            <summary>
            State transitions in response to character set
            </summary>
        </member>
        <member name="M:Goedel.Command.CommandLex.GetToken(Goedel.Command.CommandLex.State)">
            <summary>
            Get the next token from the stream
            </summary>
            <param name="StartState">The initial starting state</param>
            <returns>The token detected or -1 if an error occurred</returns>
        </member>
        <member name="M:Goedel.Command.CommandLex.GetToken">
            <summary>
            Get the next token from the stream
            </summary>
            <returns>The token detected or -1 if an error occurred</returns>
        </member>
        <member name="T:Goedel.Command.CommandLex.State">
            <summary>State types</summary>
        </member>
        <member name="F:Goedel.Command.CommandLex.State.ItemStart">
            <summary>ItemStart</summary>
        </member>
        <member name="F:Goedel.Command.CommandLex.State.IsValue">
            <summary>IsValue</summary>
        </member>
        <member name="F:Goedel.Command.CommandLex.State.StartFlag">
            <summary>StartFlag</summary>
        </member>
        <member name="F:Goedel.Command.CommandLex.State.IsFlag">
            <summary>IsFlag</summary>
        </member>
        <member name="F:Goedel.Command.CommandLex.State.IsFlagN">
            <summary>IsFlagN</summary>
        </member>
        <member name="F:Goedel.Command.CommandLex.State.IsFlagNo">
            <summary>IsFlagNo</summary>
        </member>
        <member name="F:Goedel.Command.CommandLex.State.StartFlagValue">
            <summary>StartFlagValue</summary>
        </member>
        <member name="F:Goedel.Command.CommandLex.State.IsFlagValue">
            <summary>IsFlagValue</summary>
        </member>
        <member name="F:Goedel.Command.CommandLex.State.Fail">
            <summary>Fail</summary>
        </member>
        <member name="T:Goedel.Command.CommandLex.Token">
            <summary>Token Types</summary>
        </member>
        <member name="F:Goedel.Command.CommandLex.Token.INVALID">
            <summary>Could not find a valid token.</summary>
        </member>
        <member name="F:Goedel.Command.CommandLex.Token.Empty">
            <summary>Empty</summary>
        </member>
        <member name="F:Goedel.Command.CommandLex.Token.Value">
            <summary>Value</summary>
        </member>
        <member name="F:Goedel.Command.CommandLex.Token.Flag">
            <summary>Flag</summary>
        </member>
        <member name="F:Goedel.Command.CommandLex.Token.FlagValue">
            <summary>FlagValue</summary>
        </member>
        <member name="F:Goedel.Command.CommandLex.Character_Mapping">
            <summary>Mapping of characters to character groups</summary>
        </member>
        <member name="M:Goedel.Command.CommandLex.Init">
            <summary>Generated initialization method, is called automatically 
            the FSR to reset </summary>
        </member>
        <member name="M:Goedel.Command.CommandLex.#ctor">
            <summary>
            Construct a parser to read from a string to be specified in GetToken (data)
            </summary>
        </member>
        <member name="M:Goedel.Command.CommandLex.GetToken(System.String)">
            <summary>
            Parse the specified string. Note, this is only valid if no LexReader
            was specified in the constructor.
            </summary>
            <param name="Data">The data to parse</param>
            <returns>The token value.</returns>
        </member>
        <member name="P:Goedel.Command.CommandLex.Value">
            <summary>
            Return the resulting string value
            </summary>
        </member>
        <member name="P:Goedel.Command.CommandLex.Flag">
            <summary>
            Return the resulting string value
            </summary>
        </member>
        <member name="P:Goedel.Command.CommandLex.Not">
            <summary>
            If true, flag was negated.
            </summary>
        </member>
        <member name="M:Goedel.Command.CommandLex.Reset">
            <summary>
            Reset the value buffers to start a new parse.
            </summary>
        </member>
        <member name="M:Goedel.Command.CommandLex.Reset(System.Int32)">
            <summary>
            Reset the value buffers to start a new parse.
            </summary>
            <param name="c">The character read</param>
        </member>
        <member name="M:Goedel.Command.CommandLex.Ignore(System.Int32)">
            <summary>
            Do nothing
            </summary>
            <param name="c">The character read</param>
        </member>
        <member name="M:Goedel.Command.CommandLex.AddValue(System.Int32)">
            <summary>
            Add a character to the value buffer
            </summary>
            <param name="c">The character read</param>
        </member>
        <member name="M:Goedel.Command.CommandLex.AddFlag(System.Int32)">
            <summary>
            Add a character to the flag buffer
            </summary>
            <param name="c">The character read</param>
        </member>
        <member name="M:Goedel.Command.CommandLex.AddFlagN(System.Int32)">
            <summary>
            N of possible NO flag
            </summary>
            <param name="c">The character read</param>
        </member>
        <member name="M:Goedel.Command.CommandLex.AddFlagNo(System.Int32)">
            <summary>
            O of possible NO flag
            </summary>
            <param name="c">The character read</param>
        </member>
        <member name="M:Goedel.Command.CommandLex.Abort(System.Int32)">
            <summary>
            Abort parsing, the command cannot be read.
            </summary>
            <param name="c">The character read</param>
        </member>
        <member name="T:Goedel.Command.CommandSplitLex">
            <summary>
            Split a command line into parts.
            </summary>
        </member>
        <member name="M:Goedel.Command.CommandSplitLex.#ctor(Goedel.FSR.LexReader)">
            <summary>
            Create and initialize a lexical analyzer.
            </summary>
            <param name="Reader">The input source.</param>
        </member>
        <member name="M:Goedel.Command.CommandSplitLex.#ctor(System.IO.Stream)">
            <summary>
            Create and initialize a lexical analyzer.
            </summary>
            <param name="Stream">The input source.</param>
        </member>
        <member name="M:Goedel.Command.CommandSplitLex.#ctor(System.IO.TextReader)">
            <summary>
            Create and initialize a lexical analyzer.
            </summary>
            <param name="TextReader">The input source.</param>
        </member>
        <member name="P:Goedel.Command.CommandSplitLex.CharacterMappings">
            <summary>
            Maps characters to character sets
            </summary>
        </member>
        <member name="P:Goedel.Command.CommandSplitLex.CompressedTransitions">
            <summary>
            State transitions in response to character set
            </summary>
        </member>
        <member name="M:Goedel.Command.CommandSplitLex.GetToken(Goedel.Command.CommandSplitLex.State)">
            <summary>
            Get the next token from the stream
            </summary>
            <param name="StartState">The initial starting state</param>
            <returns>The token detected or -1 if an error occurred</returns>
        </member>
        <member name="M:Goedel.Command.CommandSplitLex.GetToken">
            <summary>
            Get the next token from the stream
            </summary>
            <returns>The token detected or -1 if an error occurred</returns>
        </member>
        <member name="T:Goedel.Command.CommandSplitLex.State">
            <summary>State types</summary>
        </member>
        <member name="F:Goedel.Command.CommandSplitLex.State.ItemStart">
            <summary>ItemStart</summary>
        </member>
        <member name="F:Goedel.Command.CommandSplitLex.State.StartQuoted">
            <summary>StartQuoted</summary>
        </member>
        <member name="F:Goedel.Command.CommandSplitLex.State.Quoted">
            <summary>Quoted</summary>
        </member>
        <member name="F:Goedel.Command.CommandSplitLex.State.QuotedQuote">
            <summary>QuotedQuote</summary>
        </member>
        <member name="F:Goedel.Command.CommandSplitLex.State.QuotedEscape">
            <summary>QuotedEscape</summary>
        </member>
        <member name="F:Goedel.Command.CommandSplitLex.State.QuotedEscapeReturn">
            <summary>QuotedEscapeReturn</summary>
        </member>
        <member name="F:Goedel.Command.CommandSplitLex.State.Unquoted">
            <summary>Unquoted</summary>
        </member>
        <member name="F:Goedel.Command.CommandSplitLex.State.UnquotedQuote">
            <summary>UnquotedQuote</summary>
        </member>
        <member name="F:Goedel.Command.CommandSplitLex.State.UnquotedEscape">
            <summary>UnquotedEscape</summary>
        </member>
        <member name="F:Goedel.Command.CommandSplitLex.State.UnquotedEscapeReturn">
            <summary>UnquotedEscapeReturn</summary>
        </member>
        <member name="T:Goedel.Command.CommandSplitLex.Token">
            <summary>Token Types</summary>
        </member>
        <member name="F:Goedel.Command.CommandSplitLex.Token.INVALID">
            <summary>Could not find a valid token.</summary>
        </member>
        <member name="F:Goedel.Command.CommandSplitLex.Token.Empty">
            <summary>Empty</summary>
        </member>
        <member name="F:Goedel.Command.CommandSplitLex.Token.Value">
            <summary>Value</summary>
        </member>
        <member name="F:Goedel.Command.CommandSplitLex.Character_Mapping">
            <summary>Mapping of characters to character groups</summary>
        </member>
        <member name="M:Goedel.Command.CommandSplitLex.Init">
            <summary>Generated initialization method, is called automatically 
            the FSR to reset </summary>
        </member>
        <member name="M:Goedel.Command.CommandSplitLex.Split(System.String)">
            <summary>
            Split a commandline into entries.
            </summary>
            <param name="Text">The command line to split.</param>
            <returns>The command line split into entries.</returns>
        </member>
        <member name="M:Goedel.Command.CommandSplitLex.#ctor">
            <summary>
            Construct a parser to read from a string to be specified in GetToken (data)
            </summary>
        </member>
        <member name="M:Goedel.Command.CommandSplitLex.GetToken(System.String)">
            <summary>
            Parse the specified string. Note, this is only valid if no LexReader
            was specified in the constructor.
            </summary>
            <param name="Data">The string to parse.</param>
            <returns>The token value.</returns>
        </member>
        <member name="P:Goedel.Command.CommandSplitLex.Value">
            <summary>
            Return the resulting string value
            </summary>
        </member>
        <member name="M:Goedel.Command.CommandSplitLex.Reset">
            <summary>
            Reset the value buffers to start a new parse.
            </summary>
        </member>
        <member name="M:Goedel.Command.CommandSplitLex.AddParam(System.Int32)">
            <summary>
            Reset the value buffers to start a new parse.
            </summary>
            <param name="c">The character read</param>
        </member>
        <member name="M:Goedel.Command.CommandSplitLex.Ignore(System.Int32)">
            <summary>
            Do nothing
            </summary>
            <param name="c">The character read</param>
        </member>
        <member name="M:Goedel.Command.CommandSplitLex.BeginValue(System.Int32)">
            <summary>
            Start a quoted parameter, this can be null
            </summary>
            <param name="c">The character read</param>
        </member>
        <member name="M:Goedel.Command.CommandSplitLex.AddValue(System.Int32)">
            <summary>
            Add a character to the value buffer
            </summary>
            <param name="c">The character read</param>
        </member>
        <member name="M:Goedel.Command.CommandSplitLex.AddEscape(System.Int32)">
            <summary>
            Add a character to the value buffer
            </summary>
            <param name="c">The character read</param>
        </member>
        <member name="M:Goedel.Command.CommandSplitLex.AddEscapedValue(System.Int32)">
            <summary>
            Add a sequence of escape characters to the value buffer. If the final character is not
            a double quote, the escape characters are simply added. Otherwise, each pair of escape
            characters results in a single escape character and a double quote is added if the number
            of escape characters is odd.
            </summary>
            <param name="c">The character read</param>
        </member>
        <member name="T:Goedel.Command.Dispatch">
            <summary>Track start and end time of parse.</summary>
        </member>
        <member name="F:Goedel.Command.Dispatch.Started">
            <summary>Record start time.</summary>
        </member>
        <member name="P:Goedel.Command.Dispatch.Elapsed">
            <summary>Calculate elapsed time.</summary>
        </member>
        <member name="P:Goedel.Command.Dispatch._Data">
            <summary>Command type data</summary>
        </member>
        <member name="P:Goedel.Command.Dispatch.DescribeCommand">
            <summary>Command description</summary>
        </member>
        <member name="T:Goedel.Command.ParserException">
            <summary>
            The user command could not be parsed
            </summary>
        </member>
        <member name="P:Goedel.Command.ParserException.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Command.ParserException.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Command.ParserException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Command.ParserException._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Command.ParserException.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Command.FileReadError">
            <summary>
            The file could not be read.
            </summary>
        </member>
        <member name="P:Goedel.Command.FileReadError.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Command.FileReadError.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Command.FileReadError.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Command.FileReadError._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static new global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Command.FileReadError.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Command.UnknownCommand">
            <summary>
            User entered an unknown command
            </summary>
        </member>
        <member name="P:Goedel.Command.UnknownCommand.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Command.UnknownCommand.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Command.UnknownCommand.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Command.UnknownCommand._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static new global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Command.UnknownCommand.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Command.UnknownOption">
            <summary>
            User entered an unknown option
            </summary>
        </member>
        <member name="P:Goedel.Command.UnknownOption.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Command.UnknownOption.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Command.UnknownOption.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Command.UnknownOption._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static new global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Command.UnknownOption.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Command.NoCommand">
            <summary>
            No command specified
            </summary>
        </member>
        <member name="P:Goedel.Command.NoCommand.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Command.NoCommand.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Command.NoCommand.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Command.NoCommand._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static new global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Command.NoCommand.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Command.InvalidOption">
            <summary>
            The option value was incorrectly formatted
            </summary>
        </member>
        <member name="P:Goedel.Command.InvalidOption.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Command.InvalidOption.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Command.InvalidOption.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Command.InvalidOption._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static new global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Command.InvalidOption.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Command.EventExtensions">
            <summary>
            Extensions class defining logging events and convenience methods.
            </summary>
        </member>
        <member name="M:Goedel.Command.EventExtensions.#cctor">
            <summary>
            Static initializer, is called once when the module loads.
            </summary>
        </member>
        <member name="T:Goedel.Command.FileTools">
            <summary>
            Utility class for managing files.
            </summary>
        </member>
        <member name="M:Goedel.Command.FileTools.GetFileDateTime(System.String)">
            <summary>
            Get the time at which the specified file was created
            Return DateTime.MinValue if the file does not exist
            </summary>
            <param name="fileName">The file to test</param>
            <returns>The time the file was created.</returns>
        </member>
        <member name="M:Goedel.Command.FileTools.About">
            <summary>
            Write short form description of the current program to the console.
            </summary>
        </member>
        <member name="M:Goedel.Command.FileTools.UpToDate(System.String,System.String)">
            <summary>
            Cehck to see if a Destination file is more recent than a source file.
            </summary>
            <param name="source">The source file.</param>
            <param name="destination">The destination file.</param>
            <returns>True if the source was created before the destination.</returns>
        </member>
        <member name="M:Goedel.Command.FileTools.DefaultFile(System.String,System.String)">
            <summary>
            Determine output file name using command line entry and default data.
            </summary>
            <param name="extension">The default extension.</param>
            <param name="default">The base file name.</param>
            <returns>The defaulted output file.</returns>
        </member>
        <member name="M:Goedel.Command.FileTools.DefaultFile(System.String,System.String,System.String)">
            <summary>
            Determine output file name using command line entry and default data.
            </summary>
            <param name="specified">The specified file name. This will be returned as is
            unless it is null in which case the default filename will be used.</param>
            <param name="extension">The default extension.</param>
            <param name="Default">The base file name.</param>
            <returns>The defaulted output file.</returns>
        </member>
        <member name="M:Goedel.Command.FileTools.DefaultExtension(System.String,System.String)">
            <summary>
            Search for a file using specified extension if required.
            </summary>
            <param name="FileName">The base file name.</param>
            <param name="Extension">Default extension.</param>
            <returns>The defaulted file.</returns>
        </member>
        <member name="M:Goedel.Command.FileTools.DefaultOutput(System.String,System.String,System.String)">
            <summary>
            Calculate output file name.
            </summary>
            <param name="sourcePath">The source file path</param>
            <param name="destinatIonPath">The destination file path.</param>
            <param name="extension">The default extension.</param>
            <returns>The defaulted file name.</returns>
        </member>
        <member name="T:Goedel.Command.NamespaceDoc">
            <summary>
            Support routines for command line parsers defined using the PHB Command tool.
            </summary>
        </member>
        <member name="T:Goedel.Command.Type">
            <summary>Base class for Command line parser types. This could do with
            some decrufting to remove implementation artifacts.</summary>
        </member>
        <member name="P:Goedel.Command.Type.Text">
            <summary>The command line value.</summary>
        </member>
        <member name="P:Goedel.Command.Type.ByDefault">
            <summary>If true, the value was set by default</summary>
        </member>
        <member name="M:Goedel.Command.Type.ToString">
            <summary>
            Convert value to string.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="M:Goedel.Command.Type.Parameter(System.String)">
            <summary>
            Set parameter text.
            </summary>
            <param name="textIn">Text to set.</param>
        </member>
        <member name="M:Goedel.Command.Type.Default(System.String)">
            <summary>
            Set the default value for the type.
            </summary>
            <param name="textIn">The default value as it would be given on the command line.</param>
        </member>
        <member name="M:Goedel.Command.Type.Complete(Goedel.Command.Type[])">
            <summary>
            Completion routine. This is called at the end of parameter processing to finalize default values.
            </summary>
            <param name="data">The final data.</param>
        </member>
        <member name="M:Goedel.Command.Type.SetFlag(System.Boolean)">
            <summary>
            Set the flag value.
            </summary>
            <param name="negated">If true, flag is negated.</param>
        </member>
        <member name="T:Goedel.Command._Flag">
            <summary>
            Command line boolean type for flags.
            </summary>
        </member>
        <member name="P:Goedel.Command._Flag.Text">
            <summary>The canonical command line value.</summary>
        </member>
        <member name="M:Goedel.Command._Flag.#ctor(System.String)">
            <summary>
            Construct flag with specified value
            </summary>
            <param name="value">The flag value to set</param>
        </member>
        <member name="P:Goedel.Command._Flag.Value">
            <summary>
            The flag value.
            </summary>
        </member>
        <member name="M:Goedel.Command._Flag.Parameter(System.String)">
            <summary>
            Set tag value from parameter.
            </summary>
            <param name="text">The values true and 1 set a true value, 0 and false set a false value.
            Otherwise an exception is thrown.</param>
        </member>
        <member name="M:Goedel.Command._Flag.SetFlag(System.Boolean)">
            <summary>
            Set the negated flag
            </summary>
            <param name="negated">If true, command is negated.</param>
        </member>
        <member name="M:Goedel.Command._Flag.ToString">
            <summary>
            Convert value to string.
            </summary>
            <returns>the string value</returns>
        </member>
        <member name="T:Goedel.Command._File">
            <summary>
            Command line flag for file.
            </summary>
        </member>
        <member name="M:Goedel.Command._File.#ctor(System.String)">
            <summary>
            Constructor with specified default value.
            </summary>
            <param name="value">The default value text for this entry</param>
        </member>
        <member name="F:Goedel.Command._File.Extension">
            <summary>
            The default extension.
            </summary>
        </member>
        <member name="M:Goedel.Command._File.Default(System.String)">
            <summary>
            Set the default.
            </summary>
            <param name="textIn">The default value text for this entry</param>
        </member>
        <member name="P:Goedel.Command._File.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Goedel.Command._File.DefaultFile(Goedel.Command._File)">
            <summary>
            Construct extension defaulted file name for specified file.
            </summary>
            <param name="source">The source file.</param>
            <returns>File name.</returns>
        </member>
        <member name="M:Goedel.Command._File.DefaultFile(System.String,System.String)">
            <summary>
            Construct extension defaulted file name for specified file.
            </summary>
            <param name="source">The source file.</param>
            <param name="extension">The extension.</param>
            <returns>File name.</returns>
        </member>
        <member name="T:Goedel.Command._NewFile">
            <summary>
            Command line flag for file.
            </summary>
        </member>
        <member name="M:Goedel.Command._NewFile.#ctor(System.String)">
            <summary>
            Construct flag with specified value
            </summary>
            <param name="value">The flag value to set</param>
        </member>
        <member name="M:Goedel.Command._NewFile.SetFlag(System.Boolean)">
            <summary>
            Set the negated flag
            </summary>
            <param name="Negated">if true, is negated.</param>
        </member>
        <member name="M:Goedel.Command._NewFile.Default(System.String)">
            <summary>
            Set the default value for the type.
            </summary>
            <param name="TextIn">The default value as it would be given on the command line.</param>
        </member>
        <member name="M:Goedel.Command._NewFile.Complete(Goedel.Command.Type[])">
            <summary>
            Completion routine. This is called at the end of parameter processing to finalize default values.
            </summary>
            <param name="Data">The completed data</param>
        </member>
        <member name="M:Goedel.Command._NewFile.DefaultFrom(System.String)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Goedel.Command._ExistingFile">
            <summary>
            Command line flag for file.
            </summary>
        </member>
        <member name="M:Goedel.Command._ExistingFile.#ctor(System.String)">
            <summary>
            Construct flag with specified value
            </summary>
            <param name="Value">The flag value to set</param>
        </member>
        <member name="T:Goedel.Command._Integer">
            <summary>
            Command line flag for file.
            </summary>
        </member>
        <member name="M:Goedel.Command._Integer.#ctor(System.String)">
            <summary>
            Construct flag with specified value
            </summary>
            <param name="Value">The flag value to set</param>
        </member>
        <member name="M:Goedel.Command._Integer.ValueDefaulted(System.Int32)">
            <summary>
            Return the 
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="P:Goedel.Command._Integer.Value">
            <summary>
            Return the value as an integer
            </summary>
        </member>
        <member name="T:Goedel.Command._String">
            <summary>
            Command line flag for file.
            </summary>
        </member>
        <member name="P:Goedel.Command._String.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Goedel.Command._String.#ctor(System.String)">
            <summary>
            Construct flag with specified value
            </summary>
            <param name="Value">The flag value to set</param>
        </member>
        <member name="T:Goedel.Command._Enumeration`1">
            <summary>
            Command line flag for file.
            </summary>
        </member>
        <member name="F:Goedel.Command._Enumeration`1.Description">
            <summary>The entry description</summary>
        </member>
        <member name="F:Goedel.Command._Enumeration`1.Value">
            <summary>The typed value</summary>
        </member>
        <member name="M:Goedel.Command._Enumeration`1.#ctor(Goedel.Command.DescribeEntryEnumerate,System.String)">
            <summary>Base constructor</summary>
        </member>
    </members>
</doc>
