<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Goedel.Protocol.Presentation</name>
    </assembly>
    <members>
        <member name="T:Goedel.Protocol.Presentation.ClientState">
            <summary>
            Client side connection state.
            </summary>
        </member>
        <member name="F:Goedel.Protocol.Presentation.ClientState.Start">
            <summary>Initial state, sending either Initial or Cloaked.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Presentation.ClientState.Challenge">
            <summary>Host challenge received, sending answer.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Presentation.ClientState.Write">
            <summary>Connection established, sending packets.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Presentation.ClientState.Abort">
            <summary>Connection terminated, cannot be used further.</summary> 
        </member>
        <member name="T:Goedel.Protocol.Presentation.Connection">
            <summary>
            Base class for connections
            </summary>
        </member>
        <member name="T:Goedel.Protocol.Presentation.ConnectionClient">
            <summary>
            Client connection class.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Presentation.ConnectionClient.ClientCredential">
            <summary>The credential to be presented by the client.</summary>
        </member>
        <member name="P:Goedel.Protocol.Presentation.ConnectionClient.HostCredential">
            <summary>The credential to be presented by the host.</summary>
        </member>
        <member name="P:Goedel.Protocol.Presentation.ConnectionClient.ClientState">
            <summary>The client state.</summary> 
        </member>
        <member name="M:Goedel.Protocol.Presentation.ConnectionClient.#ctor(System.String,System.String,Goedel.Protocol.Presentation.PortID,Goedel.Protocol.Presentation.PresentationCredential,Goedel.Protocol.Presentation.PresentationCredential,System.Byte[])">
            <summary>
            Constructor, establish a client connection for the service 
            <paramref name="protocol"/> at address <paramref name="endpoint"/>.
            </summary>
            <param name="protocol">The service protocol.</param>
            <param name="endpoint">The service address.</param>
            <param name="portID">The port identifier.</param>
            <param name="clientCredential">The client credential.</param>
            <param name="hostCredential">The host credential (if known).</param>
            <param name="payload">The payload to be sent in the initial packet.</param>
        </member>
        <member name="M:Goedel.Protocol.Presentation.ConnectionClient.SerializeInitial(System.Byte[])">
            <summary>
            Serialize an initial request packet for this connection;
            </summary>
            <param name="payload">The payload data.</param>
            <returns>The serialized data.</returns>
        </member>
        <member name="T:Goedel.Protocol.Presentation.ClientPacketType">
            <summary>
            The client packet types. Two bits in the first byte of the nonce value are used to specify 
            the packet type to the host. The set of packet types is intentionally closed.
            </summary>
        </member>
        <member name="F:Goedel.Protocol.Presentation.ClientPacketType.Initial">
            <summary>Used to make a plaintext request to establish a new connection to the host.
            This MUST used in cases where the client does not have the public key of the host.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Presentation.ClientPacketType.Cloaked">
            <summary>Used to make an encrypted request to establish a new connection to the host.
            This MAY be used in cases where the client has the public key of the host.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Presentation.ClientPacketType.Answer">
            <summary>Used to respond to a challenge from the host or service. Challenges are sent
            by the host in response to the Initial and Cloaked packets and in cases where a failure occurs
            and the Host opts to offer the opportunity to resynchronze. Challenges are sent by the 
            service in cases where a handoff is being performed.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Presentation.ClientPacketType.Post">
            <summary>Used for all packets that are not control packets.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Presentation.ClientPacketType.Mask">
            <summary>Mask used to identify the control bits in the first byte of a packet.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Presentation.ClientPacketType.MaskRest">
            <summary>Mask used to identify the control bits in the first byte of a packet.</summary> 
        </member>
        <member name="T:Goedel.Protocol.Presentation.PacketClientInitial">
            <summary>
            Initial packet. This contains only the packet type identifier and the plaintext payload.
            Since neither the request, nor the response packet can be encrypted, the payload is
            typically limited to a Hello request for the protocol version and host capabilities.
            </summary>
        </member>
        <member name="T:Goedel.Protocol.Presentation.Constants">
            <summary>
            Constants class
            </summary>
        </member>
        <member name="F:Goedel.Protocol.Presentation.Constants.MinimumPacketSize">
            <summary>The minimum packet size.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Presentation.Constants.SizeNonceAesGcm">
            <summary>Size of packet nonce to be used in AES-GCM packet.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Presentation.Constants.SizeIvAesGcm">
            <summary>Size of initialization vector / AES nonce to be used in AES-GCM packet.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Presentation.Constants.SizeTagAesGcm">
            <summary>Size of authentication tag to be used in AES-GCM packet.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Presentation.Constants.SizeKeyAesGcm">
            <summary>Size of key to be used in AES-GCM packet.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Presentation.Constants.TagIv">
            <summary>The KDF info tag to be used to derive initialization vectors.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Presentation.Constants.TagKey">
            <summary>The KDF info tag to be used to derive keys.</summary> 
        </member>
        <member name="M:Goedel.Protocol.Presentation.Constants.Derive(System.Byte[],System.Byte[]@,System.Byte[]@,System.Byte[]@)">
            <summary>
            Using the primary key <paramref name="ikm"/> and generated nonce <paramref name="nonce"/>,
            derive key <paramref name="key"/> and initialization vector <paramref name="iv"/>.
            </summary>
            <param name="ikm">The primary key.</param>
            <param name="nonce">The generated nonce.</param>
            <param name="iv">The generated initialization vector.</param>
            <param name="key">The generated key.</param>
        </member>
        <member name="M:Goedel.Protocol.Presentation.Constants.Derive2(System.Byte[],System.Byte[],System.Byte[]@,System.Byte[]@)">
            <summary>
            Using the primary key <paramref name="ikm"/> and provided nonce <paramref name="nonce"/>,
            derive key <paramref name="key"/> and initialization vector <paramref name="iv"/>.
            </summary>
            <param name="ikm">The primary key.</param>
            <param name="nonce">The nonce.</param>
            <param name="iv">The generated initialization vector.</param>
            <param name="key">The generated key.</param>
        </member>
        <member name="F:Goedel.Protocol.Presentation.Constants.ZeroArray">
            <summary>Obsolete, remove</summary> 
        </member>
        <member name="M:Goedel.Protocol.Presentation.ListenerHost.ProcessCloaked(Goedel.Protocol.Presentation.PortID,System.Byte[])">
            <summary>
            Process a cloaked request packet.
            </summary>
            <param name="portID"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Goedel.Protocol.Presentation.PacketReader">
            <summary>
            Presentation packet reader class.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Presentation.PacketReader.Position">
            <summary>Reader position.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Presentation.PacketReader.Packet">
            <summary>Buffer from which data is read.</summary> 
        </member>
        <member name="M:Goedel.Protocol.Presentation.PacketReader.Factory(System.Byte[])">
            <summary>Factory method returning a reader of the default decryption algorithm and mode.</summary> 
        </member>
        <member name="M:Goedel.Protocol.Presentation.PacketReader.#ctor(System.Byte[])">
            <summary>
            Constructor, returns a reader instance for the packet <paramref name="packet"/>.
            </summary>
            <param name="packet">The packet data.</param>
        </member>
        <member name="M:Goedel.Protocol.Presentation.PacketReader.ReadByte">
            <summary>
            Read the next byte in the packet.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Goedel.Protocol.Presentation.PacketReader.ReadSpan(System.Int32)">
            <summary>
            Return a Span containing the next <paramref name="length"/> bytes.
            </summary>
            <param name="length">The number of bytes to return.</param>
            <returns>The span.</returns>
        </member>
        <member name="M:Goedel.Protocol.Presentation.PacketReader.ReadTag">
            <summary>
            Read a tag/length specifier from the stream.
            </summary>
            <returns>The tagged data.</returns>
        </member>
        <member name="M:Goedel.Protocol.Presentation.PacketReader.ReadInteger">
            <summary>
            Read an integer from the stream.
            </summary>
            <returns>The data that was read.</returns>
        </member>
        <member name="M:Goedel.Protocol.Presentation.PacketReader.ReadBinarySpan">
            <summary>
            Read a binary from the stream.
            </summary>
            <returns>A span describing the data that was read.</returns>
        </member>
        <member name="M:Goedel.Protocol.Presentation.PacketReader.ReadString">
            <summary>
            Read a UTF8 encoded string from the stream.
            </summary>
            <returns>The data that was read.</returns>
        </member>
        <member name="M:Goedel.Protocol.Presentation.PacketReader.Decrypt(System.Byte[])">
            <summary>
            Decrypt the remainder of the packet using the primary key <paramref name="ikm"/> and the 
            nonce at the current position in the packet to provide the necessary keying material.
            </summary>
            <param name="ikm">The primary key.</param>
            <returns>A reader for the decrypted data.</returns>
        </member>
        <member name="M:Goedel.Protocol.Presentation.PacketReader.Unwrap(System.Byte[],System.Byte[])">
            <summary>
            Unwrap the packet <paramref name="packet"/> using  the primary key <paramref name="ikm"/> and 
            the nonce at the start of the packet to provide the necessary keying material.
            </summary>
            <param name="ikm">The primary key.</param>
            <param name="packet">The data to decrypt</param>
            <returns>A reader for the decrypted data.</returns>
        </member>
        <member name="T:Goedel.Protocol.Presentation.PacketReaderGCM">
            <summary>
            Packet reader using AES in GCM mode for decryption.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Presentation.PacketReaderGCM.SizeIv">
            <summary>Initialization vector size in bytes. Currently fixed at 12 bytes.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Presentation.PacketReaderGCM.SizeTag">
            <summary>Tag size in bytes. Currently fixed at 16 bytes.</summary> 
        </member>
        <member name="M:Goedel.Protocol.Presentation.PacketReaderGCM.#ctor(System.Byte[])">
            <summary>
            Constructor, returns a reader instance for the packet <paramref name="packet"/>.
            </summary>
            <param name="packet">The packet data.</param>
        </member>
        <member name="M:Goedel.Protocol.Presentation.PacketReaderGCM.Decrypt(System.Byte[])">
            <summary>
            Decrypt the remainder of the packet using the primary key <paramref name="key"/> and the 
            nonce at the current position in the packet to provide the necessary keying material.
            </summary>
            <param name="key">The primary key.</param>
            <returns>A reader for the decrypted data.</returns>
        </member>
        <member name="M:Goedel.Protocol.Presentation.PacketReaderGCM.Unwrap(System.Byte[],System.Byte[])">
            <summary>
            Unwrap the packet <paramref name="packet"/> using  the primary key <paramref name="key"/> and 
            the nonce at the start of the packet to provide the necessary keying material.
            </summary>
            <param name="key">The primary key.</param>
            <param name="packet">The data to decrypt</param>
            <returns>A reader for the decrypted data.</returns>
        </member>
        <member name="T:Goedel.Protocol.Presentation.PacketTag">
            <summary>
            Packet tag types
            </summary>
        </member>
        <member name="F:Goedel.Protocol.Presentation.PacketTag.Integer">
            <summary>Integer field</summary> 
        </member>
        <member name="F:Goedel.Protocol.Presentation.PacketTag.String">
            <summary>String field</summary> 
        </member>
        <member name="F:Goedel.Protocol.Presentation.PacketTag.Binary">
            <summary>Binary field</summary> 
        </member>
        <member name="F:Goedel.Protocol.Presentation.PacketTag.Ipv4">
            <summary>IPv4 address</summary> 
        </member>
        <member name="F:Goedel.Protocol.Presentation.PacketTag.Ipv6">
            <summary>IPv6 Address</summary> 
        </member>
        <member name="F:Goedel.Protocol.Presentation.PacketTag.Port">
            <summary>IP port number</summary> 
        </member>
        <member name="F:Goedel.Protocol.Presentation.PacketTag.Extensions">
            <summary>List of extensions follow</summary> 
        </member>
        <member name="F:Goedel.Protocol.Presentation.PacketTag.Tag">
            <summary>Extension identifier</summary> 
        </member>
        <member name="T:Goedel.Protocol.Presentation.PacketWriter">
            <summary>
            Base class for packet writers.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Presentation.PacketWriter.Position">
            <summary>Position of the writer within the packet.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Presentation.PacketWriter.Packet">
            <summary>The Packet data</summary> 
        </member>
        <member name="M:Goedel.Protocol.Presentation.PacketWriter.Factory(System.Int32)">
            <summary>Factory method, returns a packet writer for the default encryption algorithm.</summary> 
        </member>
        <member name="M:Goedel.Protocol.Presentation.PacketWriter.#ctor(System.Int32)">
            <summary>
            Constructor, create a packet writer with a packet size of 
            <paramref name="packetSize"/>.
            </summary>
            <param name="packetSize">The number of bytes in the packet to be created.</param>
        </member>
        <member name="M:Goedel.Protocol.Presentation.PacketWriter.LengthLength(System.Int64)">
            <summary>
            Return the number of bytes taken to specify tag/length production of length
            <paramref name="data"/>.
            </summary>
            <param name="data">The data item to size.</param>
            <returns>Number of bytes required for the encoding.</returns>
        </member>
        <member name="M:Goedel.Protocol.Presentation.PacketWriter.Write(System.Byte)">
            <summary>
            Write a byte to the packet
            </summary>
            <param name="b"></param>
        </member>
        <member name="M:Goedel.Protocol.Presentation.PacketWriter.WriteTag(Goedel.Protocol.Presentation.PacketTag,System.Int64)">
            <summary>
            Write out a Tag-Length value using the shortest possible production.
            </summary>
            <param name="tag">Base code.</param>
            <param name="data">Length of data to follow.</param>
        </member>
        <member name="M:Goedel.Protocol.Presentation.PacketWriter.Write(System.Int32)">
             <summary>
            Write the positive integer <paramref name="data"/> to the packet
             </summary>
             <param name="data">The data to write</param>
        </member>
        <member name="M:Goedel.Protocol.Presentation.PacketWriter.Write(System.Byte[])">
            <summary>
            Write the binary data <paramref name="data"/> to the packet.
            </summary>
            <param name="data">The data to write</param>
        </member>
        <member name="M:Goedel.Protocol.Presentation.PacketWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
             Write the binary data  <paramref name="data"/> to the packet beginning
             at position <paramref name="offset"/> for <paramref name="count"/> bytes.
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:Goedel.Protocol.Presentation.PacketWriter.Write(System.String)">
             <summary>
            Write the string <paramref name="data"/> to the packet
             </summary>
             <param name="data">The data to write</param>
        </member>
        <member name="M:Goedel.Protocol.Presentation.PacketWriter.SkipBinary(System.Int32)">
            <summary>
            Skip forward to reserve space for a data item of <paramref name="length"/>
            bytes.
            </summary>
            <param name="length">Length of the data item to reserve space for.</param>
        </member>
        <member name="M:Goedel.Protocol.Presentation.PacketWriter.Encrypt(System.Byte[],Goedel.Protocol.Presentation.PacketWriter)">
            <summary>
            Fill out the remainder of the packet by using the value <paramref name="ikm"/>
            and a generated nonce to encrypt the data specified in <paramref name="packet"/>
            </summary>
            <param name="ikm">The primary key.</param>
            <param name="packet">The plaintext data</param>
        </member>
        <member name="M:Goedel.Protocol.Presentation.PacketWriter.Wrap(System.Byte[])">
            <summary>
            Wrap a data packet payload to create an encrypted data packet.
            </summary>
            <param name="ikm">The primary key.</param>
            <returns>The wrapped data packet.</returns>
        </member>
        <member name="T:Goedel.Protocol.Presentation.PacketWriterGCM">
            <summary>
            Encrypting packet writer.
            </summary>
        </member>
        <member name="M:Goedel.Protocol.Presentation.PacketWriterGCM.#ctor(System.Int32)">
            <summary>
            Constructor, create a packet writer with a packet size of 
            <paramref name="packetSize"/>.
            </summary>
            <param name="packetSize">The number of bytes in the packet to be created.</param>
        </member>
        <member name="M:Goedel.Protocol.Presentation.PacketWriterGCM.Encrypt(System.Byte[],Goedel.Protocol.Presentation.PacketWriter)">
            <summary>
            Fill out the remainder of the packet by using the value <paramref name="key"/>
            and a generated nonce to encrypt the data specified in <paramref name="writerIn"/>
            </summary>
            <param name="key">The primary key.</param>
            <param name="writerIn">The plaintext data</param>
        </member>
        <member name="M:Goedel.Protocol.Presentation.PacketWriterGCM.Wrap(System.Byte[])">
            <summary>
            Wrap a data packet payload to create an encrypted data packet.
            </summary>
            <param name="key">The primary key.</param>
            <returns>The wrapped data packet.</returns>
        </member>
        <member name="T:Goedel.Protocol.Presentation.PresentationCredential">
            <summary>
            Base class for presentation credential
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Presentation.PresentationCredential.KeySignPrivate">
            <summary>The signature key to sign under the credential.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Presentation.PresentationCredential.KeyExchangePrivate">
            <summary>The private key exchange key.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Presentation.PresentationCredential.KeySignPublic">
            <summary>The signature verification key under the credential</summary> 
        </member>
        <member name="P:Goedel.Protocol.Presentation.PresentationCredential.KeyExchangePublic">
            <summary>The public key exchange key.</summary> 
        </member>
        <member name="M:Goedel.Protocol.Presentation.PresentationCredential.WriteClientCredential(Goedel.Protocol.JsonWriter)">
            <summary>
            Obsolete, to be removed.
            </summary>
            <param name="jsonWriter"></param>
        </member>
        <member name="M:Goedel.Protocol.Presentation.PresentationCredential.WriteCredential(Goedel.Protocol.Presentation.PacketWriter)">
            <summary>
            Write credential type specifier and credential to packet.
            </summary>
            <param name="writer">The packet writer</param>
        </member>
        <member name="T:Goedel.Protocol.PacketSizeExceeded">
            <summary>
            The packet was too small to contain the data
            </summary>
        </member>
        <member name="P:Goedel.Protocol.PacketSizeExceeded.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="F:Goedel.Protocol.PacketSizeExceeded.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Protocol.PacketSizeExceeded.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Protocol.PacketSizeExceeded._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="F:Goedel.Protocol.PacketSizeExceeded.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Protocol.InvalidClientState">
            <summary>
            The client is in an invalid state for the requested operation.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.InvalidClientState.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="F:Goedel.Protocol.InvalidClientState.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Protocol.InvalidClientState.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Protocol.InvalidClientState._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="F:Goedel.Protocol.InvalidClientState.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
    </members>
</doc>
