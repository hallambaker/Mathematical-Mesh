<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Goedel.Cryptography.Dare</name>
    </assembly>
    <members>
        <member name="T:Goedel.Cryptography.Dare.ContainerChain">
            <summary>
            Simple container that supports the append and index functions but does not 
            provide for cryptographic integrity.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerChain.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerChain.MakeNewContainer(Goedel.Cryptography.Dare.JbcdStream)">
            <summary>
            Create a new container file of the specified type and write the initial
            data record
            </summary>
            <param name="JBCDStream">The underlying JBCDStream stream. This MUST be opened
            in a read access mode and should have exclusive read access. All existing
            content in the file will be overwritten.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerChain.FillDictionary(Goedel.Cryptography.Dare.SequenceInfo,System.Int64,System.Int64)">
            <summary>
            Initialize the dictionaries used to manage the tree by registering the set
            of values leading up to the apex value.
            </summary>
            <param name="header">Final frame header</param>
            <param name="firstPosition">Position of frame 1</param>
            <param name="positionLast">Position of the last frame</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerChain.PrepareFrame(Goedel.Cryptography.Dare.SequenceWriter)">
            <summary>
            Append the header to the frame. This is called after the payload data
            has been passed using AppendPreprocess.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerChain.FillDummyTrailer(Goedel.Cryptography.Dare.CryptoStack)">
            <summary>
            Pre-populate the dummy trailer so as to allow the length to be calculated.
            </summary>
            <returns>The dummy trailer.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerChain.MakeTrailer(Goedel.Cryptography.Dare.DareTrailer@)">
            <summary>
            The dummy trailer to add to the end of the frame.
            </summary>
            <param name="trailer">The trailer to augment.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerChain.CheckSequence(System.Collections.Generic.List{Goedel.Cryptography.Dare.DareHeader})">
            <summary>
            Perform sanity checking on a list of container headers.
            </summary>
            <param name="headers">List of headers to check</param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.ContainerDigest">
            <summary>
            Simple container that supports the append and index functions but does not 
            provide for linked cryptographic integrity.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="P:Goedel.Cryptography.Dare.ContainerDigest.DigestRequired">
            <summary>If true, the Container type requires a digest calculated on the payload.</summary> 
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerDigest.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerDigest.MakeNewContainer(Goedel.Cryptography.Dare.JbcdStream)">
            <summary>
            Create a new container file of the specified type and write the initial
            data record
            </summary>
            <param name="JBCDStream">The underlying JBCDStream stream. This MUST be opened
            in a read access mode and should have exclusive read access. All existing
            content in the file will be overwritten.</param>
            <returns>The newly constructed container.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerDigest.CheckSequence(System.Collections.Generic.List{Goedel.Cryptography.Dare.DareHeader})">
            <summary>
            Perform sanity checking on a list of container headers.
            </summary>
            <param name="Headers">List of headers to check</param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.SequenceData">
             <summary>
            
             Classes that describe the DARE Container Format.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.SequenceData._Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.SequenceData.__Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.SequenceData._TagDictionary">
            <summary>
            Dictionary mapping tags to factory methods
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceData.Deserialize(Goedel.Protocol.JsonReader,Goedel.Protocol.JsonObject@)">
            <summary>
            Construct an instance from the specified tagged JsonReader stream.
            </summary>
            <param name="jsonReader">Input stream</param>
            <param name="result">The created object</param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.SequenceInfo">
             <summary>
            
             Information that describes container information
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.SequenceInfo.DataEncoding">
             <summary>
            Specifies the data encoding for the header section of for the following frames.
            This value is ONLY valid in Frame 0 which MUST have a header encoded in JSON.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.SequenceInfo.ContainerType">
             <summary>
            Specifies the container type for the following records.
            This value is ONLY valid in Frame 0 which MUST have a header encoded in JSON.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.SequenceInfo.Index">
             <summary>
            The record index within the file. This MUST be unique and 
            satisfy any additional requirements determined by the ContainerType.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.SequenceInfo.IsMeta">
             <summary>
            If true, the current frame is a meta frame and does not contain a payload.
            Note: Meta frames MAY be present in any container. Applications MUST
            accept containers that contain meta frames at any position in the file.
            Applications MUST NOT interpret a meta frame as a data frame with an enpty payload.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.SequenceInfo.Default">
             <summary>
            If set true in a persistent container, specifies that this record contains
            the default object for the container.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.SequenceInfo.TreePosition">
             <summary>
            Position of the frame containing the apex of the preceding sub-tree.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.SequenceInfo.IndexPosition">
             <summary>
            Specifies the position in the file at which the last index entry is
            to be found
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.SequenceInfo.ExchangePosition">
             <summary>
            Specifies the position in the file at which the key exchange data is
            to be found
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.SequenceInfo._Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.SequenceInfo.__Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceInfo._Factory">
            <summary>
            Factory method
            </summary>
            <returns>Object of this type</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceInfo.Serialize(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            </summary>
            <param name="writer">Output stream</param>
            <param name="wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceInfo.SerializeX(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            Unlike the Serlialize() method, this method is not inherited from the
            parent class allowing a specific version of the method to be called.
            </summary>
            <param name="_writer">Output stream</param>
            <param name="_wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="_first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceInfo.FromJson(Goedel.Protocol.JsonReader,System.Boolean)">
            <summary>
            Deserialize a tagged stream
            </summary>
            <param name="jsonReader">The input stream</param>
            <param name="tagged">If true, the input is wrapped in a tag specifying the type</param>
            <returns>The created object.</returns>		
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceInfo.DeserializeToken(Goedel.Protocol.JsonReader,System.String)">
            <summary>
            Having read a tag, process the corresponding value data.
            </summary>
            <param name="jsonReader">The input stream</param>
            <param name="tag">The tag</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceInfo.HasExchangePosition">
            <summary>If true, the field ExchangePosition is specified</summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.SequenceIndex">
             <summary>
            
             A container index
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.SequenceIndex.Full">
             <summary>
            If true, the index is complete and contains position entries for all the 
            frames in the file. If absent or false, the index is incremental and only
            contains position entries for records added since the last 
            frame containing a ContainerIndex.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.SequenceIndex.Positions">
             <summary>
            List of container position entries
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.SequenceIndex._Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.SequenceIndex.__Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceIndex._Factory">
            <summary>
            Factory method
            </summary>
            <returns>Object of this type</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceIndex.Serialize(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            </summary>
            <param name="writer">Output stream</param>
            <param name="wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceIndex.SerializeX(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            Unlike the Serlialize() method, this method is not inherited from the
            parent class allowing a specific version of the method to be called.
            </summary>
            <param name="_writer">Output stream</param>
            <param name="_wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="_first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceIndex.FromJson(Goedel.Protocol.JsonReader,System.Boolean)">
            <summary>
            Deserialize a tagged stream
            </summary>
            <param name="jsonReader">The input stream</param>
            <param name="tagged">If true, the input is wrapped in a tag specifying the type</param>
            <returns>The created object.</returns>		
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceIndex.DeserializeToken(Goedel.Protocol.JsonReader,System.String)">
            <summary>
            Having read a tag, process the corresponding value data.
            </summary>
            <param name="jsonReader">The input stream</param>
            <param name="tag">The tag</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceIndex.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.IndexPosition">
             <summary>
            
             Specifies the position in a file at which a specified record index is found
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.IndexPosition.Index">
             <summary>
            The record index within the file.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.IndexPosition.Position">
             <summary>
            The record position within the file relative to the index base.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.IndexPosition.UniqueId">
             <summary>
            Unique object identifier
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.IndexPosition._Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.IndexPosition.__Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.IndexPosition._Factory">
            <summary>
            Factory method
            </summary>
            <returns>Object of this type</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.IndexPosition.Serialize(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            </summary>
            <param name="writer">Output stream</param>
            <param name="wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.IndexPosition.SerializeX(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            Unlike the Serlialize() method, this method is not inherited from the
            parent class allowing a specific version of the method to be called.
            </summary>
            <param name="_writer">Output stream</param>
            <param name="_wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="_first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.IndexPosition.FromJson(Goedel.Protocol.JsonReader,System.Boolean)">
            <summary>
            Deserialize a tagged stream
            </summary>
            <param name="jsonReader">The input stream</param>
            <param name="tagged">If true, the input is wrapped in a tag specifying the type</param>
            <returns>The created object.</returns>		
        </member>
        <member name="M:Goedel.Cryptography.Dare.IndexPosition.DeserializeToken(Goedel.Protocol.JsonReader,System.String)">
            <summary>
            Having read a tag, process the corresponding value data.
            </summary>
            <param name="jsonReader">The input stream</param>
            <param name="tag">The tag</param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.KeyValue">
             <summary>
            
             Specifies a key/value entry
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.KeyValue.Key">
             <summary>
            The key
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.KeyValue.Value">
             <summary>
            The value corresponding to the key
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.KeyValue._Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.KeyValue.__Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.KeyValue._Factory">
            <summary>
            Factory method
            </summary>
            <returns>Object of this type</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.KeyValue.Serialize(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            </summary>
            <param name="writer">Output stream</param>
            <param name="wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.KeyValue.SerializeX(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            Unlike the Serlialize() method, this method is not inherited from the
            parent class allowing a specific version of the method to be called.
            </summary>
            <param name="_writer">Output stream</param>
            <param name="_wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="_first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.KeyValue.FromJson(Goedel.Protocol.JsonReader,System.Boolean)">
            <summary>
            Deserialize a tagged stream
            </summary>
            <param name="jsonReader">The input stream</param>
            <param name="tagged">If true, the input is wrapped in a tag specifying the type</param>
            <returns>The created object.</returns>		
        </member>
        <member name="M:Goedel.Cryptography.Dare.KeyValue.DeserializeToken(Goedel.Protocol.JsonReader,System.String)">
            <summary>
            Having read a tag, process the corresponding value data.
            </summary>
            <param name="jsonReader">The input stream</param>
            <param name="tag">The tag</param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.SequenceEnumeratorRaw">
            <summary>
            Enumerator that returns the raw, unencrypted container data.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.SequenceEnumeratorRaw.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceEnumeratorRaw.#ctor(Goedel.Cryptography.Dare.Sequence,System.Int32,System.Boolean)">
            <summary>
            Create an enumerator for <paramref name="container"/>.
            </summary>
            <param name="lowIndex">The lowest index to be returned.</param>
            <param name="reverse">If true, enumeratre from the last item to <paramref name="lowIndex"/> (inclusive).
            otherwise, enumerate from <paramref name="lowIndex"/> to the first.</param>
            <param name="container">The container to enumerate.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceEnumeratorRaw.GetEnumerator">
            <summary>
            When called on an instance of this class, returns the instance. Thus allowing
            selectors to be used in sub classes.
            </summary>
            <returns>This instance</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceEnumeratorRaw.Dispose">
            <summary>
            Dispose method.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceEnumeratorRaw.MoveNext">
            <summary>
            Move to the next item in the enumeration.
            </summary>
            <returns>If true, the next item was found. Otherwise, the end of the enumeration 
            was reached.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceEnumeratorRaw.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element 
            in the collection.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.ContainerEnumerator">
            <summary>
            Enumerator for frames in a container beginning with frame 1.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.ContainerEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerEnumerator.#ctor(Goedel.Cryptography.Dare.Sequence)">
            <summary>
            Create an enumerator for <paramref name="container"/>.
            </summary>
            <param name="container">The container to enumerate.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerEnumerator.GetEnumerator">
            <summary>
            When called on an instance of this class, returns the instance. Thus allowing
            selectors to be used in sub classes.
            </summary>
            <returns>This instance</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><code>true</code> if the enumerator was successfully advanced to the next element; 
            <code>false</code> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.DareHeader">
             <summary>
            
             A DARE Envelope Header. Since any field that is present in a trailer MAY be 
             placed in a header instead, the envelope header inherits from the trailer.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareHeader.Index">
            <summary>The container index value.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareHeader.HasExchangePosition">
            <summary>If true, the field ExchangePosition is specified</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareHeader.OutputLength(System.Int64)">
            <summary>
            Calculate the expected payload length for the specified <paramref name="contentLength"/>.
            </summary>
            <param name="contentLength">The unencrypted content length.</param>
            <returns>The corresponding payload length.</returns>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareHeader.Encrypt">
            <summary>
            If true, the header specifies a key exchange.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareHeader.MakeSalt">
            <summary>
            Threadsafe assignment of unique salt under this master secret.
            </summary>
            <returns></returns>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Goedel.Cryptography.Dare.DareHeader.CryptoStack">
            <summary>
            Cryptographic parameters and stream generator for the header.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.DareHeader.ContentMeta">
            <summary>The content Metadata.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareHeader.ContentType">
            <summary>The content type.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareHeader.PreEncode">
            <summary>Routine called before serialization.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareHeader.PostDecode">
            <summary>Routine called after serialization.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareHeader.#ctor">
            <summary>
            Create a message header.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareHeader.SetDefaultContext(Goedel.Cryptography.Dare.DareHeader)">
            <summary>
            Use information from the specified header to speficy defaults.
            </summary>
            <param name="DAREHeader"></param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareHeader.BodyWriter(System.IO.Stream)">
            <summary>
            Construct a stream that will write the body data with whatever crypto stream
            modules are required.
            </summary>
            <param name="output">The ultimate output stream.</param>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareHeader.CloseBodyWriter(Goedel.Cryptography.Dare.DareTrailer@)">
            <summary>
            Close the body writer stack and free all associated resources.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareHeader.BindEncoder(Goedel.Cryptography.Dare.CryptoParameters,System.Byte[],System.Collections.Generic.List{System.Byte[]})">
            <summary>
            Create a new cryptostack encoder and bind it to this header.
            </summary>
            <param name="cryptoParameters">The cryptographic parameters from which 
            the stack is constructed.</param>
            <param name="cloaked">Cloaked headers.</param>
            <param name="dataSequences">Data sequences.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareHeader.EnhanceBody(System.Byte[],Goedel.Cryptography.Dare.DareTrailer@)">
            <summary>
            Return a binary EDS sequence of the specified plaintext under this header. A
            unique salt will be assigned.
            </summary>
            <param name="Plaintext">The EDS plaintext.</param>
            <param name="dareTrailer">Prototype trailer containing the calculated digest value.</param>
            <returns>The EDS</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareHeader.MakeSalt(System.Int64)">
            <summary>
            Convert an int64 counter to a unique salt value.
            </summary>
            <param name="saltValue"></param>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareHeader.GetDecoder(System.IO.Stream,System.IO.Stream@,Goedel.Cryptography.IKeyLocate,Goedel.Cryptography.Dare.DareHeader)">
            <summary>
            Return a decoder for the specified data source.
            </summary>
            <param name="stream">The data source.</param>
            <param name="reader">The stream to read the decoded data from.</param>
            <param name="keyCollection">Key collection to be used to resolve private
            keys.</param>
            <param name="exchange">Header containing the exchange information.</param>
            <returns>The decoder. </returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareHeader.GetCryptoStack(Goedel.Cryptography.IKeyLocate,System.Boolean)">
            <summary>
            Return a CryptoStack using key exchange information specified in this 
            header.
            </summary>
            <returns>The created CryptoStack</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareHeader.GetDecoder(Goedel.Protocol.JsonBcdReader,System.IO.Stream@,Goedel.Cryptography.IKeyLocate,System.Boolean)">
            <summary>
            Return a decoder for the specified data source.
            </summary>
            <param name="jsonBcdReader">The data source.</param>
            <param name="reader">The stream to read the decoded data from.</param>
            <param name="keyCollection">Key collection to be used to resolve private
            keys.</param>
            <param name="decrypt">If true, attempt to decrypt.</param>
            <returns>The decoder. </returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareHeader.DecryptMaster(Goedel.Cryptography.IKeyLocate)">
            <summary>
            Attempt decryption of the master key by matching a recipient entry to the 
            keys in the specified key collection.
            </summary>
            <param name="keyCollection">The key collection to use or the default collection
            if null.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareHeader.DataSequence(System.Int32)">
            <summary>
            Return the decrypted value of the specified EDSS header.
            </summary>
            <param name="i">Index of the EDSS entry to decrypt.</param>
            <returns>The decrypted data.</returns>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareHeader.EnvelopeId">
             <summary>
            Unique identifier
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareHeader.EncryptionAlgorithm">
             <summary>
            The encryption algorithm as specified in JWE
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareHeader.DigestAlgorithm">
             <summary>
            Digest Algorithm. If specified, tells decoder that the digest algorithm is used to
            construct a signature over the envelope payload.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareHeader.KeyIdentifier">
             <summary>
            Base seed identifier.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareHeader.Salt">
             <summary>
            Salt value used to derrive cryptographic parameters for the content data.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareHeader.Malt">
             <summary>
            Hash of the Salt value used to derrive cryptographic parameters for the content data.
            This field SHOULD NOT be present if the Salt field is present. It is used to
            allow the salt value to be erased (thus rendering the payload content irrecoverable)
            without affecting the ability to calculate the payload digest value.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareHeader.Cloaked">
             <summary>
            If present in a header or trailer, specifies an encrypted data block 
            containing additional header fields whose values override those specified 
            in the envelope and context headers.
            When specified in a header, a cloaked field MAY be used to conceal metadata 
            (content type, compression) and/or to specify an additional layer of key exchange. 
            That applies to both the envelope body and to headers specified within the cloaked 
            header.
            Processing of cloaked data is described in…
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareHeader.EDSS">
             <summary>
            If present, the Annotations field contains a sequence of Encrypted Data 
            Segments encrypted under the envelope base seed. The interpretation of these fields 
            is application specific.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareHeader.Signers">
             <summary>
            A list of 'presignature'
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareHeader.Recipients">
             <summary>
            A list of recipient key exchange information blocks.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareHeader.Policy">
             <summary>
            A DARE security policy governing future additions to the container.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareHeader.ContentMetaData">
             <summary>
            If present contains a JSON encoded ContentInfo structure which specifies
            plaintext content metadata and forms one of the inputs to the envelope digest value.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareHeader.SequenceInfo">
             <summary>
            Information that describes container information
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareHeader.SequenceIndex">
             <summary>
            An index of records in the current container up to but not including
            this one.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareHeader.Received">
             <summary>
            Date on which the envelope was received.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareHeader._Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.DareHeader.__Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareHeader._Factory">
            <summary>
            Factory method
            </summary>
            <returns>Object of this type</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareHeader.Serialize(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            </summary>
            <param name="writer">Output stream</param>
            <param name="wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareHeader.SerializeX(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            Unlike the Serlialize() method, this method is not inherited from the
            parent class allowing a specific version of the method to be called.
            </summary>
            <param name="_writer">Output stream</param>
            <param name="_wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="_first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareHeader.FromJson(Goedel.Protocol.JsonReader,System.Boolean)">
            <summary>
            Deserialize a tagged stream
            </summary>
            <param name="jsonReader">The input stream</param>
            <param name="tagged">If true, the input is wrapped in a tag specifying the type</param>
            <returns>The created object.</returns>		
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareHeader.DeserializeToken(Goedel.Protocol.JsonReader,System.String)">
            <summary>
            Having read a tag, process the corresponding value data.
            </summary>
            <param name="jsonReader">The input stream</param>
            <param name="tag">The tag</param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.ContainerList">
            <summary>
            Simple container that supports the append and index functions but does not 
            provide for linked cryptographic integrity.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerList.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerList.MakeNewContainer(Goedel.Cryptography.Dare.JbcdStream)">
            <summary>
            Create a new container file of the specified type and write the initial
            data record
            </summary>
            <param name="JBCDStream">The underlying JBCDStream stream. This MUST be opened
            in a read access mode and should have exclusive read access. All existing
            content in the file will be overwritten.</param>
            <returns>The newly constructed container.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerList.FillDictionary(Goedel.Cryptography.Dare.SequenceInfo,System.Int64,System.Int64)">
            <summary>
            Initialize the dictionaries used to manage the tree by registering the set
            of values leading up to the apex value.
            </summary>
            <param name="containerInfo">Final frame header container information.</param>
            <param name="firstPosition">Position of frame 1</param>
            <param name="positionLast">Position of the last frame</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerList.PrepareFrame(Goedel.Cryptography.Dare.SequenceWriter)">
            <summary>
            Prepare the data to be incorporated into the header.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerList.CommitHeader(Goedel.Cryptography.Dare.DareHeader,Goedel.Cryptography.Dare.SequenceWriter)">
            <summary>
            Commit the header data to the container.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerList.FillDummyTrailer(Goedel.Cryptography.Dare.CryptoStack)">
            <summary>
            The number of bytes to be reserved for the trailer.
            </summary>
            <returns>The number of bytes to reserve</returns>
        </member>
        <member name="F:Goedel.Cryptography.Dare.ContainerList.frameReadStartPosition">
            <summary>If positive, specifies the file position of the next frame.
            This is used to store an index to be applied to the file pointer before 
            a Next or Previous method operates on the stream.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.ContainerList.PositionRead">
            <summary>
            Get or set the read position in the stream.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerList.GetSequenceFrameIndex(System.Int64,System.Int64)">
            <summary>
            Obtain a ContainerFrameIndex instance for <paramref name="index"/> if
            specified or <paramref name="position"/> otherwise.
            </summary>
            <param name="index">The container index to obtain the frame index for.</param>
            <param name="position">The container position to obtain the frame index for.</param>
            <returns>The created ContainerFrameIndex instance,</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerList.NextFrame">
            <summary>
            Read the next frame in the file.
            </summary>
            <returns>True if a next frame exists, otherwise false</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerList.PreviousFrame">
            <summary>
            Read the next frame in the file.
            </summary>
            <returns>True if a next frame exists, otherwise false</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerList.Next">
            <summary>
            Read the next frame in the file.
            </summary>
            <returns>True if a next frame exists, otherwise false</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerList.Previous">
            <summary>
            Read the previous frame in the file and leave the read pointer positioned at the start
            of the frame just read.
            </summary>
            <returns>True if a previous frame exists, otherwise false</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerList.MoveToIndex(System.Int64)">
            <summary>
            Move to the frame with index Position in the file. 
            <para>Since the file format only supports sequential access, this is slow.</para>
            </summary>
            <param name="index">The frame index to move to</param>
            <returns>If success, the frame index.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerList.CheckSequence(System.Collections.Generic.List{Goedel.Cryptography.Dare.DareHeader})">
            <summary>
            Perform sanity checking on a list of container headers.
            </summary>
            <param name="headers">List of headers to check</param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.ContainerMasterStore">
            <summary>
            
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerMasterStore.GetReadHandle(System.String,System.Boolean)">
            <summary>
            Return a read-only handle for the specified persistence store.
            </summary>
            <param name="ID">The store to obtain the handle for.</param>
            <param name="ReadOnly">If true, the store is opened in read-only mode. 
            This is a global lock and prevents any other thread opening the same store in write mode</param>
            <returns>A read handle for the specified persistence store.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerMasterStore.GetWriteHandle(System.String)">
            <summary>
            Return a read-write handle for the specified persistence store. For maximum performance, 
            an upgradeable lock is acquired initially and then updated to a write lock if a write
            operation is attempted.
            </summary>
            <param name="ID">The store to obtain the handle for.</param>
            <returns>A read/write handle for the specified persistence store.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerMasterStore.FreedHandle(Goedel.Cryptography.Dare.ContainerPersistenceStoreThreadSafe)">
            <summary>
            Notifies the master store that a handle has been relinquished on a persistence store.
            This allows the master to see if the persistence store should be kept in memory or disposed.
            It might well make sense to allow stores to persist some length of time until
            there is a need to free up memory.
            </summary>
            <param name="PersistenceStore"></param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.ContainerPersistenceStoreHandleRead">
            <summary>
            A thread safe persistence store read handle.
            
            The thread waits to acquire a read lock on the persistence store before proceeding.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.ContainerPersistenceStoreHandleRead.Timeout">
            <summary>
            Timeout for lock acquisition in milliseconds. A time span of -1 represents 
            a wait forever.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.ContainerPersistenceStoreHandleRead.Pinned">
            <summary>
            If true, the persistence store is pinned and the in-memory structures for 
            accessing the store will be maintained even there are no outstanding read or
            write handles.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.ContainerPersistenceStoreHandleRead.PersistenceStore">
            <summary>
            The persistence store.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerPersistenceStoreHandleRead.#ctor(System.Boolean)">
            <summary>
            Protected constructor sets the value of Pinned.
            </summary>
            <param name="Pinned">If true, maintain the persistence store in memory
            even when there are no outstanding access handles.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerPersistenceStoreHandleRead.#ctor(Goedel.Cryptography.Dare.ContainerPersistenceStoreThreadSafe,System.Boolean)">
            <summary>
            Construct a read handle for the specified persistence store.
            </summary>
            <param name="PersistenceStore">The persistence store to create a handle for.</param>
            <param name="Pinned">If true, maintain the persistence store in memory
            even when there are no outstanding access handles.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerPersistenceStoreHandleRead.Disposing">
            <summary>
            The class specific disposal routine. This frees the read lock on the resource
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerPersistenceStoreHandleRead.Contains(System.String)">
            <summary>
            Determines if a object instance with the specified unique identifier is registered.
            </summary>
            <param name="UniqueID">The unique identifier of the object instance to locate.</param>
            <returns>True if found, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerPersistenceStoreHandleRead.Get(System.String)">
            <summary>
            Get object instance by unique identifier
            </summary>
            <param name="UniqueID">The unique identifier of the object instance to locate.</param>
            <returns>True if found, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerPersistenceStoreHandleRead.GetIndex(System.String,System.Boolean)">
            <summary>
            Return an index for the specified key, creating it if necessary.
            </summary>
            <param name="Key">The key for which the index is requested.</param>
            <param name="Create">If true, will create an index if none is found.</param>
            <returns>The index.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerPersistenceStoreHandleRead.Last(System.String,System.String)">
            <summary>
            The last object instance that matches the specified key/value condition.
            </summary>
            <param name="Key">The key</param>
            <param name="Value">The value to match</param>
            <returns>The object instance if found, otherwise false.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Dare.ContainerPersistenceStoreHandleWrite">
            <summary>
            A thread safe persistence store read/write handle. 
            
            The thread waits to acquire an upgradeable lock on the persistence store before proceeding.
            This requires that no other thread be in upgradeable or write mode but allows other threads
            to have an outstanding read handle. 
            
            While in upgradeable mode, the handle supports the same methods as a read handle but will
            wait to acquire a write lock on the store before executing any of the write methods.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerPersistenceStoreHandleWrite.#ctor(Goedel.Cryptography.Dare.ContainerPersistenceStoreThreadSafe,System.Boolean)">
            <summary>
            Construct a write handle for the specified persistence store.
            </summary>
            <param name="PersistenceStore">The persistence store to create a handle for.</param>
            <param name="Pinned">If true, maintain the persistence store in memory
            even when there are no outstanding access handles.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerPersistenceStoreHandleWrite.Disposing">
            <summary>
            The class specific disposal routine. This frees the read lock on the resource
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerPersistenceStoreHandleWrite.Delete(System.String,Goedel.Cryptography.Dare.Transaction)">
            <summary>
            Delete a persistence entry
            </summary>
            <threadsafety static="true" instance="true"/>
            <param name="UniqueID">The UniqueID of the object to delete</param>
            <param name="transaction">Optional transaction context. If specified, the 
            data is written in the specified transaction context allowing multiple 
            transactions to be staged and committed all or nothing.</param>
            <returns>True if the object was updated, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerPersistenceStoreHandleWrite.New(Goedel.Protocol.JsonObject,Goedel.Cryptography.Dare.Transaction)">
            <summary>
            Create a new persistence entry.
            </summary>
            <threadsafety static="true" instance="true"/>
            <param name="Object">Object to create</param>
            <param name="transaction">Optional transaction context. If specified, the 
            data is written in the specified transaction context allowing multiple 
            transactions to be staged and committed all or nothing.</param>
            <returns>The persistence entry.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerPersistenceStoreHandleWrite.Update(Goedel.Protocol.JsonObject,System.Boolean,Goedel.Cryptography.Dare.Transaction)">
            <summary>
            Update an existing persistence entry
            </summary>
            <threadsafety static="true" instance="true"/>
            <param name="Object">The new object value</param>
            <param name="Create">If true, create a new value if one does not already exist</param>
            <param name="transaction">Optional transaction context. If specified, the 
            data is written in the specified transaction context allowing multiple 
            transactions to be staged and committed all or nothing.</param>
            <returns>The persistence entry.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Dare.ContainerPersistenceStoreThreadSafe">
            <summary>
            A persistence store with support for thread safe locking.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.ContainerPersistenceStoreThreadSafe.ReaderWriterLock">
            <summary>
            The reader/writer lock
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.ContainerPersistenceStoreThreadSafe.ID">
            <summary>
            The identifier assigned by the persistence store directory.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerPersistenceStoreThreadSafe.#ctor(System.String,System.String,System.String,Goedel.IO.FileStatus,Goedel.Cryptography.Dare.SequenceType,Goedel.Cryptography.Dare.DarePolicy,Goedel.Protocol.DataEncoding)">
            <summary>
            Open or create a persistence store in specified mode with 
            the specified file name, content type and optional comment.
            </summary>
            <param name="FileName">Log file.</param>
            <param name="Type">Type of data to store (the schema name).</param>
            <param name="Comment">Comment to be written to the log.</param>
            <param name="ContainerType">The Container type.</param>
            <param name="policy">The cryptographic policy to be applied to the container.</param>
            <param name="DataEncoding">The data encoding.</param>
            <param name="FileStatus">The file status in which to open the container.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerPersistenceStoreThreadSafe.GetHandleRead(System.Boolean)">
            <summary>
            Return a read handle for the persistence store
            </summary>
            <param name="Pinned">If true, maintain the persistence store in memory
            even when there are no outstanding access handles.</param>
            <returns>The read handle</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerPersistenceStoreThreadSafe.GetHandleWrite(System.Boolean)">
            <summary>
            Return a write handle for the persistence store
            </summary>
            <param name="Pinned">If true, maintain the persistence store in memory
            even when there are no outstanding access handles.</param>
            <returns>The read handle</returns>
        </member>
        <member name="T:Goedel.Cryptography.Dare.ContainerMerkleTree">
            <summary>
            Simple container that supports the append and index functions but does not 
            provide for cryptographic integrity.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="P:Goedel.Cryptography.Dare.ContainerMerkleTree.DigestRequired">
            <summary>If true, the Container type requires a digest calculated on the payload.</summary> 
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerMerkleTree.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerMerkleTree.MakeNewContainer(Goedel.Cryptography.Dare.JbcdStream)">
            <summary>
            Create a new container file of the specified type and write the initial
            data record
            </summary>
            <param name="jbcdStream">The underlying JBCDStream stream. This MUST be opened
            in a read access mode and should have exclusive read access. All existing
            content in the file will be overwritten.</param>
            <returns>The newly constructed container.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerMerkleTree.PrepareFrame(Goedel.Cryptography.Dare.SequenceInfo)">
            <summary>
            Prepare the ContainerInfo data for the frame.
            </summary>
            <param name="containerInfo">The frame to prepare.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerMerkleTree.RegisterFrame(Goedel.Cryptography.Dare.SequenceInfo,System.Int64)">
            <summary>
            Register a frame in the container access dictionaries.
            </summary>
            <param name="containerInfo">Frame header</param>
            <param name="position">Position of the frame</param>
        </member>
        <member name="F:Goedel.Cryptography.Dare.ContainerMerkleTree.FrameDigestDictionary">
            <summary>
            Dictionary mapping the frame index to the corresponding digest value.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerMerkleTree.FillDummyTrailer(Goedel.Cryptography.Dare.CryptoStack)">
            <summary>
            Pre-populate the dummy trailer so as to allow the length to be calculated.
            </summary>
            <returns>The dummy trailer.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerMerkleTree.MakeTrailer(Goedel.Cryptography.Dare.DareTrailer@)">
             <summary>
             The dummy trailer to add to the end of the frame.
             </summary>
            <param name="trailer">The trailer to augment.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerMerkleTree.GetTreeDigest(System.Int64,System.Byte[])">
            <summary>
            Calculate the digest of the specified tree node
            </summary>
            <param name="frame">The frame number</param>
            <param name="contentDigest">The content digest</param>
            <returns>The calculated digest</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerMerkleTree.DigestFrame(System.Int64,System.Byte[])">
            <summary>
            Obtain the digest value for a frame.
            </summary>
            <param name="frame">The frame index.</param>
            <param name="right">The digest of the rightmost component.</param>
            <returns>The calculated digest.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerMerkleTree.GetFrameDigest(System.Int64)">
            <summary>
            Get the digest value of the specified frame.
            </summary>
            <param name="Frame">The frame index.</param>
            <returns>The digest value.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerMerkleTree.CheckSequence(System.Collections.Generic.List{Goedel.Cryptography.Dare.DareHeader})">
            <summary>
            Perform sanity checking on a list of container headers.
            </summary>
            <param name="headers">List of headers to check</param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.PersistenceStore">
            <summary>
            Persistence store based on a container interface.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.PersistenceStore.Container">
            <summary>The underlying container.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.PersistenceStore.FrameCount">
            <summary>The value of the last frame index</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.PersistenceStore.Disposing">
            <summary>
            The disposal routine. This is wrapped to provide the IDisposable interface. 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.PersistenceStore.EventNew">
            <summary>Tag for new event</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.PersistenceStore.EventUpdate">
            <summary>Tag for Update event</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.PersistenceStore.EventDelete">
            <summary>Tag for Delete event</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.PersistenceStore.Encoding">
            <summary>
            The default data encoding of payload items.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.PersistenceStore.ObjectIndex">
            <summary>
            Index of items by _PrimaryKey
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.PersistenceStore.DeletedObjects">
            <summary>
            Index of items by _PrimaryKey
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.PersistenceStore.IndexDictionary">
            <summary>
            Dictionary mapping keywords to index for that keyword.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.PersistenceStore.GetEnumerator">
            <summary>Return an enumerator over a set of catalog items</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.PersistenceStore.#ctor(System.String,System.String,System.String,Goedel.IO.FileStatus,Goedel.Cryptography.Dare.SequenceType,Goedel.Cryptography.Dare.DarePolicy,Goedel.Protocol.DataEncoding,Goedel.Cryptography.IKeyLocate,System.Boolean,System.Boolean)">
            <summary>
            Open or create a persistence store in specified mode with 
            the specified file name, content type and optional comment.
            </summary>
            <param name="policy">The cryptographic policy to be applied to the container.</param>
            <param name="fileName">Log file.</param>
            <param name="contentType">Type of data to store (the schema name).</param>
            <param name="comment">Comment to be written to the log.</param>
            <param name="containerType">The Container type.</param>
            <param name="dataEncoding">The data encoding.</param>
            <param name="fileStatus">The file status in which to open the container.</param>
            <param name="keyCollection">The key collection to use to resolve private keys.</param>
            <param name="readContainer">If true read the container to initialize the persistence store.</param>
            <param name="decrypt">If false, the contents of the store will never be decrypted (deprecated, use CatalogBlind)</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.PersistenceStore.#ctor(Goedel.Cryptography.Dare.Sequence,Goedel.Cryptography.IKeyLocate,System.Boolean)">
            <summary>
            Create a persisetence store round an already opened container.
            </summary>
            <param name="container"></param>
            <param name="readContainer"></param>
            <param name="keyLocate">The key collection to be used to resolve keys</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.PersistenceStore.FastReadContainer">
            <summary>
            Read the container contents in fast mode generating indexes only without reading contents.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.PersistenceStore.ReadContainer(Goedel.Cryptography.IKeyLocate,Goedel.Cryptography.Dare.SequenceIntegrity)">
            <summary>
            Read a container from the first frame to the last.
            </summary>
            <param name="containerIntegrity">Specifies the degree of container integrity checking to perform.</param>
            <param name="keyLocate">The key collection to be used to resolve keys</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.PersistenceStore.Apply(Goedel.Cryptography.Dare.DareEnvelope)">
            <summary>
            Apply the specified message to the container.
            </summary>
            <param name="dareMessage"></param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.PersistenceStore.CommitTransaction(Goedel.Cryptography.Dare.SequenceFrameIndex,Goedel.Protocol.JsonObject)">
            <summary>
            Commit a transaction to memory.
            </summary>
            <param name="frameIndex">The container position</param>
            <param name="jSONObject">The object being committed in deserialized form.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.PersistenceStore.MemoryCommitNew(Goedel.Cryptography.Dare.StoreEntry)">
            <summary>
            Commit a New transaction to memory
            </summary>
            <param name="containerStoreEntry">The container store entry representing the transaction</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.PersistenceStore.MemoryCommitUpdate(Goedel.Cryptography.Dare.StoreEntry)">
            <summary>
            Commit an Update transaction to memory
            </summary>
            <param name="containerStoreEntry">The container store entry representing the transaction</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.PersistenceStore.MemoryCommitDelete(Goedel.Cryptography.Dare.StoreEntry)">
            <summary>
            Commit a Delete transaction to memory
            </summary>
            <param name="containerStoreEntry">The container store entry representing the transaction</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.PersistenceStore.Prepare(Goedel.Cryptography.Dare.ContentMeta,Goedel.Protocol.JsonObject)">
            <summary>
            Prepare a transaction to be committed.
            </summary>
            <param name="contentInfo">The content metadata</param>
            <param name="jsonObject">The object.</param>
            
            <returns>The prepared envelope.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.PersistenceStore.CommitToContainer(Goedel.Cryptography.Dare.DareEnvelope,Goedel.Protocol.JsonObject,Goedel.Cryptography.Dare.StoreEntry)">
            <summary>
            Write a persistence entry to the container.
            </summary>
            <param name="item">The object to write.</param>
            <param name="previous">The previous entry.</param>
            <param name="dareEnvelope">The serialized persistence data.</param>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.PersistenceStore.PrepareNew(Goedel.Protocol.JsonObject,Goedel.Cryptography.CryptoKey)">
            <summary>
            Create a new persistence entry.
            </summary>
            <param name="jsonObject">Object to create</param>
            <param name="encryptionKey">Key under which the item is to be encrypted.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.PersistenceStore.PrepareUpdate(Goedel.Cryptography.Dare.StoreEntry@,Goedel.Protocol.JsonObject,System.Boolean,Goedel.Cryptography.CryptoKey)">
            <summary>
            Create a container header to update an existing persistence entry
            </summary>
            <param name="previous">The previous container store entry for this object</param>
            <param name="jsonObject">The new object value</param>
            <param name="create">If true, create a new value if one does not already exist</param>
            <param name="encryptionKey">Key under which the item is to be encrypted.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.PersistenceStore.PrepareDelete(Goedel.Cryptography.Dare.StoreEntry@,System.String)">
            <summary>
            Delete a persistence entry
            </summary>
            <param name="previous">The previous container store entry for this object</param>
            <param name="uniqueID">The UniqueID of the object to delete</param>
            <returns>True if the object was updated, otherwise false.</returns>
            
        </member>
        <member name="M:Goedel.Cryptography.Dare.PersistenceStore.New(Goedel.Protocol.JsonObject,Goedel.Cryptography.Dare.Transaction)">
            <summary>
            Create a new persistence entry.
            </summary>
            <param name="jsonObject">Object to create</param>
            <param name="transaction">The transaction context in which to prepare the update.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.PersistenceStore.Update(Goedel.Protocol.JsonObject,System.Boolean,Goedel.Cryptography.Dare.Transaction)">
            <summary>
            Update an existing persistence entry
            </summary>
            <param name="jsonObject">The new object value</param>
            <param name="create">If true, create a new value if one does not already exist</param>
            <param name="transaction">The transaction context in which to perform the update.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.PersistenceStore.Delete(System.String,Goedel.Cryptography.Dare.Transaction)">
            <summary>
            Delete a persistence entry
            </summary>
            <threadsafety static="true" instance="true"/>
            <param name="uniqueID">The UniqueID of the object to delete</param>
            <param name="transaction">The transaction context in which to perform the update.</param>
            <returns>True if the object was updated, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.PersistenceStore.GetContainerStoreIndex(System.String,System.Boolean)">
            <summary>
            Return an index for the specified key, creating it if necessary.
            </summary>
            <param name="key">The key for which the index is requested.</param>
            <param name="create">If true, will create an index if none is found.</param>
            <returns>The index.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.PersistenceStore.GetIndex(System.String,System.Boolean)">
            <summary>
            Return an index for the specified key, creating it if necessary.
            </summary>
            <param name="key">The key for which the index is requested.</param>
            <param name="create">If true, will create an index if none is found.</param>
            <returns>The index.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.PersistenceStore.Get(System.String)">
            <summary>
            Get object instance by unique identifier
            </summary>
            <param name="uniqueID">The unique identifier of the object instance to locate.</param>
            <returns>True if found, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.PersistenceStore.Contains(System.String)">
            <summary>
            Determines if a object instance with the specified unique identifier is registered.
            </summary>
            <param name="uniqueID">The unique identifier of the object instance to locate.</param>
            <returns>True if found, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.PersistenceStore.Last(System.String,System.String)">
            <summary>
            The last object instance that matches the specified key/value condition.
            </summary>
            <param name="key">The key</param>
            <param name="value">The value to match</param>
            <returns>The object instance if found, otherwise false.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Dare.Transaction">
            <summary>
            Base class for transactions.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.ContainerTree">
            <summary>
            Simple container that supports the append and index functions but does not 
            provide for cryptographic integrity.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerTree.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerTree.MakeNewContainer(Goedel.Cryptography.Dare.JbcdStream)">
            <summary>
            Create a new container file of the specified type and write the initial
            data record
            </summary>
            <param name="jbcdStream">The underlying JBCDStream stream. This MUST be opened
            in a read access mode and should have exclusive read access. All existing
            content in the file will be overwritten.</param>
            <returns>The newly constructed container.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerTree.PrepareFrame(Goedel.Cryptography.Dare.SequenceWriter)">
            <summary>
            Append the header to the frame. This is called after the payload data
            has been passed using AppendPreprocess.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerTree.PrepareFrame(Goedel.Cryptography.Dare.SequenceInfo)">
            <summary>
            Prepare the ContainerInfo data for the frame.
            </summary>
            <param name="containerInfo">The frame to prepare.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerTree.FillDictionary(Goedel.Cryptography.Dare.SequenceInfo,System.Int64,System.Int64)">
            <summary>
            Initialize the dictionaries used to manage the tree by registering the set
            of values leading up to the apex value.
            </summary>
            <param name="containerInfo">Final frame header</param>
            <param name="firstPosition">Position of frame 1</param>
            <param name="positionLast">Position of the last frame</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerTree.Move(System.Int64)">
            <summary>
            Move to the specified frame index.
            </summary>
            <param name="index">Frame index to move to</param>
            <returns>If the move to the specified index succeeded, returns <code>true</code>.
            Otherwise, returns <code>false</code>.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerTree.MoveToIndex(System.Int64)">
            <summary>
            Move to the frame with index Position in the file. 
            <para>Since the file format only supports sequential access, this is slow.</para>
            </summary>
            <param name="index">The frame index to move to</param>
            <returns>If success, the frame index.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerTree.GetFramePosition(System.Int64)">
            <summary>
            Get the frame position.
            </summary>
            <param name="frame">The frame index</param>
            <returns>The frame position.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerTree.PreviousFramePosition(System.Int64)">
            <summary>
            Returns the start position of the prior frame in the tree.
            </summary>
            <param name="frameIndex">The Frame Index</param>
            <returns>The position of the frame.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerTree.PreviousFrame(System.Int64)">
            <summary>
            Returns the index of the prior frame in the tree.
            </summary>
            <param name="frame">The frame index</param>
            <returns>The preceding frame index.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerTree.CheckSequence(System.Collections.Generic.List{Goedel.Cryptography.Dare.DareHeader})">
            <summary>
            Perform sanity checking on a list of container headers.
            </summary>
            <param name="headers">List of headers to check</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerTree.VerifySequence">
            <summary>
            Verify container contents by reading every frame starting with the first and checking
            for integrity. This is likely to take a very long time.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.CryptoParameters">
            <summary>
            Specifies a set of cryptographic parameters to be used to create 
            CryptoStacks
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.CryptoParameters.KeyLocate">
            <summary>The key collection to use to resolve names to keys</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.CryptoParameters.BaseSeed">
            <summary>The set of keys to encrypt to.</summary>
            
            <summary>
            The base seed provided as a verbatim value or provided through a key exchange to be 
            used together with the salt data to derive the keys and initialization data for 
            cryptographic operations.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoParameters.KeySize">
            <summary>The key size in bits determined by the value of <see cref="P:Goedel.Cryptography.Dare.CryptoParameters.EncryptId"/></summary> 
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoParameters.BlockSize">
            <summary>The block size in bits determined by the value of <see cref="P:Goedel.Cryptography.Dare.CryptoParameters.EncryptId"/></summary> 
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoParameters.BlockSizeByte">
            <summary>The block size in bytes determined by the value of <see cref="P:Goedel.Cryptography.Dare.CryptoParameters.EncryptId"/></summary> 
        </member>
        <member name="F:Goedel.Cryptography.Dare.CryptoParameters.KeyExchangeIndex">
            <summary>The last frame in which a key exchange was performed.</summary> 
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoParameters.EncryptionKeys">
            <summary>The set of encryption keys under which key exchanges are to be performed.</summary> 
            <remarks>If the value <see cref="P:Goedel.Cryptography.Dare.CryptoParameters.EncryptId"/> is to be overriden, this should be done
            first so as to avoid recalculating the parameters.</remarks>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoParameters.SignerKeys">
             <summary>The set of keys to use to sign</summary>
            <remarks>If the value <see cref="F:Goedel.Cryptography.Dare.CryptoParameters.DigestId"/> is to be overriden, this should be done
            first so as to avoid recalculating the parameters.</remarks>
        </member>
        <member name="F:Goedel.Cryptography.Dare.CryptoParameters.DigestId">
            <summary>The payload digest algorithm.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoParameters.EncryptId">
            <summary>The payload encryption algorithm.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoParameters.Encrypt">
            <summary>
            If true, data is to be encrypted.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoParameters.Digest">
            <summary>
            If true, data is to be digested.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoParameters.SetEncrypt">
            <summary>Require payload encryption.</summary> 
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoParameters.SetDigest">
            <summary>Require payload digest.</summary> 
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoParameters.Sign">
            <summary>
            If true, data is to be signed.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoParameters.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoParameters.#ctor(Goedel.Cryptography.IKeyLocate,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},Goedel.Cryptography.CryptoKey,Goedel.Cryptography.CryptoKey,Goedel.Cryptography.CryptoAlgorithmId,Goedel.Cryptography.CryptoAlgorithmId)">
            <summary>
            Create a CryptoParameters instance to encode data for the specified recipients and
            signers using the specified KeyCollection to resolve the identifiers.
            </summary>
            <param name="keyCollection">The Key collection to be used to resolve names.</param>
            <param name="recipients">The public keys to be used to encrypt.</param>
            <param name="signers">The private keys to be used in signing.</param>
            <param name="recipient">The public keys to be used to encrypt.</param>
            <param name="signer">The private keys to be used in signing.</param>
            <param name="encryptID">The cryptographic enhancement to be applied to the
            content.</param>
            <param name="digestID">The digest algorithm to be applied to the message
            encoding.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoParameters.AddEncrypt(System.String)">
            <summary>
            Add a recipient entry.
            </summary>
            <param name="AccountId">Identifier of the key to add.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoParameters.AddSign(System.String)">
            <summary>
            Add a signer entry.
            </summary>
            <param name="AccountId">Identifier of the key to add.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoParameters.SetKeyExchange(Goedel.Cryptography.Dare.DareHeader)">
            <summary>
            Perform the steps necessary to 
            </summary>
            <param name="header"></param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoParameters.KeyExchange">
            <summary>
            Perform a new key exchange and 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Goedel.Cryptography.Dare.CryptoParametersSequence">
            <summary>
            Specifies a set of cryptographic parameters to be used to create 
            CryptoStacks
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoParametersSequence.#ctor(Goedel.Cryptography.Dare.SequenceType,Goedel.Cryptography.Dare.DareHeader,System.Boolean,Goedel.Cryptography.IKeyLocate)">
            <summary>
            Create cryptoparameters for a container from the specified policy.
            </summary>
            <param name="containerType">The container type.</param>
            <param name="header">Header specifying the governing policy.</param>
            <param name="recover">Attempt to recover the master secret.</param>
            <param name="keyLocate">Key location instance.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoParametersSequence.ReuseKeyExchange(System.Int32,System.Int32@)">
            <summary>
            Applies the security policy and container status information to determine if a prior
            key exchange can be reused. If the value false is returned, a new key exchange is
            required. Otherwise, the value <paramref name="previousFrame"/> is set to the index value
            of the prior frame where the key exchange can be found.
            </summary>
            <param name="currentFrame"></param>
            <param name="previousFrame"></param>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoParametersSequence.SetKeyExchange(Goedel.Cryptography.Dare.DareHeader)">
            <summary>
            Perform the steps necessary to 
            </summary>
            <param name="header"></param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoParametersSequence.GetNullTrailer">
            <summary>
            Get a trailer for an empty payload.
            </summary>
            <returns>The trailer with a null digest value.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoParametersSequence.CombineDigest(System.Byte[],System.Byte[])">
            <summary>
            Combine digests to produce the digest for a node.
            </summary>
            <param name="first">The left hand digest.</param>
            <param name="second">The right hand digest.</param>
            <returns>The digest value.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Dare.CryptoStack">
            <summary>
            Creates a factory for generating a stack of CryptoStream objects for processing
            a stream of data.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.CryptoStack.InfoKeyMac">
            <summary>Constant for deriving a MAC key.</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.CryptoStack.InfoKeyEncrypt">
            <summary>Constant for deriving an encryption key.</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.CryptoStack.InfoKeyIv">
            <summary>Constant for deriving an initialization vector.</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.CryptoStack.Recipients">
            <summary>
            The recipient information fields.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.CryptoStack.EncryptionAlgorithm">
            <summary>
            The JOSE algorithm identifier for the encryption algorithm.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.CryptoStack.DigestAlgorithm">
            <summary>
            The JOSE algorithm identifier for the encryption algorithm.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.CryptoStack.Salt">
            <summary>
            The base salt value.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStack.SignerKeys">
            <summary>
            The Keys to be used to sign the message. 
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStack.BaseSeed">
            <summary>
            The base seed provided as a verbatim value or provided through a key exchange to be 
            used together with the salt data to derive the keys and initialization data for 
            cryptographic operations.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStack.DigestId">
            <summary>The authentication algorithm to use</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStack.EncryptId">
            <summary>The encryption algorithm to use</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStack.KeySize">
            <summary>The key size in bits determined by the value of <see cref="P:Goedel.Cryptography.Dare.CryptoStack.EncryptId"/></summary> 
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStack.BlockSize">
            <summary>The block size in bits determined by the value of <see cref="P:Goedel.Cryptography.Dare.CryptoStack.EncryptId"/></summary> 
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStack.BlockSizeByte">
            <summary>The block size in bytes.</summary> 
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStack.GetKeyIdentifier">
            <summary>Returns a UDF key identifier for the master secret</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStack.CipherTextLength(System.Int64)">
            <summary>
            Calculate the ciphertext length for a specified plaintext length.
            </summary>
            <param name="plaintextLength">The input plaintext length.</param>
            <returns>The ciphertext length using the current cipher.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStack.MakeSalt(System.Int64)">
            <summary>
            Convert an int64 counter to a unique salt value.
            </summary>
            <param name="saltValue"></param>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStack.CalculateParameters(System.Byte[],System.Byte[]@,System.Byte[]@,System.Byte[]@)">
            <summary>
            Calculate key parameters 
            </summary>
            <param name="thisSalt">The salt value to use</param>
            <param name="keyEncrypt">The derrived Encryption key.</param>
            <param name="keyMac">The derrived MAC key.</param>
            <param name="iv">The derrivedIV.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStack.GetTrailer(Goedel.Cryptography.Dare.CryptoStackStreamWriter)">
            <summary>
            Construct the trailer value.
            </summary>
            <param name="writer">The cryptographic stream used to write the payload
            data.</param>
            <returns>The trailer value.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStack.GetEncoder(System.IO.Stream,Goedel.Cryptography.Dare.PackagingFormat,System.Int64,System.Byte[])">
            <summary>
            Construct a stream encoder for the cryptographic parameters. The encoder may
            be used in either mode (read/write).
            </summary>
            <param name="stream">The encoded stream.</param>
            <param name="packagingFormat">The packaging format to use.</param>
            <param name="contentLength">The content length of the payload data.</param>
            <param name="extraSalt">Additional salt material.</param>
            <returns>Encoder parameters.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStack.Encode(System.Byte[],System.Byte[])">
            <summary>
            Encode a data block
            </summary>
            <param name="data">The data to encode.</param>
            <param name="extraSalt">Additional salt value.</param>
            <returns>The encoded data.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStack.Encode(System.Byte[],Goedel.Cryptography.Dare.DareTrailer@)">
            <summary>
            Encode a payload data block
            </summary>
            <param name="data">The data to encode.</param>
            <param name="trailer">Prototype trailer containing the calculated digest value.</param>
            <returns>The encoded data.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStack.EncodeEDS(System.Byte[],System.Byte[])">
            <summary>
            Encode a data block as an EDS.
            </summary>
            <param name="data">The data to encode.</param>
            <param name="extraSalt">Additional salt value.</param>
            <returns>The encoded data.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStack.GetDecoder(System.IO.Stream,System.IO.Stream@,System.Int64,System.Byte[])">
            <summary>
            Construct a stream decoder from the cryptographic data provided. Data is read
            from <paramref name="inputStream"/> 
            </summary>
            <param name="inputStream">The input stream.</param>
            <param name="contentLength">The content length if known or -1 if variable length
            encoding is to be used.</param>
            <param name="outputStream">The stream to read to obtain the decrypted data.</param>
            <param name="saltSuffix">Additional value to be added to the beginning of the 
            message salt to vary it</param>
            <returns>The decoder.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStack.GetDecoder(Goedel.Protocol.JsonBcdReader,System.IO.Stream@,System.Int64,System.Byte[],System.Boolean)">
            <summary>
            Construct a stream decoder from the cryptographic data provided.
            </summary>
            <param name="jsonbcdReader">The stream to decode from.</param>
            <param name="contentLength">The content length if known or -1 if variable length
            encoding is to be used.</param>
            <param name="reader">The stream to read to obtain the decrypted data.</param>
            <param name="saltSuffix">Additional value to be added to the end of the 
            message salt to vary it</param>
            <param name="decrypt">If true, attempt decryption and throw an exception if
            this fails.</param>
            <returns>The decoder.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStack.DecodeEDS(System.Byte[])">
            <summary>
            Decode a data block written as an EDS.
            </summary>
            <param name="data">The data to encode.</param>
            <returns>The decoded data.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStack.DecodeBody(System.Byte[])">
            <summary>
            Decode a data block written as an EDS.
            </summary>
            <param name="data">The data to encode.</param>
            <returns>The decoded data.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStack.GetDummyTrailer">
            <summary>
            Calculate the length of the trailer.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Goedel.Cryptography.Dare.CryptoStackDecode">
            <summary>
            Cryptographic stack to decode an envelope.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStackDecode.SignerKeys">
            <summary>
            The Keys to be used to sign the message. 
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStackDecode.BaseSeed">
            <summary>
            The base seed provided as a verbatim value or provided through a key exchange to be 
            used together with the salt data to derive the keys and initialization data for 
            cryptographic operations.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStackDecode.DigestId">
            <summary>The authentication algorithm to use</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStackDecode.EncryptId">
            <summary>The encryption algorithm to use</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStackDecode.BlockSizeByte">
            <summary>The block size in bytes.</summary> 
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStackDecode.KeySize">
            <summary>The key size in bits determined by the value of <see cref="P:Goedel.Cryptography.Dare.CryptoStackDecode.EncryptId"/></summary> 
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStackDecode.BlockSize">
            <summary>The block size in bits determined by the value of <see cref="P:Goedel.Cryptography.Dare.CryptoStackDecode.EncryptId"/></summary> 
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStackDecode.#ctor(Goedel.Cryptography.CryptoAlgorithmId,Goedel.Cryptography.CryptoAlgorithmId,System.Collections.Generic.List{Goedel.Cryptography.Dare.DareRecipient},System.Collections.Generic.List{Goedel.Cryptography.Dare.DareSignature},Goedel.Cryptography.IKeyLocate,System.Boolean)">
            <summary>
            Create a CryptoStack Instance to decode data with the specified cryptographic
            parameters.
            </summary>
            <param name="encryptID">The keyed cryptographic enhancement to be applied to the content.</param>
            <param name="digest">The digest algorithm to be applied to the message.</param>
            <param name="recipients">The recipient information</param>
            <param name="signatures">The message signatures.</param>
            <param name="keyCollection">The key collection to be used to resolve private keys.</param>
            <param name="decrypt">If true, prepare to decrypt the payload.</param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.CryptoStackEncode">
            <summary>
            Cryptographic stack to encode an envelope.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStackEncode.SignerKeys">
            <summary>
            The Keys to be used to sign the message. 
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStackEncode.BaseSeed">
            <summary>
            The base seed provided as a verbatim value or provided through a key exchange to be 
            used together with the salt data to derive the keys and initialization data for 
            cryptographic operations.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStackEncode.DigestId">
            <summary>The authentication algorithm to use</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStackEncode.EncryptId">
            <summary>The encryption algorithm to use</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStackEncode.BlockSizeByte">
            <summary>The block size in bytes.</summary> 
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStackEncode.KeySize">
            <summary>The key size in bits determined by the value of <see cref="P:Goedel.Cryptography.Dare.CryptoStackEncode.EncryptId"/></summary> 
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStackEncode.BlockSize">
            <summary>The block size in bits determined by the value of <see cref="P:Goedel.Cryptography.Dare.CryptoStackEncode.EncryptId"/></summary> 
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStackEncode.#ctor(Goedel.Cryptography.Dare.CryptoParameters,Goedel.Cryptography.Dare.DareHeader,System.Byte[],System.Collections.Generic.List{System.Byte[]})">
            <summary>
            Create a CryptoStack instance to encode data with the specified cryptographic
            parameters.
            </summary>
            <param name="cryptoParameters">The cryptographic parameters to create the stack from.</param>
            <param name="header">Header to write the key exchange information to</param>
            <param name="cloaked">Data to be converted to an EDS and presented as a cloaked header.</param>
            <param name="dataSequences">Data sequences to be converted to an EDS and presented 
                as an EDSS header entry.</param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.PackagingFormat">
            <summary>
            Packing formats
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.PackagingFormat.Direct">
            <summary>
            Package directly without padding
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.PackagingFormat.EDS">
            <summary>
            Package as an Enhanced Data Sequence.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.PackagingFormat.Body">
            <summary>
            Package as an envelope body.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.CryptoStackStream">
            <summary>
            Tracks the cryptography providers used to compute MACs and Digests.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStackStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStackStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStackStream.Stream">
            <summary>
            The externally accessible stream.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.CryptoStackStream.Mac">
            <summary>
            The Massage Authentication Code Transform.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.CryptoStackStream.Digest">
            <summary>
            The Digest Transform.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStackStream.MacValue">
            <summary>
            The computed MAC value.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStackStream.DigestValue">
            <summary>
            The computed Digest value.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStackStream.BytesRead">
            <summary>The number of bytes read</summary> 
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStackStream.BytesWrite">
            <summary>The number of bytes read</summary> 
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStackStream.#ctor(System.Security.Cryptography.HashAlgorithm,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Create a CryptoStack
            </summary>
            <param name="Mac">The Message Authentication Code Transform.</param>
            <param name="Digest">The Digest Transform.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStackStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a dummy stream. This may be a sink that simply discards the data (for 
            calculating digest values) or a passthrough that keeps the target stream open
            when the encryption stream is closed.
            </summary>
            <param name="Stream">The target stream. If null, output is simply discarded.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStackStream.Dispose(System.Boolean)">
            <summary>
            Dispose method, frees resources when disposing, 
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; 
            false to release only unmanaged resources.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStackStream.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStackStream.Disposing">
            <summary>
            The class specific disposal routine.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStackStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies bytes from the current buffered stream to an array (not supported).
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the 
            specified byte array with the values between <paramref name="offset"/> and 
            (<paramref name="offset"/> + <paramref name="count"/> - 1) 
            replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing 
            the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes 
            requested if that many bytes are not currently available, or zero (0) if the end of the stream 
            has been reached.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStackStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write data to the output stream.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from 
            <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/>
            at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStackStream.Close">
            <summary>
            Closes the current stream, completes calculation of cryptographic values (MAC/Digest)
            associated with the current stream. Does not close the target stream because that would
            be stupid.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStackStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written 
            to the underlying device.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStackStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking(is always false).
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStackStream.Position">
            <summary>
            Gets the position within the current stream. The set operation is not supported.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStackStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current buffered stream (not supported).
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStackStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the output frame.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStackStream.Length">
            <summary>
            Gets the frame length in bytes. 
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.CryptoStackStreamReader">
            <summary>
            Tracks the cryptography providers used to compute MACs and Digests.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStackStreamReader.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading (is always true).
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStackStreamReader.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing (is always false).
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStackStreamReader.#ctor(Goedel.Protocol.JsonBcdReader,System.Security.Cryptography.HashAlgorithm,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Create a CryptoStack
            </summary>
            <param name="stream"></param>
            <param name="mac"></param>
            <param name="digest"></param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStackStreamReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies bytes from the current buffered stream to an array 
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the 
            specified byte array with the values between <paramref name="offset"/> and 
            (<paramref name="offset"/> + <paramref name="count"/> - 1) 
            replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing 
            the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes 
            requested if that many bytes are not currently available, or zero (0) if the end of the stream 
            has been reached.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStackStreamReader.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write data to the output stream.(not supported).
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from 
            <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/>
            at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStackStreamReader.Close">
            <summary>
            Closes the current stream, completes calculation of cryptographic values (MAC/Digest)
            associated with the current stream. Does not close the target stream because that would
            be stupid.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.CryptoStackJBCDStreamReader">
            <summary>
            Tracks the cryptography providers used to compute MACs and Digests.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStackJBCDStreamReader.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading (is always false).
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStackJBCDStreamReader.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing(is always true).
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStackJBCDStreamReader.#ctor(System.IO.Stream,System.Security.Cryptography.HashAlgorithm,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Create a CryptoStack
            </summary>
            <param name="inputStream"></param>
            <param name="Mac"></param>
            <param name="Digest"></param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStackJBCDStreamReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies bytes from the current buffered stream to an array 
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the 
            specified byte array with the values between <paramref name="offset"/> and 
            (<paramref name="offset"/> + <paramref name="count"/> - 1) 
            replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing 
            the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes 
            requested if that many bytes are not currently available, or zero (0) if the end of the stream 
            has been reached.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStackJBCDStreamReader.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write data to the output stream.(not supported).
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from 
            <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/>
            at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.CryptoStackStreamWriter">
            <summary>
            Tracks the cryptography providers used to compute MACs and Digests.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStackStreamWriter.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading (is always false).
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStackStreamWriter.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing(is always true).
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.CryptoStackStreamWriter.Writer">
            <summary>
            The stream writer.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStackStreamWriter.#ctor(System.IO.Stream,Goedel.Cryptography.Dare.PackagingFormat,System.Security.Cryptography.HashAlgorithm,System.Security.Cryptography.HashAlgorithm,System.Int64)">
            <summary>
            Create a CryptoStack
            </summary>
            <param name="output">The target stream to be written to. This is wrapped in a pipe to prevent
            it being closed when the encryption stream is closed.</param>
            <param name="mac">The Message Authentication Code Transform.</param>
            <param name="digest">The Digest Transform.</param>
            <param name="packagingFormat">The packing format to use on the output.</param>
            <param name="payloadLength">The payload length including cryptographic
            enhancements.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStackStreamWriter.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies bytes from the current buffered stream to an array (not supported).
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the 
            specified byte array with the values between <paramref name="offset"/> and 
            (<paramref name="offset"/> + <paramref name="count"/> - 1) 
            replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing 
            the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes 
            requested if that many bytes are not currently available, or zero (0) if the end of the stream 
            has been reached.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStackStreamWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write data to the output stream.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from 
            <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/>
            at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStackStreamWriter.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written 
            to the underlying device.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.CryptoStackStreamWriter.Close">
            <summary>
            Closes the current stream, completes calculation of cryptographic values (MAC/Digest)
            associated with the current stream. Does not close the target stream because that would
            be stupid.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.SequenceType">
            <summary>Sequence types</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.SequenceType.Unknown">
            <summary>Undefined type</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.SequenceType.List">
            <summary>List</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.SequenceType.Digest">
            <summary>Digest</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.SequenceType.Chain">
            <summary>Chain</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.SequenceType.Tree">
            <summary>Tree</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.SequenceType.Merkle">
            <summary>Merkle</summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.PolicyEncryption">
            <summary>Encryption policies</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.PolicyEncryption.Unknown">
            <summary>Undefined type</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.PolicyEncryption.Once">
            <summary>Once</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.PolicyEncryption.Session">
            <summary>Session</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.PolicyEncryption.Isolated">
            <summary>Isolated</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.PolicyEncryption.None">
            <summary>None</summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.PolicySignature">
            <summary>Signature policies</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.PolicySignature.Unknown">
            <summary>Undefined type</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.PolicySignature.None">
            <summary>None</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.PolicySignature.Isolated">
            <summary>Isolated</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.PolicySignature.Last">
            <summary>Last</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.PolicySignature.Any">
            <summary>Any</summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.SequenceEvent">
            <summary>Sequence Events</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.SequenceEvent.Unknown">
            <summary>Undefined type</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.SequenceEvent.New">
            <summary>New</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.SequenceEvent.Update">
            <summary>Update</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.SequenceEvent.Delete">
            <summary>Delete</summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.DareConstants">
            <summary>
            Constants specified in hallambaker-mesh-udf
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.DareConstants.SequenceTypeListTag">
            <summary>Jose enumeration tag for SequenceType.List</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.DareConstants.SequenceTypeDigestTag">
            <summary>Jose enumeration tag for SequenceType.Digest</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.DareConstants.SequenceTypeChainTag">
            <summary>Jose enumeration tag for SequenceType.Chain</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.DareConstants.SequenceTypeTreeTag">
            <summary>Jose enumeration tag for SequenceType.Tree</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.DareConstants.SequenceTypeMerkleTag">
            <summary>Jose enumeration tag for SequenceType.Merkle</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareConstants.ToSequenceType(System.String)">
            <summary>
            Convert the string <paramref name="text"/> to the corresponding enumeration
            value.
            </summary>
            <param name="text">The string to convert.</param>
            <returns>The enumeration value.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareConstants.ToLabel(Goedel.Cryptography.Dare.SequenceType)">
            <summary>
            Convert the enumerated value <paramref name="data"/> to the corresponding string
            value.
            </summary>
            <param name="data">The enumerated value.</param>
            <returns>The text value.</returns>
        </member>
        <member name="F:Goedel.Cryptography.Dare.DareConstants.PolicyEncryptionOnceTag">
            <summary>Jose enumeration tag for PolicyEncryption.Once</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.DareConstants.PolicyEncryptionSessionTag">
            <summary>Jose enumeration tag for PolicyEncryption.Session</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.DareConstants.PolicyEncryptionIsolatedTag">
            <summary>Jose enumeration tag for PolicyEncryption.Isolated</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.DareConstants.PolicyEncryptionNoneTag">
            <summary>Jose enumeration tag for PolicyEncryption.None</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareConstants.ToPolicyEncryption(System.String)">
            <summary>
            Convert the string <paramref name="text"/> to the corresponding enumeration
            value.
            </summary>
            <param name="text">The string to convert.</param>
            <returns>The enumeration value.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareConstants.ToLabel(Goedel.Cryptography.Dare.PolicyEncryption)">
            <summary>
            Convert the enumerated value <paramref name="data"/> to the corresponding string
            value.
            </summary>
            <param name="data">The enumerated value.</param>
            <returns>The text value.</returns>
        </member>
        <member name="F:Goedel.Cryptography.Dare.DareConstants.PolicySignatureNoneTag">
            <summary>Jose enumeration tag for PolicySignature.None</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.DareConstants.PolicySignatureIsolatedTag">
            <summary>Jose enumeration tag for PolicySignature.Isolated</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.DareConstants.PolicySignatureLastTag">
            <summary>Jose enumeration tag for PolicySignature.Last</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.DareConstants.PolicySignatureAnyTag">
            <summary>Jose enumeration tag for PolicySignature.Any</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareConstants.ToPolicySignature(System.String)">
            <summary>
            Convert the string <paramref name="text"/> to the corresponding enumeration
            value.
            </summary>
            <param name="text">The string to convert.</param>
            <returns>The enumeration value.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareConstants.ToLabel(Goedel.Cryptography.Dare.PolicySignature)">
            <summary>
            Convert the enumerated value <paramref name="data"/> to the corresponding string
            value.
            </summary>
            <param name="data">The enumerated value.</param>
            <returns>The text value.</returns>
        </member>
        <member name="F:Goedel.Cryptography.Dare.DareConstants.SequenceEventNewTag">
            <summary>Jose enumeration tag for SequenceEvent.New</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.DareConstants.SequenceEventUpdateTag">
            <summary>Jose enumeration tag for SequenceEvent.Update</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.DareConstants.SequenceEventDeleteTag">
            <summary>Jose enumeration tag for SequenceEvent.Delete</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareConstants.ToSequenceEvent(System.String)">
            <summary>
            Convert the string <paramref name="text"/> to the corresponding enumeration
            value.
            </summary>
            <param name="text">The string to convert.</param>
            <returns>The enumeration value.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareConstants.ToLabel(Goedel.Cryptography.Dare.SequenceEvent)">
            <summary>
            Convert the enumerated value <paramref name="data"/> to the corresponding string
            value.
            </summary>
            <param name="data">The enumerated value.</param>
            <returns>The text value.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Dare.DareRecipient">
            <summary>
            
            </summary>
             <summary>
            
             Recipient information
             </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.DareRecipient.KDFInfo">
            <summary>
            Salt value used in the key derivation function.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareRecipient.#ctor">
            <summary>
            Default constructor. Used for serializatrion.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareRecipient.#ctor(System.Byte[],Goedel.Cryptography.CryptoKey)">
            <summary>
            Create a DARERecipient using the specified cryptographic parameters.
            </summary>
            <param name="masterKey">The master key</param>
            <param name="encryptionKey">The recipient encryption key.</param>
            <returns>The recipient informatin object.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareRecipient.#ctor(System.Byte[])">
            <summary>
            Create a DARERecipient using the specified cryptographic parameters.
            </summary>
            <param name="masterKey">The master key</param>
            <returns>The recipient informatin object.</returns>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareRecipient.KeyIdentifier">
             <summary>
            Key identifier for the encryption key.
            The Key identifier MUST be either a UDF fingerprint of a key or a Group Key Identifier
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareRecipient.KeyWrapDerivation">
             <summary>
            The key wrapping and derivation algorithms.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareRecipient.Epk">
             <summary>
            The key parameters of the ephemeral key as specified in JWE
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareRecipient.WrappedBaseSeed">
             <summary>
            The wrapped base seed. The base seed is encrypted under the result of the key exchange.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareRecipient.RecipientKeyData">
             <summary>
            The per-recipient key exchange data.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareRecipient._Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.DareRecipient.__Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareRecipient._Factory">
            <summary>
            Factory method
            </summary>
            <returns>Object of this type</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareRecipient.Serialize(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            </summary>
            <param name="writer">Output stream</param>
            <param name="wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareRecipient.SerializeX(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            Unlike the Serlialize() method, this method is not inherited from the
            parent class allowing a specific version of the method to be called.
            </summary>
            <param name="_writer">Output stream</param>
            <param name="_wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="_first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareRecipient.FromJson(Goedel.Protocol.JsonReader,System.Boolean)">
            <summary>
            Deserialize a tagged stream
            </summary>
            <param name="jsonReader">The input stream</param>
            <param name="tagged">If true, the input is wrapped in a tag specifying the type</param>
            <returns>The created object.</returns>		
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareRecipient.DeserializeToken(Goedel.Protocol.JsonReader,System.String)">
            <summary>
            Having read a tag, process the corresponding value data.
            </summary>
            <param name="jsonReader">The input stream</param>
            <param name="tag">The tag</param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.DareEnvelope">
            <summary>
            DARE Message class.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.DareEnvelope.ThisTagDictionary">
            <summary>
            Dictionary mapping tags to factory methods
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.Initialize">
            <summary>
            The module initializer. This is called during initialization of the module.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareEnvelope._Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.Factory">
            <summary>
            Factory method
            </summary>
            <returns>Object of this type</returns>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareEnvelope.DataSequences">
            <summary>
            Return the number of data sequences.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareEnvelope.JsonObject">
            <summary>The inner enveloped content.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareEnvelope.Index">
            <summary>Convenience accessor for the frame index.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareEnvelope.EnvelopeId">
            <summary>Convenience accessor for the envelope id.</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.DareEnvelope.PayloadDigest">
            <summary>The payload digest value calculated during decoding.</summary> 
        </member>
        <member name="F:Goedel.Cryptography.Dare.DareEnvelope.PayloadMac">
            <summary>The payload MAC value calculated during decoding.</summary> 
        </member>
        <member name="F:Goedel.Cryptography.Dare.DareEnvelope.PayloadLength">
            <summary>The length of the payload value</summary> 
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.Dispose">
            <summary>
            Dispose method, frees all resources.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.Dispose(System.Boolean)">
            <summary>
            Dispose method, frees resources when disposing, 
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.Disposing">
            <summary>
            The class specific disposal routine.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.#ctor">
            <summary>
            Create an empty DARE Message (for use by deserializers)
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.#ctor(Goedel.Cryptography.Dare.CryptoParameters,System.Byte[],Goedel.Cryptography.Dare.ContentMeta,System.Byte[],System.Collections.Generic.List{System.Byte[]})">
            <summary>
            Create a DARE Message instance.
            </summary>
            <param name="cryptoParameters">Specifies the cryptographic enhancements to
            be applied to this message.</param>
            <param name="contentMeta">The content metadata</param>
            <param name="plaintext">The payload plaintext. If specified, the plaintext will be used to
            create the message body. Otherwise the body is specified by calls to the Process method.</param>
            <param name="cloaked">Data to be converted to an EDS and presented as a cloaked header.</param>
            <param name="dataSequences">Data sequences to be converted to an EDS and presented 
                as an EDSS header entry.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.Encode(System.Byte[],System.String)">
            <summary>
            Create a new DARE Message from the specified parameters.
            </summary>
            <param name="plaintext">The payload plaintext.</param>
            <param name="contentType">The content type.</param>
            <returns>The new envelope</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.Encode(System.Byte[],Goedel.Cryptography.Dare.ContentMeta,Goedel.Cryptography.CryptoKey,Goedel.Cryptography.CryptoKey,System.Byte[],System.Collections.Generic.List{System.Byte[]})">
            <summary>
            Create a new DARE Message from the specified parameters.
            </summary>
            <param name="plaintext">The payload plaintext. If specified, the plaintext will be used to
            create the message body. Otherwise the body is specified by calls to the Process method.</param>
            <param name="signingKey">The signature key.</param>
            <param name="encryptionKey">The encryption key.</param>
            <param name="contentMeta">The content metadata</param>
            <param name="cloaked">Data to be converted to an EDS and presented as a cloaked header.</param>
            <param name="dataSequences">Data sequences to be converted to an EDS and presented 
                as an EDSS header entry.</param>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.DataSequence(System.Int32)">
            <summary>
            Return the plaintext of a data sequence.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.GetBodyReader">
            <summary>
            Create a JSONReader for the decrypted body content according to the specified encoding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.ReadChunk(Goedel.Protocol.JsonReader,System.Byte[]@)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.Serialize(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            </summary>
            <param name="writer">Output stream</param>
            <param name="wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.SerializeX(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            Unlike the Serlialize() method, this method is not inherited from the
            parent class allowing a specific version of the method to be called.
            </summary>
            <param name="writer">Output stream</param>
            <param name="wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.Deserialize(Goedel.Protocol.JsonReader)">
            <summary>
            Deserialize the input string to populate this object
            </summary>
            <param name="jsonReader">Input data</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.FromJSON(System.Byte[],System.Boolean,System.Boolean,Goedel.Cryptography.IKeyLocate)">
            <summary>
            Deserialize 
            </summary>
            <param name="data">The data to deserialize</param>
            <param name="tagged">If true, the input is wrapped in a tag specifying the type</param>
            <param name="decrypt">If true, attempt to decrypt the message body as it is read.</param>
            <param name="keyCollection">Key collection to be used to discover decryption keys</param>
            <returns>The created object.</returns>	
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.GetPlaintext(Goedel.Cryptography.IKeyLocate)">
            <summary>
            Return the plaintext payload using the credentials stored in <paramref name="keyCollection"/>
            to obtain decryption keys if necessary.
            </summary>
            <param name="keyCollection">The key collection to use to obtain decryption keys.</param>
            <returns>The plaintext payload.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.Verify(Goedel.Cryptography.KeyPair)">
            <summary>
            Verify that the signature value is correct for the key <paramref name="key"/>
            </summary>
            <param name="key">The signature key.</param>
            <returns>True, if the signature is valid.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.GetValidatedDigest">
            <summary>
            Compute the digest of the payload and if a digest value is specified in the header
            or trailer, verify that it matches.
            </summary>
            <returns>If a payload digest field is specified in the trailer that does not
            match the digest of the payload, returns the payload. Otherwise returns the
            digest of the payload.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.FindSignature(Goedel.Cryptography.CryptoKey)">
            <summary>
            Find a signature whose key identifier matches <paramref name="key"/>
            </summary>
            <param name="key">The key</param>
            <returns>The signature entry.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.FromJSON(System.IO.Stream,System.Boolean,System.Boolean,Goedel.Cryptography.IKeyLocate)">
            <summary>
            Deserialize 
            </summary>
            <param name="stream">The input stream</param>
            <param name="tagged">If true, the input is wrapped in a tag specifying the type</param>
            <param name="decrypt">If true, attempt to decrypt the message body as it is read.</param>
            <param name="keyCollection">Key collection to be used to discover decryption keys</param>
            <returns>The created object.</returns>	
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.FromJSON(Goedel.Protocol.JsonBcdReader,System.Boolean,System.Boolean,Goedel.Cryptography.IKeyLocate,System.Boolean)">
            <summary>
            Deserialize a tagged stream
            </summary>
            <param name="jsonReader">The input stream</param>
            <param name="tagged">If true, the input is wrapped in a tag specifying the type</param>
            <param name="decrypt">If true, attempt to decrypt the message body as it is read.</param>
            <param name="keyCollection">Key collection to be used to discover decryption keys</param>
            <param name="verify">If true perform specified verification after deserialization.</param>
            <returns>The created object.</returns>		
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.DecodeHeader(Goedel.Protocol.JsonBcdReader)">
            <summary>
            Read a DareEnvelope from a stream in incremental mode. The header of the 
            message is read but not the body.
            </summary>
            <param name="jsonReader">The stream from which data is to be read.</param>
            <returns>The DareEnvelope instance.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.Encode(Goedel.Cryptography.Dare.CryptoParameters,System.String,System.String,Goedel.Cryptography.Dare.ContentMeta,System.Byte[],System.Collections.Generic.List{System.Byte[]},System.Int32)">
            <summary>
            Decode a streamed message
            </summary>
            <param name="inputFile">The input file, must support reading.</param>
            <param name="outputFile">The output file, must support writing</param>
            <param name="cryptoParameters">Specifies the cryptographic enhancements to
            be applied to this message.</param>
            <param name="contentMeta">The content metadata</param>
            <param name="cloaked">Data to be converted to an EDS and presented as a cloaked header.</param>
            <param name="dataSequences">Data sequences to be converted to an EDS and presented 
                as an EDSS header entry.</param>
            <param name="chunk">The maximum chunk size. If unspecified, the default
            system chunk size (2048) is used.</param>
            <returns>The number of bytes in the input file.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.Encode(Goedel.Cryptography.Dare.CryptoParameters,System.Byte[],Goedel.Cryptography.Dare.ContentMeta,System.Byte[],System.Collections.Generic.List{System.Byte[]},System.Int32)">
            <summary>
            Decode a streamed message
            </summary>
            <param name="inputData">The input data</param>
            <param name="cryptoParameters">Specifies the cryptographic enhancements to
            be applied to this message.</param>
            <param name="contentMeta">The content metadata</param>
            <param name="cloaked">Data to be converted to an EDS and presented as a cloaked header.</param>
            <param name="dataSequences">Data sequences to be converted to an EDS and presented 
                as an EDSS header entry.</param>
            <param name="chunk">The maximum chunk size. If unspecified, the default
            system chunk size (2048) is used.</param>
            <returns>The serialized encoding of the data.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.Encode(Goedel.Cryptography.Dare.CryptoParameters,System.IO.Stream,System.IO.Stream,System.Int64,Goedel.Cryptography.Dare.ContentMeta,System.Byte[],System.Collections.Generic.List{System.Byte[]},System.Int32)">
            <summary>
            Encode data received on the input stream to the output stream with the specified
            security enhancements. If the input stream supports the seek operation, and
            the maximum chunk size is less than 1, the output file will be written as a 
            single sequence. Otherwise, the file will be written with a chunk size no
            greater than the maximum specified.
            </summary>
            <param name="inputStream">The input stream, must support reading.</param>
            <param name="outputStream">The output stream, must support writing</param>
            <param name="cryptoParameters">Specifies the cryptographic enhancements to
            be applied to this message.</param>
            <param name="contentMeta">The content metadata</param>
            <param name="cloaked">Data to be converted to an EDS and presented as a cloaked header.</param>
            <param name="dataSequences">Data sequences to be converted to an EDS and presented 
                as an EDSS header entry.</param>
            <param name="chunk">The maximum chunk size. If unspecified, the default
            system chunk size (2048) is used.</param>
            <param name="contentLength">The content length. This value is ignored if the Plaintext
            parameter is not null. If the value is less than 0, chunked encoding
            will be used for the payload data. </param>         
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.DecodeJsonObject(Goedel.Cryptography.IKeyLocate)">
            <summary>
            Decode a tagged JSONObject using keys from <paramref name="keyCollection"/> to decrypt
            if necessary.
            </summary>
            <param name="keyCollection">Key collection to be used for decryption.</param>
            <returns>The decoded object.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.Decode(System.String,System.String,Goedel.Cryptography.IKeyLocate)">
            <summary>
            Decode a streamed message
            </summary>
            <param name="inputFile">The input file, must support reading.</param>
            <param name="outputFile">The output file, must support writing</param>
            <param name="keyCollection">The key collection to be used to resolve identifiers to keys.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.Decode(System.IO.Stream,System.IO.Stream,System.String,Goedel.Cryptography.IKeyLocate)">
            <summary>
            Decode a streamed message
            </summary>
            <param name="inputStream">The input stream, must support reading.</param>
            <param name="outputStream">The output stream, must support writing</param>
            <param name="outputFile">The output file, must support writing</param>
            <param name="keyCollection">The key collection to be used to resolve identifiers to keys.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.Verify(System.String,Goedel.Cryptography.IKeyLocate)">
            <summary>
            Decode a streamed message
            </summary>
            <param name="inputFile">File to be read as input</param>
            <param name="keyCollection">The key collection to be used to resolve identifiers to keys.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.Verify(System.IO.Stream,Goedel.Cryptography.IKeyLocate)">
            <summary>
            Decode a streamed message
            </summary>
            <param name="inputStream">The input stream, must support reading.</param>
            <param name="keyCollection">The key collection to be used to resolve identifiers to keys.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelope.Strip">
            <summary>
            Strip the envelope of all unnecessary convenience data.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareEnvelopeWriter.CanRead">
            <summary>
                Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareEnvelopeWriter.CanSeek">
            <summary>
                Gets a value indicating whether the current stream supports seeking(is always false).
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareEnvelopeWriter.CanWrite">
            <summary>
                Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareEnvelopeWriter.Length">
            <summary>
                Gets the length written in bytes (not implemented).
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareEnvelopeWriter.Position">
            <summary>
                Gets the position within the current stream.  (not implemented).
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelopeWriter.#ctor(Goedel.Cryptography.Dare.CryptoParameters,System.IO.Stream,Goedel.Cryptography.Dare.ContentMeta,System.Int64,System.Byte[],System.Collections.Generic.List{System.Byte[]})">
            <summary>Create a writer to output a DARE Message to a stream.</summary>
            <param name="cryptoParameters">
                Specifies the cryptographic enhancements to
                be applied to this message.
            </param>
            <param name="outputStream">The stream to which the output will be written.</param>
            <param name="contentMeta">The Content metadata</param>
            <param name="contentLength">
                The content length. This value is ignored if the Plaintext
                parameter is not null. If the value is less than 0, chunked encoding
                will be used for the payload data.
            </param>
            <param name="cloaked">Data to be converted to an EDS and presented as a cloaked header.</param>
            <param name="dataSequences">
                Data sequences to be converted to an EDS and presented
                as an EDSS header entry.
            </param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelopeWriter.#ctor(Goedel.Cryptography.Dare.CryptoParameters,Goedel.Protocol.JsonWriter,Goedel.Cryptography.Dare.ContentMeta,System.Int64,System.Byte[],System.Collections.Generic.List{System.Byte[]})">
            <summary>
                Create a writer to output a DARE Message to a stream.
            </summary>
            <param name="cryptoParameters">
                Specifies the cryptographic enhancements to
                be applied to this message.
            </param>
            <param name="outputStream">The stream to which the output will be written.</param>
            <param name="contentMeta">The Content metadata</param>
            <param name="contentLength">
                The content length. This value is ignored if the Plaintext
                parameter is not null. If the value is less than 0, chunked encoding
                will be used for the payload data.
            </param>
            <param name="cloaked">Data to be converted to an EDS and presented as a cloaked header.</param>
            <param name="dataSequences">
                Data sequences to be converted to an EDS and presented
                as an EDSS header entry.
            </param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelopeWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Write data to the output stream.
            </summary>
            <param name="buffer">
                An array of bytes. This method copies <paramref name="count" /> bytes from
                <paramref name="buffer" /> to the current stream.
            </param>
            <param name="offset">
                The zero-based byte offset in <paramref name="buffer" />
                at which to begin copying bytes to the current stream.
            </param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelopeWriter.Close">
            <summary>
                Closes the current stream, completes calculation of cryptographic values (MAC/Digest)
                associated with the current stream. Does not close the target stream because that would
                be stupid.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelopeWriter.Flush">
            <summary>
                Clears all buffers for this stream and causes any buffered data to be written
                to the underlying device.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelopeWriter.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Copies bytes from the current buffered stream to an array (not supported).
            </summary>
            <param name="buffer">
                An array of bytes. When this method returns, the buffer contains the
                specified byte array with the values between <paramref name="offset" /> and
                (<paramref name="offset" /> + <paramref name="count" /> - 1)
                replaced by the bytes read from the current source.
            </param>
            <param name="offset">
                The zero-based byte offset in <paramref name="buffer" /> at which to begin storing
                the data read from the current stream.
            </param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
                The total number of bytes read into the buffer. This can be less than the number of bytes
                requested if that many bytes are not currently available, or zero (0) if the end of the stream
                has been reached.
            </returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelopeWriter.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
                Sets the position within the current buffered stream (not supported).
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin" /> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelopeWriter.SetLength(System.Int64)">
            <summary>
                Sets the length of the output frame (not implemented).
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelopeWriter.Dispose(System.Boolean)">
            <summary>
                Dispose method, frees resources when disposing,
            </summary>
            <param name="disposing">
                true to release both managed and unmanaged resources;
                false to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelopeWriter.Disposing">
            <summary>
                The class specific disposal routine.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelopeWriter.Finalize">
            <summary>
                Destructor.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.Extensions">
            <summary>
            Extensions classes.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Extensions.Decrypt(Goedel.Cryptography.IKeyLocate,System.Collections.Generic.List{Goedel.Cryptography.Dare.DareRecipient},Goedel.Cryptography.CryptoAlgorithmId)">
            <summary>
            Attempt to decrypt a decryption blob from a list of recipient entries.
            </summary>
            <param name="keyCollection">The key collection to be used to resolve keys.</param>
            <param name="recipients">The recipient entry.</param>
            <param name="algorithmID">The symmetric encryption cipher (used to decrypt the wrapped key).</param>
            <returns></returns>
        </member>
        <member name="T:Goedel.Cryptography.Dare.DareTrailer">
             <summary>
            
             A DARE envelope Trailer
             </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareTrailer.#ctor">
            <summary>
            Default constructor used for deserialization.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareTrailer.GetTrailer(Goedel.Cryptography.Dare.CryptoStackStreamWriter)">
            <summary>
            Prototype trailer containing the  digest value calculated by <paramref name="writer"/>.
            </summary>
            <param name="writer">The crypto stream used to transform the payload.</param>
            <returns>The prototype trailer.</returns>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareTrailer.Signatures">
             <summary>
            A list of signatures.
            A envelope trailer MUST NOT contain a signatures field if the header contains 
            a signatures field.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareTrailer.SignedData">
             <summary>
            Contains a DAREHeader object 
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareTrailer.PayloadDigest">
             <summary>
            If present, contains the digest of the Payload.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareTrailer.ChainDigest">
             <summary>
            If present, contains the digest of the PayloadDigest values of this
            frame and the frame immediately preceding.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareTrailer.TreeDigest">
             <summary>
            If present, contains the Binary Merkle Tree digest value.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareTrailer._Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.DareTrailer.__Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareTrailer._Factory">
            <summary>
            Factory method
            </summary>
            <returns>Object of this type</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareTrailer.Serialize(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            </summary>
            <param name="writer">Output stream</param>
            <param name="wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareTrailer.SerializeX(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            Unlike the Serlialize() method, this method is not inherited from the
            parent class allowing a specific version of the method to be called.
            </summary>
            <param name="_writer">Output stream</param>
            <param name="_wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="_first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareTrailer.FromJson(Goedel.Protocol.JsonReader,System.Boolean)">
            <summary>
            Deserialize a tagged stream
            </summary>
            <param name="jsonReader">The input stream</param>
            <param name="tagged">If true, the input is wrapped in a tag specifying the type</param>
            <returns>The created object.</returns>		
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareTrailer.DeserializeToken(Goedel.Protocol.JsonReader,System.String)">
            <summary>
            Having read a tag, process the corresponding value data.
            </summary>
            <param name="jsonReader">The input stream</param>
            <param name="tag">The tag</param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.ContentMeta">
            <summary>
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContentMeta.GetContentMetaData">
            <summary>
            Encode the content metadata bytes.
            </summary>
            <returns>The serialized content metadata.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContentMeta.GetContentInfo(System.Byte[])">
            <summary>
            Decode the content metadata bytes
            </summary>
            <param name="data">The data to decode.</param>
            <returns>The decoded data.</returns>
        </member>
        <member name="P:Goedel.Cryptography.Dare.ContentMeta.UniqueId">
             <summary>
            Unique object identifier
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.ContentMeta.Labels">
             <summary>
            List of labels that are applied to the payload of the frame.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.ContentMeta.KeyValues">
             <summary>
            List of key/value pairs describing the payload of the frame.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.ContentMeta.MessageType">
             <summary>
            The mesh message type
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.ContentMeta.ContentType">
             <summary>
            The content type field as specified in JWE
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.ContentMeta.Paths">
             <summary>
            List of filename paths for the payload of the frame.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.ContentMeta.Filename">
             <summary>
            The original filename under which the data was stored.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.ContentMeta.Event">
             <summary>
            Operation on the header
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.ContentMeta.Created">
             <summary>
            Initial creation date.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.ContentMeta.Modified">
             <summary>
            Date of last modification.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.ContentMeta.Expire">
             <summary>
            Date at which the associated transaction will expire
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.ContentMeta.First">
             <summary>
            Frame number of the first object instance value.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.ContentMeta.Previous">
             <summary>
            Frame number of the immediately prior object instance value	
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.ContentMeta.FileEntry">
             <summary>
            Information describing the file entry on disk.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.ContentMeta._Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.ContentMeta.__Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContentMeta._Factory">
            <summary>
            Factory method
            </summary>
            <returns>Object of this type</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContentMeta.Serialize(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            </summary>
            <param name="writer">Output stream</param>
            <param name="wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContentMeta.SerializeX(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            Unlike the Serlialize() method, this method is not inherited from the
            parent class allowing a specific version of the method to be called.
            </summary>
            <param name="_writer">Output stream</param>
            <param name="_wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="_first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContentMeta.FromJson(Goedel.Protocol.JsonReader,System.Boolean)">
            <summary>
            Deserialize a tagged stream
            </summary>
            <param name="jsonReader">The input stream</param>
            <param name="tagged">If true, the input is wrapped in a tag specifying the type</param>
            <returns>The created object.</returns>		
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContentMeta.DeserializeToken(Goedel.Protocol.JsonReader,System.String)">
            <summary>
            Having read a tag, process the corresponding value data.
            </summary>
            <param name="jsonReader">The input stream</param>
            <param name="tag">The tag</param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.DareLogReader">
            <summary>
            Log reader
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareLogReader.Sequence">
            <summary>The underlying sequence</summary> 
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareLogReader.Disposing">
            <summary>
            The class specific disposal routine.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareLogReader.Count">
            <summary>
            The number of entries in the container. Note that this will have to be 
            changed when entries spanning multiple frames are supported.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareLogReader.GetEnumerator">
            <summary>
            Enumerate over the archive contents.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="F:Goedel.Cryptography.Dare.DareLogReader.FileCollection">
            <summary>The archive index</summary> 
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareLogReader.DictionaryStart">
            <summary>The index position of the first file in the dictionary.</summary> 
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareLogReader.#ctor">
            <summary>Base constructor</summary> 
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareLogReader.#ctor(System.String,Goedel.Cryptography.IKeyLocate,Goedel.IO.FileStatus,System.Boolean)">
            <summary>
            Open an existing file sequence in read mode.
            </summary>
            <param name="fileName">The file name to read</param>
            <param name="fileStatus">The mode to open the file in, this must be a mode
            that permits read access.</param>
            <param name="keyCollection">Key collection to be used to resolve private key references.</param>
            <param name="decrypt">If true attempt to decrypt the sequence contents.</param>
            <returns>File Container instance</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareLogReader.GetIndex">
            <summary>
            Compile an index over the sequence.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareLogReader.List(System.IO.TextWriter)">
            <summary>
            Write the latest entries that match the search criteria to <paramref name="output"/>.
            </summary>
            <param name="output">Stream to write the matching entries to.</param>
            <returns>The number of entries written.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareLogReader.File(System.String,Goedel.Cryptography.IKeyLocate,System.Byte[]@,Goedel.Cryptography.Dare.ContentMeta@)">
            <summary>
            Open a file container and then read and return the last entry in the file.
            </summary>
            <param name="FileName">The file name to create</param>
            <param name="Data">The content data</param>
            <param name="ContentMeta">The content metadata</param>
            <param name="KeyCollection">Key collection to be used to resolve private key references.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareLogReader.Read(Goedel.Cryptography.IKeyLocate,System.Byte[]@,Goedel.Cryptography.Dare.ContentMeta@,System.Int32,System.String)">
            <summary>
            Read an entry from a container. 
            </summary>
            <param name="Data">The data read.</param>
            <param name="contentMeta">The metadata of the entry.</param>
            <param name="index">Specify the index of the entry to read</param>
            <param name="path">Specify a path value of an entry to read.</param>
            <param name="keyLocate">Key location instance.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareLogReader.ReadToFile(System.String,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="outputFile"></param>
            <param name="index"></param>
            <param name="path"></param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareLogReader.UnpackArchive(System.String,System.String)">
            <summary>
            Unpack a file archive
            </summary>
            <param name="outputPath">The output directory path to which the
            data is to be written.</param>
            <param name="selector">Optional selector to be used for filtering 
            (not implemented).</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareLogReader.CopyArchive(Goedel.Cryptography.Dare.DareLogWriter)">
            <summary>
            Copy data from this container to the specified container writer.
            </summary>
            <param name="fileContainerWriter">The container to be written to.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareLogReader.GetExchange(System.Collections.Generic.List{Goedel.Cryptography.Jose.Recipient},Goedel.Cryptography.CryptoAlgorithmId)">
            <summary>
            Perform a Key Exchange
            </summary>
            <param name="recipients">The list of recipients</param>
            <param name="algorithmID">The bulk encryption algorithm</param>
            <returns>The result of the key exchange.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareLogReader.Decrypt(System.Collections.Generic.List{Goedel.Cryptography.Jose.Recipient},Goedel.Cryptography.CryptoAlgorithmId)">
            <summary>
            Attempt to decrypt a decryption blob from a list of recipient entries.
            </summary>
            <param name="recipients">The recipient entry.</param>
            <param name="algorithmID">The symmetric encryption cipher (used to decrypt the wrapped key).</param>
            <returns></returns>
        </member>
        <member name="T:Goedel.Cryptography.Dare.DareLogWriter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareLogWriter.Disposing">
            <summary>
            The class specific disposal routine.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareLogWriter.#ctor(System.String,Goedel.Cryptography.Dare.DarePolicy,System.Boolean,System.Boolean,Goedel.IO.FileStatus,Goedel.Cryptography.Dare.SequenceType)">
            <summary>
            Open a new file container for write access.
            </summary>
            <param name="fileName">The file name to create</param>
            <param name="archive">If true, the container is intended to be used to create a multi-file
            archive.</param>
            <param name="digest">If true, construct a digest </param>
            <param name="fileStatus">The mode to open the file in, this must be a mode
            that permits write access.</param>
            <param name="containerType">The container type to use. If unspecified,
            a type appropriate for the type of use will be selected.</param>
            <returns>File Container instance</returns>
            <param name="policy">The cryptographic policy to be applied to the container.</param>
            <returns>The newly constructed container.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareLogWriter.#ctor(Goedel.Cryptography.Dare.JbcdStream,System.Boolean,System.Boolean,Goedel.Cryptography.Dare.SequenceType)">
            <summary>
            Open a new file container for write access.
            </summary>
            <param name="jbcdStream">The stream to use to write the container.</param>
            <param name="archive">If true, the container is intended to be used to create a multi-file
            archive.</param>
            <param name="digest">If true, construct a digest </param>
            <param name="containerType">The container type to use. If unspecified,
            a type appropriate for the type of use will be selected.</param>
            <returns>File Container instance</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareLogWriter.AddData(System.Byte[],Goedel.Cryptography.Dare.ContentMeta)">
            <summary>
            Append a file entry.
            </summary>
            <param name="data">The content data</param>
            <param name="contentInfo">The content metadata</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareLogWriter.AddFile(System.String,System.String,Goedel.Cryptography.Dare.ContentMeta)">
            <summary>
            Add a file entry
            </summary>
            <param name="basePath">The base path of the file.</param>
            <param name="relativePath">The path of the file within the archive.</param>
            <param name="contentMeta">Metadata describing the content.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareLogWriter.AddFile(System.String,System.IO.FileInfo,Goedel.Cryptography.Dare.ContentMeta)">
            <summary>
            Add a file entry
            </summary>
            <param name="file">The file to add</param>
            <param name="path">The path name attribute to give the file in the container</param>
            <param name="contentMeta">Metadata describing the content.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareLogWriter.Delete(System.String)">
            <summary>
            Delete a file entry
            </summary>
            <param name="path">The path name attribute to give the file in the container</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareLogWriter.Add(Goedel.Cryptography.Dare.SequenceFrameIndex,Goedel.Cryptography.Dare.CryptoParameters)">
            <summary>
            Read a container data entry from one container and add it to this one.
            </summary>Add 
            <param name="containerDataReader">Frame reader from which the
            container data is to be read.</param>
            <param name="cryptoParameters">The new crypto parameters to be used to 
            write the container data.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareLogWriter.AddIndex(System.Collections.Generic.List{Goedel.Cryptography.KeyPair})">
            <summary>
            Append an archive frame to the container.
            </summary>
            <param name="signatures">List of JWS signatures. Since this is the first block, the signature
            is always over the payload data only.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareLogWriter.ArchiveFile(System.String,Goedel.Cryptography.Dare.DarePolicy,System.Byte[],Goedel.Cryptography.Dare.ContentMeta,Goedel.IO.FileStatus)">
            <summary>
            Open a new file container for write access and write a single file entry.
            </summary>
            <param name="fileName">The file name to create</param>
            <param name="data">The content data</param>
            <param name="contentMeta">The content metadata</param>
            <param name="fileStatus">The mode to open the file in, this must be a mode
            that permits write access.</param>
            <param name="policy">The cryptographic policy to be applied to the container.</param>
            <returns>File Container instance</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareLogWriter.ArchiveDirectory(System.String,Goedel.Cryptography.Dare.DarePolicy,System.String,Goedel.Cryptography.Dare.ContentMeta,Goedel.IO.FileStatus,System.Boolean)">
            <summary>
            Open a new file container for write access and append all the files in the directory 
            <paramref name="directory"/>.
            </summary>
            <param name="fileName">The file name to create</param>
            <param name="directory">The directory to append files from.</param>
            <param name="contentMeta">The content metadata</param>
            <param name="fileStatus">The mode to open the file in, this must be a mode
            that permits write access.</param>
            <param name="policy">The cryptographic policy to be applied to the container.</param>
            <param name="index">If true add an index record to the end of the archive.</param>
            <returns>File Container instance</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareLogWriter.AddDirectory(System.String,System.IO.DirectoryInfo,Goedel.Cryptography.Dare.ContentMeta)">
            <summary>
            Append all the files in the directory 
            <paramref name="directory"/>.
            </summary>
            <param name="directory">The directory to append files from.</param>
            <param name="directoryInfo">The directory descriptor.</param>
            <param name="contentMeta">The content metadata</param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.DarePolicy">
            <summary>
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DarePolicy.Encrypt">
            <summary>If true, payload data must be encrypted.</summary> 
        </member>
        <member name="P:Goedel.Cryptography.Dare.DarePolicy.KeyLocation">
            <summary>Key collection to be used to resolve keys.</summary> 
        </member>
        <member name="M:Goedel.Cryptography.Dare.DarePolicy.#ctor">
            <summary>
            Default constructor used for deserialization.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DarePolicy.#ctor(Goedel.Cryptography.IKeyLocate,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},Goedel.Cryptography.CryptoAlgorithmId,Goedel.Cryptography.CryptoAlgorithmId)">
            <summary>
            Convenience constructor to create a policy to be used to encode a container. The parameter
            <paramref name="keyLocate"/> is used to resolve the keys specified in 
            <paramref name="signers"/> and <paramref name="recipients"/>. The parameters 
            <paramref name="encrypt"/> and <paramref name="digest"/> allow the bulk ciphers to be
            specified using <see cref="T:Goedel.Cryptography.CryptoAlgorithmId"/> parameters rather than JOSE identifiers.
            Additional properties MAY be specified directly.
            </summary>
            <param name="keyLocate">The key location instance.</param>
            <param name="signers">Signer identifiers. to be resolved using <paramref name="keyLocate"/></param>
            <param name="recipients">Recipient identifiers. to be resolved using <paramref name="keyLocate"/></param>
            <param name="encrypt">The bulk encryption algorithm.</param>
            <param name="digest">The bulk digest algorithm.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DarePolicy.#ctor(Goedel.Cryptography.IKeyLocate,Goedel.Cryptography.CryptoKey,Goedel.Cryptography.CryptoKey,Goedel.Cryptography.CryptoAlgorithmId,Goedel.Cryptography.CryptoAlgorithmId)">
            <summary>
            Convenience constructor to create a policy to be used to encode a container.
            </summary>
            <param name="keyLocate">The key location instance.</param>
            <param name="signer">Signer key</param>
            <param name="recipient">Recipient key</param>
            <param name="encrypt">The bulk encryption algorithm.</param>
            <param name="digest">The bulk digest algorithm.</param>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DarePolicy.EncryptionAlgorithm">
             <summary>
            The encryption algorithm to be used to compute the payload.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DarePolicy.DigestAlgorithm">
             <summary>
            The digest algorithm to be used to compute the payload digest.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DarePolicy.Encryption">
             <summary>
            The encryption policy specifier, determines how often a key exchange is required.
            'Single': All entries are encrypted under the key exchange specified in the 
            entry specifying this policy.
            'Isolated': All entries are encrypted under a separate key exchange.
            'All': All entries are encrypted.
            'None': No entries are encrypted.
            Default value is 'None' if EncryptKeys is null, and 'All' otherwise.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DarePolicy.Signature">
             <summary>
            The signature policy
            'None': No entries are signed.
            'Last': The last entry in the container is signed.
            'Isolated': All entries are independently signed.
            'Any': Entries may be signed.
            Default value is 'None' if SignKeys is null, and 'Any' otherwise.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DarePolicy.EncryptKeys">
             <summary>
            The public parameters of keys used for encryption
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DarePolicy.SignKeys">
             <summary>
            The public parameters of keys to which entries MUST be encrypted.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DarePolicy.Sealed">
             <summary>
            If true the policy is immutable and cannot be changed by a subsequent policy override.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DarePolicy._Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.DarePolicy.__Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DarePolicy._Factory">
            <summary>
            Factory method
            </summary>
            <returns>Object of this type</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DarePolicy.Serialize(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            </summary>
            <param name="writer">Output stream</param>
            <param name="wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DarePolicy.SerializeX(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            Unlike the Serlialize() method, this method is not inherited from the
            parent class allowing a specific version of the method to be called.
            </summary>
            <param name="_writer">Output stream</param>
            <param name="_wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="_first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DarePolicy.FromJson(Goedel.Protocol.JsonReader,System.Boolean)">
            <summary>
            Deserialize a tagged stream
            </summary>
            <param name="jsonReader">The input stream</param>
            <param name="tagged">If true, the input is wrapped in a tag specifying the type</param>
            <returns>The created object.</returns>		
        </member>
        <member name="M:Goedel.Cryptography.Dare.DarePolicy.DeserializeToken(Goedel.Protocol.JsonReader,System.String)">
            <summary>
            Having read a tag, process the corresponding value data.
            </summary>
            <param name="jsonReader">The input stream</param>
            <param name="tag">The tag</param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.Dare">
             <summary>
            
             Support classes for JSON Object Signing and Encryption
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.Dare._Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.Dare.__Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.Dare._TagDictionary">
            <summary>
            Dictionary mapping tags to factory methods
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Dare.Deserialize(Goedel.Protocol.JsonReader,Goedel.Protocol.JsonObject@)">
            <summary>
            Construct an instance from the specified tagged JsonReader stream.
            </summary>
            <param name="jsonReader">Input stream</param>
            <param name="result">The created object</param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.DareEnvelopeSequence">
             <summary>
            
             A DARE envelope containing Header, EDS and Trailer in JSON object encoding.
             Since a DAREMessage is almost invariably presented in JSON sequence or
             compact encoding, use of the DAREMessage subclass is preferred.
             Although a DARE envelope is functionally an object, it is serialized as 
             an ordered sequence. This ensures that the envelope header field will always
             precede the body in a serialization, this allowing processing of the header
             information to be performed before the entire body has been received.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareEnvelopeSequence.Header">
             <summary>
            The envelope header. May specify the key exchange data, pre-signature 
            or signature data, cloaked headers and/or encrypted data sequences.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareEnvelopeSequence.Body">
             <summary>
            The envelope body
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareEnvelopeSequence.Trailer">
             <summary>
            The envelope trailer. If present, this contains the signature.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareEnvelopeSequence._Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.DareEnvelopeSequence.__Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelopeSequence._Factory">
            <summary>
            Factory method
            </summary>
            <returns>Object of this type</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelopeSequence.Serialize(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            </summary>
            <param name="writer">Output stream</param>
            <param name="wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelopeSequence.SerializeX(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            Unlike the Serlialize() method, this method is not inherited from the
            parent class allowing a specific version of the method to be called.
            </summary>
            <param name="_writer">Output stream</param>
            <param name="_wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="_first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelopeSequence.FromJson(Goedel.Protocol.JsonReader,System.Boolean)">
            <summary>
            Deserialize a tagged stream
            </summary>
            <param name="jsonReader">The input stream</param>
            <param name="tagged">If true, the input is wrapped in a tag specifying the type</param>
            <returns>The created object.</returns>		
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareEnvelopeSequence.DeserializeToken(Goedel.Protocol.JsonReader,System.String)">
            <summary>
            Having read a tag, process the corresponding value data.
            </summary>
            <param name="jsonReader">The input stream</param>
            <param name="tag">The tag</param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.DareSignature">
             <summary>
            
             The signature value
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareSignature.Dig">
             <summary>
            Digest algorithm hint. Specifying the digest algorithm to be applied
            to the envelope body allows the body to be processed in streaming mode.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareSignature.Alg">
             <summary>
            Key exchange algorithm
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareSignature.KeyIdentifier">
             <summary>
            Key identifier of the signature key.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareSignature.Certificate">
             <summary>
            PKIX certificate of signer.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareSignature.Path">
             <summary>
            PKIX certificates that establish a trust path for the signer.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareSignature.Manifest">
             <summary>
            The data description that was signed.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareSignature.SignatureValue">
             <summary>
            The signature value as an Enhanced Data Sequence under the envelope base seed.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareSignature.WitnessValue">
             <summary>
            The signature witness value used on an encrypted envelope to demonstrate that 
            the signature was authorized by a party with actual knowledge of the encryption 
            key used to encrypt the envelope.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DareSignature._Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.DareSignature.__Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareSignature._Factory">
            <summary>
            Factory method
            </summary>
            <returns>Object of this type</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareSignature.Serialize(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            </summary>
            <param name="writer">Output stream</param>
            <param name="wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareSignature.SerializeX(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            Unlike the Serlialize() method, this method is not inherited from the
            parent class allowing a specific version of the method to be called.
            </summary>
            <param name="_writer">Output stream</param>
            <param name="_wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="_first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareSignature.FromJson(Goedel.Protocol.JsonReader,System.Boolean)">
            <summary>
            Deserialize a tagged stream
            </summary>
            <param name="jsonReader">The input stream</param>
            <param name="tagged">If true, the input is wrapped in a tag specifying the type</param>
            <returns>The created object.</returns>		
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareSignature.DeserializeToken(Goedel.Protocol.JsonReader,System.String)">
            <summary>
            Having read a tag, process the corresponding value data.
            </summary>
            <param name="jsonReader">The input stream</param>
            <param name="tag">The tag</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareSignature.#ctor">
            <summary>
            Default constructor for use in deserialization.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DareSignature.#ctor(Goedel.Cryptography.CryptoKey,System.Byte[],Goedel.Cryptography.CryptoAlgorithmId,Goedel.Cryptography.KeyDerive)">
            <summary>
            Sign the digest value <paramref name="DigestValue"/> with 
            <paramref name="signerKey"/> and create a DARESignature
            instance with the resulting values.
            </summary>
            <param name="signerKey">The signature key.</param>
            <param name="DigestValue">The digest value.</param>
            <param name="digestId">The digest algorithm used to calculate 
            <paramref name="DigestValue"/>.</param>
            <param name="keyDerive">Key derivation function used to calculate a signature witness 
            value (if required).</param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.X509Certificate">
            <summary>
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.X509Certificate.X5u">
             <summary>
            URL identifying an X.509 public key certificate
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.X509Certificate.X5">
             <summary>
            An X.509 public key certificate
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.X509Certificate._Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.X509Certificate.__Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.X509Certificate._Factory">
            <summary>
            Factory method
            </summary>
            <returns>Object of this type</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.X509Certificate.Serialize(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            </summary>
            <param name="writer">Output stream</param>
            <param name="wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.X509Certificate.SerializeX(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            Unlike the Serlialize() method, this method is not inherited from the
            parent class allowing a specific version of the method to be called.
            </summary>
            <param name="_writer">Output stream</param>
            <param name="_wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="_first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.X509Certificate.FromJson(Goedel.Protocol.JsonReader,System.Boolean)">
            <summary>
            Deserialize a tagged stream
            </summary>
            <param name="jsonReader">The input stream</param>
            <param name="tagged">If true, the input is wrapped in a tag specifying the type</param>
            <returns>The created object.</returns>		
        </member>
        <member name="M:Goedel.Cryptography.Dare.X509Certificate.DeserializeToken(Goedel.Protocol.JsonReader,System.String)">
            <summary>
            Having read a tag, process the corresponding value data.
            </summary>
            <param name="jsonReader">The input stream</param>
            <param name="tag">The tag</param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.FileEntry">
            <summary>
            </summary>
            <summary>
            Record tracking a file in an archive.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.FileEntry.Path">
             <summary>
            The file path in canonical form. 
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.FileEntry.CreationTime">
             <summary>
            The creation time of the file on disk in UTC
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.FileEntry.LastAccessTime">
             <summary>
            The last access time of the file on disk in UTC
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.FileEntry.LastWriteTime">
             <summary>
            The last write time of the file on disk in UTC
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.FileEntry.Attributes">
             <summary>
            The file attribues as a bitmapped integer.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.FileEntry._Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.FileEntry.__Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.FileEntry._Factory">
            <summary>
            Factory method
            </summary>
            <returns>Object of this type</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.FileEntry.Serialize(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            </summary>
            <param name="writer">Output stream</param>
            <param name="wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.FileEntry.SerializeX(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            Unlike the Serlialize() method, this method is not inherited from the
            parent class allowing a specific version of the method to be called.
            </summary>
            <param name="_writer">Output stream</param>
            <param name="_wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="_first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.FileEntry.FromJson(Goedel.Protocol.JsonReader,System.Boolean)">
            <summary>
            Deserialize a tagged stream
            </summary>
            <param name="jsonReader">The input stream</param>
            <param name="tagged">If true, the input is wrapped in a tag specifying the type</param>
            <returns>The created object.</returns>		
        </member>
        <member name="M:Goedel.Cryptography.Dare.FileEntry.DeserializeToken(Goedel.Protocol.JsonReader,System.String)">
            <summary>
            Having read a tag, process the corresponding value data.
            </summary>
            <param name="jsonReader">The input stream</param>
            <param name="tag">The tag</param>
        </member>
        <member name="F:Goedel.Cryptography.Dare.FileEntry.Index">
            <summary>The index in the log.</summary> 
        </member>
        <member name="F:Goedel.Cryptography.Dare.FileEntry.Position">
            <summary>The position within the container.</summary> 
        </member>
        <member name="F:Goedel.Cryptography.Dare.FileEntry.Previous">
            <summary>The index of the previous version of this file in the log.</summary> 
        </member>
        <member name="F:Goedel.Cryptography.Dare.FileEntry.PreviousPosition">
            <summary>The previous position within the container.</summary> 
        </member>
        <member name="M:Goedel.Cryptography.Dare.FileEntry.#ctor">
            <summary>
            Base constructor for serialization.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.FileEntry.#ctor(Goedel.Cryptography.Dare.DareHeader,System.Int64)">
            <summary>
            Constructor to create an instance for the header <paramref name="dareHeader"/>
            located at file sequence position <paramref name="position"/>.
            </summary>
            <param name="dareHeader">The header describing the file entry.</param>
            <param name="position">The position of the entry in the file.</param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.Witness">
             <summary>
            
             Entry containing the latest apex value of a specified append only log.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.Witness.Id">
             <summary>
            Globally unique log identifier
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.Witness.Issuer">
             <summary>
            The issuer of the log
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.Witness.Apex">
             <summary>
            The Apex hash value
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.Witness.Index">
             <summary>
            Specifies the index number assigned to the entry in the log.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.Witness._Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.Witness.__Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Witness._Factory">
            <summary>
            Factory method
            </summary>
            <returns>Object of this type</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Witness.Serialize(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            </summary>
            <param name="writer">Output stream</param>
            <param name="wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Witness.SerializeX(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            Unlike the Serlialize() method, this method is not inherited from the
            parent class allowing a specific version of the method to be called.
            </summary>
            <param name="_writer">Output stream</param>
            <param name="_wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="_first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Witness.FromJson(Goedel.Protocol.JsonReader,System.Boolean)">
            <summary>
            Deserialize a tagged stream
            </summary>
            <param name="jsonReader">The input stream</param>
            <param name="tagged">If true, the input is wrapped in a tag specifying the type</param>
            <returns>The created object.</returns>		
        </member>
        <member name="M:Goedel.Cryptography.Dare.Witness.DeserializeToken(Goedel.Protocol.JsonReader,System.String)">
            <summary>
            Having read a tag, process the corresponding value data.
            </summary>
            <param name="jsonReader">The input stream</param>
            <param name="tag">The tag</param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.Proof">
             <summary>
            
             Provides a proof that the payload with digest [hash] in the log described by 
             SignedWitness occurs at the index [Index]
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.Proof.SignedWitness">
             <summary>
            The signed apex under which this proof chain is established
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.Proof.Hash">
             <summary>
            
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.Proof.Index">
             <summary>
            Specifies the index number assigned to the entry in the log.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.Proof.Path">
             <summary>
            The list of entries from which the proof path is computed.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.Proof._Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.Proof.__Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Proof._Factory">
            <summary>
            Factory method
            </summary>
            <returns>Object of this type</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Proof.Serialize(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            </summary>
            <param name="writer">Output stream</param>
            <param name="wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Proof.SerializeX(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            Unlike the Serlialize() method, this method is not inherited from the
            parent class allowing a specific version of the method to be called.
            </summary>
            <param name="_writer">Output stream</param>
            <param name="_wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="_first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Proof.FromJson(Goedel.Protocol.JsonReader,System.Boolean)">
            <summary>
            Deserialize a tagged stream
            </summary>
            <param name="jsonReader">The input stream</param>
            <param name="tagged">If true, the input is wrapped in a tag specifying the type</param>
            <returns>The created object.</returns>		
        </member>
        <member name="M:Goedel.Cryptography.Dare.Proof.DeserializeToken(Goedel.Protocol.JsonReader,System.String)">
            <summary>
            Having read a tag, process the corresponding value data.
            </summary>
            <param name="jsonReader">The input stream</param>
            <param name="tag">The tag</param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.EnvelopeValidation">
            <summary>
            Envelope validation levels
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.EnvelopeValidation.None">
            <summary>Perform no validation of the envelope or its contents.</summary> 
        </member>
        <member name="F:Goedel.Cryptography.Dare.EnvelopeValidation.Digest">
            <summary>Verify that the calculated payload digest matches the purported
            digest.</summary> 
        </member>
        <member name="F:Goedel.Cryptography.Dare.EnvelopeValidation.Signature">
            <summary>Verify that the signature is valid according to the specified 
            public key parameters.</summary> 
        </member>
        <member name="F:Goedel.Cryptography.Dare.EnvelopeValidation.Trusted">
            <summary>Verify that the signature is valid according to the specified 
            public key parameters and that there is a valid chain of trust under a 
            specified root of trust.</summary> 
        </member>
        <member name="T:Goedel.Cryptography.Dare.Enveloped`1">
            <summary>
            Typed DareEnvelope.
            </summary>
            <typeparam name="T">The type of the wrapped data item.</typeparam>
        </member>
        <member name="P:Goedel.Cryptography.Dare.Enveloped`1.EnvelopedObject">
            <summary>The enveloped object cast to the generic type.</summary> 
        </member>
        <member name="M:Goedel.Cryptography.Dare.Enveloped`1.#ctor">
            <summary>
            Constructor for use by deserializers.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Enveloped`1.#ctor(Goedel.Cryptography.Dare.DareEnvelope)">
            <summary>
            Construct a typed copy of the envelope <paramref name="enveloped"/> with the same
            Header, Body, Trailer and JSONObject.
            </summary>
            <param name="enveloped">The envelope to copy.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Enveloped`1.#ctor(Goedel.Cryptography.Dare.CryptoParameters,System.Byte[],Goedel.Cryptography.Dare.ContentMeta,System.Byte[],System.Collections.Generic.List{System.Byte[]})">
            <summary>
            Constructor returning a typed envelope. 
            </summary>
            <param name="cryptoParameters">Specifies the cryptographic enhancements to
            be applied to this message.</param>
            <param name="contentMeta">The content metadata</param>
            <param name="plaintext">The payload plaintext. If specified, the plaintext will be used to
            create the message body. Otherwise the body is specified by calls to the Process method.</param>
            <param name="cloaked">Data to be converted to an EDS and presented as a cloaked header.</param>
            <param name="dataSequences">Data sequences to be converted to an EDS and presented 
                as an EDSS header entry.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Enveloped`1.#ctor(`0,Goedel.Cryptography.CryptoKey,Goedel.Cryptography.CryptoKey,Goedel.Cryptography.Dare.ContentMeta,Goedel.Protocol.ObjectEncoding)">
            <summary>
            Constructor returining an envelope containing the object <paramref name="data"/>
            optionally encrypted under <paramref name="encryptionKey"/> and signed under
            <paramref name="signingKey"/>.
            </summary>
            <param name="data">The object to be enveloped.</param>
            <param name="signingKey">The signature key.</param>
            <param name="encryptionKey">The encryption key.</param>
            <param name="contentMeta">The value of the ContentMeta Header tag.</param>
            <param name="objectEncoding">The object encoding to use for the envelope payload.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Enveloped`1.Envelope(`0,Goedel.Cryptography.CryptoKey,Goedel.Cryptography.CryptoKey,Goedel.Cryptography.Dare.ContentMeta,Goedel.Protocol.ObjectEncoding)">
            <summary>
            Convenience accessor creating an envelope around <paramref name="data"/> encoded in
            encoding <paramref name="objectEncoding"/>. If present, the data is signed under 
            <paramref name="signingKey"/>. If present, the data is encrypted under 
            <paramref name="encryptionKey"/>.
            </summary>
            <param name="data">The object to be enveloped.</param>
            <param name="signingKey">The signature key.</param>
            <param name="encryptionKey">The encryption key.</param>
            <param name="contentMeta">The value of the ContentMeta Header tag.</param>
            <param name="objectEncoding">The object encoding to use for the envelope payload.</param>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Enveloped`1.Decode(Goedel.Cryptography.Dare.IKeyCollection,Goedel.Cryptography.Dare.EnvelopeValidation)">
            <summary>
            Decrypt and deserialize the envelope to obtain the typed contents and set the value of 
            <see cref="F:Goedel.Protocol.JsonObject.Enveloped"/> to the original envelope data.
            </summary>
            <param name="keyCollection">Key collection to be used to find decryption keys and
            roots of trust for verification keys.</param>
            <param name="validation">Validation to be performed after decoding.</param>
            <returns>The decoded data.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Dare.StreamDataCorrupt">
            <summary>
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.StreamDataCorrupt.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.StreamDataCorrupt.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.StreamDataCorrupt.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.StreamDataCorrupt._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Cryptography.Dare.StreamDataCorrupt.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.SequenceDataCorrupt">
            <summary>
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.SequenceDataCorrupt.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.SequenceDataCorrupt.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceDataCorrupt.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceDataCorrupt._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Cryptography.Dare.SequenceDataCorrupt.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.EnvelopeDataCorrupt">
            <summary>
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.EnvelopeDataCorrupt.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.EnvelopeDataCorrupt.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.EnvelopeDataCorrupt.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.EnvelopeDataCorrupt._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Cryptography.Dare.EnvelopeDataCorrupt.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.InvalidContainerTypeException">
            <summary>
            An attempt was made to access a container type that is not supported by the
            class.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.InvalidContainerTypeException.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.InvalidContainerTypeException.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.InvalidContainerTypeException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.InvalidContainerTypeException._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Cryptography.Dare.InvalidContainerTypeException.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.FrameTooLargeException">
            <summary>
            An attempt was made to create a frame that is larger than the maximum frame size allowed by
            the application
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.FrameTooLargeException.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.FrameTooLargeException.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.FrameTooLargeException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.FrameTooLargeException._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Cryptography.Dare.FrameTooLargeException.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.InvalidFileModeException">
            <summary>
            An attempt was made to create a new container file in a mode that did not
            allow creation of a new file.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.InvalidFileModeException.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.InvalidFileModeException.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.InvalidFileModeException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.InvalidFileModeException._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Cryptography.Dare.InvalidFileModeException.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.InvalidFileFormatException">
            <summary>
            The file format was found to be invalid or otherwise corrupt.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.InvalidFileFormatException.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.InvalidFileFormatException.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.InvalidFileFormatException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.InvalidFileFormatException._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Cryptography.Dare.InvalidFileFormatException.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.ObjectIdentifierNotUnique">
            <summary>
            An attempt was made to create an object with an existing object identifier
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.ObjectIdentifierNotUnique.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.ObjectIdentifierNotUnique.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ObjectIdentifierNotUnique.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ObjectIdentifierNotUnique._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Cryptography.Dare.ObjectIdentifierNotUnique.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.AccessRefused">
            <summary>
            Access was refused
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.AccessRefused.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.AccessRefused.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.AccessRefused.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.AccessRefused._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Cryptography.Dare.AccessRefused.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.DataRecordTruncated">
            <summary>
            A data record could not be read because it was incomplete.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DataRecordTruncated.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DataRecordTruncated.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DataRecordTruncated.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DataRecordTruncated._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Cryptography.Dare.DataRecordTruncated.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.ArchiveEntryMissingFileName">
            <summary>
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.ArchiveEntryMissingFileName.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.ArchiveEntryMissingFileName.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ArchiveEntryMissingFileName.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ArchiveEntryMissingFileName._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Cryptography.Dare.ArchiveEntryMissingFileName.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.EntryNotFound">
            <summary>
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.EntryNotFound.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.EntryNotFound.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.EntryNotFound.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.EntryNotFound._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Cryptography.Dare.EntryNotFound.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.EntryAlreadyExists">
            <summary>
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.EntryAlreadyExists.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.EntryAlreadyExists.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.EntryAlreadyExists.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.EntryAlreadyExists._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Cryptography.Dare.EntryAlreadyExists.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.UndefinedStoreAction">
            <summary>
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.UndefinedStoreAction.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.UndefinedStoreAction.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.UndefinedStoreAction.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.UndefinedStoreAction._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Cryptography.Dare.UndefinedStoreAction.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.TaggingNotSupported">
            <summary>
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.TaggingNotSupported.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.TaggingNotSupported.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.TaggingNotSupported.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.TaggingNotSupported._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Cryptography.Dare.TaggingNotSupported.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.FileNotFound">
            <summary>
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.FileNotFound.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.FileNotFound.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.FileNotFound.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.FileNotFound._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Cryptography.Dare.FileNotFound.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.DirectoryNotFound">
            <summary>
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DirectoryNotFound.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.DirectoryNotFound.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DirectoryNotFound.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.DirectoryNotFound._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Cryptography.Dare.DirectoryNotFound.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.Extension">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Extension.Class(Goedel.Cryptography.CryptoAlgorithmId)">
            <summary>
            Return the algorithm class of an algorithm identifier.
            </summary>
            <param name="cryptoAlgorithmID">The algorithm identifier to categorize.</param>
            <returns>The class of algorithm specified by <paramref name="cryptoAlgorithmID"/></returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Extension.ToKeyValuePairs(System.Collections.Generic.List{Goedel.Cryptography.Dare.KeyValue})">
            <summary>
            Convert list of index terms to key value pairs.
            </summary>
            <param name="Input">List of index terms to convert</param>
            <returns>The input list as a KeyValue pair.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Extension.ToKeyValues(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Convert list of key value pairs to index terms.
            </summary>
            <param name="Input">List of key valye pairs to convert</param>
            <returns>The input list as a KeyValue Pair.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Dare.FileCollection">
            <summary>
            Class tracking a set of files in a sequence.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.FileCollection.DictionaryByPath">
            <summary>Dictionary mapping full names to file entries.</summary> 
        </member>
        <member name="F:Goedel.Cryptography.Dare.FileCollection.DictionaryDeleted">
            <summary>Dictionary mapping full names to file entries.</summary> 
        </member>
        <member name="F:Goedel.Cryptography.Dare.FileCollection.DictionaryByIndex">
            <summary>Dictionary mapping full names to file entries.</summary> 
        </member>
        <member name="F:Goedel.Cryptography.Dare.FileCollection.CountDeleted">
            <summary>Count of the number of deleted entries</summary> 
        </member>
        <member name="M:Goedel.Cryptography.Dare.FileCollection.Add(System.IO.FileInfo,System.String,System.Int64,System.Int64)">
            <summary>
            Add an entry described by <paramref name="fileInfo"/> to the collection.
            </summary>
            <param name="fileInfo">File information block.</param>
            <param name="path">The path to be recorded.</param>
            <param name="index">Index of the frame in the sequence.</param>
            <param name="position">Position of the first byte of the frame.</param>
            <returns>The file entry created. This will contain relative links to the
            previous entry (if it exists).</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.FileCollection.Add(Goedel.Cryptography.Dare.DareHeader,System.Int64)">
            <summary>
            Add a file to the collection.
            </summary>
            <param name="dareHeader">DARE header describing the entry.</param>
            <param name="position">Position within the sequence file.</param>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.FileCollection.Add(Goedel.Cryptography.Dare.FileEntry)">
            <summary>
            Add a file entry.
            </summary>
            <param name="fileEntry">The entry to add</param>
            <returns>The entry created.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.FileCollection.Delete(System.String,System.Int64)">
            <summary>
            Delete the file entry <paramref name="path"/> from the sequence.
            </summary>
            <param name="path">The unique identifier of the entry to delete.</param>
            <param name="position">The index position of the entry.</param>
            <returns>The file entry of the deleted file.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.FileCollection.MakeIndex">
            <summary>
            Make a sequence index from the specified values.
            </summary>
            <returns>The created index.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Dare.TrustResult">
            <summary>
            Stub class describing the result of a signature path validation. 
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.TrustResult.Trusted">
            <summary>If true a valid trust path was found.</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.TrustResult.Anchor">
            <summary>The trust path anchor.</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.TrustResult.Exception">
            <summary>If <see cref="P:Goedel.Cryptography.Dare.TrustResult.Trusted"/> is false, contains the exception raised
            describing the failure.</summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.IKeyCollection">
            <summary>
            Key collection extending IKeyLocate to add signature key validation capability.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.IKeyCollection.ValidateTrustPath(Goedel.Cryptography.Dare.DareSignature,System.String)">
            <summary>
            Attempt to form a trust path for the key used to sign <paramref name="dareSignature"/>.
            </summary>
            <param name="dareSignature">The signature to validate.</param>
            <param name="anchor">If present specifies the fingerprint of a key that MUST anchor
            the trust path.</param>
            <returns>The result of the trust path analysis.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.IKeyCollection.ErasePrivateKey(System.String)">
            <summary>
            Attempt to erase the private key with fingerprint <paramref name="udf"/> from the
            associated persistence store.
            </summary>
            <param name="udf"></param>
            <returns>True if the key was found, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.IKeyCollection.LocatePrivateKey(System.String)">
            <summary>
            Locate the private key with fingerprint <paramref name="udf"/> and return
            the corresponding JSON description.
            </summary>
            <param name="udf">Key to locate</param>
            <returns>The JSON description (if found).</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.IKeyCollection.Persist(System.String,Goedel.Cryptography.PKIX.IPKIXPrivateKey,System.Boolean)">
            <summary>
            Persist the key pair specified by <paramref name="privateKey"/> and mark as exportable
            or non-exportable according to the value of <paramref name="Exportable"/>.
            </summary>
            <param name="udf">The UDF of the key</param>
            <param name="privateKey">The private key parameters.</param>
            <param name="Exportable">If true, the key is exportable.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.IKeyCollection.Persist(System.String,Goedel.Cryptography.IJson,System.Boolean)">
            <summary>
            Persist the key pair specified by <paramref name="joseKey"/> and mark as exportable
            or non-exportable according to the value of <paramref name="exportable"/>.
            </summary>
            <param name="udf">The UDF of the key</param>
            <param name="joseKey">The private key parameters.</param>
            <param name="exportable">If true, the key is exportable.</param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.IPersistenceStoreRead">
            <summary>
            
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.IPersistenceStoreRead.GetIndex(System.String,System.Boolean)">
            <summary>
            Return an index for the specified key, creating it if necessary.
            </summary>
            <param name="Key">The key for which the index is requested.</param>
            <param name="Create">If true, will create an index if none is found.</param>
            <returns>The index.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.IPersistenceStoreRead.Get(System.String)">
            <summary>
            Get object instance by unique identifier
            </summary>
            <param name="UniqueID">The unique identifier of the object instance to locate.</param>
            <returns>True if found, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.IPersistenceStoreRead.Contains(System.String)">
            <summary>
            Determines if a object instance with the specified unique identifier is registered.
            </summary>
            <param name="UniqueID">The unique identifier of the object instance to locate.</param>
            <returns>True if found, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.IPersistenceStoreRead.Last(System.String,System.String)">
            <summary>
            The last object instance that matches the specified key/value condition.
            </summary>
            <param name="Key">The key</param>
            <param name="Value">The value to match</param>
            <returns>The object instance if found, otherwise false.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Dare.IPersistenceStoreWrite">
            <summary>
            
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.IPersistenceStoreWrite.New(Goedel.Protocol.JsonObject,Goedel.Cryptography.Dare.Transaction)">
            <summary>
            Add new JSON object to the store with the specified identifier, unique ID and keys.
            </summary>
            <param name="Object">Object to add.</param>
            <param name="transaction">The transaction context under which the object is 
            created.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.IPersistenceStoreWrite.Update(Goedel.Protocol.JsonObject,System.Boolean,Goedel.Cryptography.Dare.Transaction)">
            <summary>
            Update a JSON object in the store with the specified identifier, unique ID and keys.
            </summary>
            <param name="Object">Object to add.</param>
            <param name="Create">If true, create a new value if one does not already exist</param>
            <param name="transaction">The transaction context under which the object is 
            created.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.IPersistenceStoreWrite.Delete(System.String,Goedel.Cryptography.Dare.Transaction)">
            <summary>
            Delete a persistence entry
            </summary>
            <threadsafety static="true" instance="true"/>
            <param name="UniqueID">The UniqueID of the object to delete</param>
            <returns>True if the object was updated, otherwise false.</returns>
            <param name="transaction">The transaction context under which the object is 
            created.</param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.IPersistenceIndex">
            <summary>
            Persistence store index
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.IPersistenceIndex.Last(System.String)">
            <summary>
            Return an IPersistenceIndexEntry index entry to the last object instance that matches 
            the specified value. Additional values may be obtained by calling an enumerator
            on the index entry.
            </summary>
            <param name="Value">The value to match</param>
            <returns>The index entry to the object instance if found, otherwise false.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Dare.IPersistenceIndexEntry">
            <summary>
            Persistence store index result. Contains a link to the current value and an 
            iterator over future values.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.IPersistenceIndexEntry.Data">
            <summary>
            The Data Entry.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.IPersistenceIndexEntry.Insert(Goedel.Cryptography.Dare.IPersistenceIndexEntry,Goedel.Cryptography.Dare.IPersistenceEntry)">
            <summary>
            Insert a new Index entry to a list of index entries.
            </summary>
            <param name="Existing">The entry that will becomd the Previous entry,
            if null, starts a new list.</param>
            <param name="EntryData">The entry data for the new index value.</param>
            <returns>The new entry.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.IPersistenceIndexEntry.Remove(Goedel.Cryptography.Dare.IPersistenceIndexEntry)">
            <summary>
            Remove an entry from a list of index entries.
            </summary>
            <param name="Entry"></param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.IPersistenceEntry">
            <summary>
            Persistence store entry
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.IPersistenceEntry.UniqueID">
            <summary>
            Unique identifier of entry;
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.IPersistenceEntry.Deleted">
            <summary>
            If true the object haws been deleted and cannot be further modified.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.IPersistenceEntry.JsonObject">
            <summary>The persisted JsonObject</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.IPersistenceEntry.Previous">
            <summary>
            The previous object instance value for this object instance.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.IPersistenceEntry.First">
            <summary>
            The first object instance value for this object instance.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.JbcdStream">
            <summary>
            Implements a highly restricted stream that supports exactly the functionality
            required by the JBCD Reader/Writer extensions. In the base class, the underlying
            implementation is supplied by a Stream object (typically a FileStream). It is
            expected this will be replaced in the future by a version that performs direct 
            memory mapping of the files.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.JbcdStream.StreamWrite">
            <summary>
            The underlying stream for stream write operations
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.JbcdStream.StreamRead">
            <summary>
            The underlying stream for stream write operations
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.JbcdStream.PositionWrite">
            <summary>
            The current position within the stream.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.JbcdStream.PositionRead">
            <summary>
            The current position within the stream.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.JbcdStream.EOF">
            <summary>
            Returns true if and only if the stream reader is at the end of the file.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.JbcdStream.Length">
            <summary>
            A long value representing the length of the stream in bytes.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.JbcdStream.LockGlobal">
            <summary>The reader writer lock for the underlying file.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.#ctor(System.String,Goedel.IO.FileStatus,System.Boolean)">
            <summary>
            Constructor from a file
            </summary>
            <param name="fileName">The file to open.</param>
            <param name="fileStatus">The file access mode.</param>
            <param name="writeOnly">If true, the file is only opened in write mode.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            Constructor from a stream
            </summary>
            <param name="StreamRead">The underlying stream. This must support the seek operation.</param>
            <param name="StreamWrite">The underlying stream. This must support the seek operation.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.Disposing">
            <summary>
            Dispose method, frees all resources.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the read position within the current stream.
            </summary>
            <param name="Offset">A byte offset relative to the origin parameter.</param>
            <param name="Origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.Begin">
            <summary>
            Move the read position to the beginning of the stream.
            </summary>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.End">
            <summary>
            Move the read position to the end of the stream.
            </summary>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.SeekWrite">
            <summary>
            Set the write pointer to the end of the container.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the end of the stream.
            </summary>
            <param name="Value">The byte to write to the stream.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the 
            current position within this stream by the number of bytes written.
            </summary>
            <param name="Buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="Offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="Count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="Buffer"> An array of bytes. When this method returns, the buffer contains the specified byte array with the values between 
            offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="Offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="Count">Number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested 
            if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if 
            at the end of the stream.
            </summary>
            <returns>The unsigned byte cast to an Int32, or -1 if at the end of the stream.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.ReadByteReverse">
            <summary>
            Read a byte in the reverse direction, i.e. the byte immediately preceding the 
            current position.
            </summary>
            <returns>The byte read or -1.</returns>
            <exception cref="T:Goedel.Cryptography.Dare.InvalidFileFormatException">The record data read from disk was invalid</exception>
        </member>
        <member name="F:Goedel.Cryptography.Dare.JbcdStream.UFrame">
            <summary>JSON-B Code for unidirectional frame</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.JbcdStream.BFrame">
            <summary>JSON-B Code for bidirectional frame</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.JbcdStream.Length8">
            <summary>JSON-B Code for 8 bit length</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.JbcdStream.Length16">
            <summary>JSON-B Code for 16 bit length</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.JbcdStream.Length32">
            <summary>JSON-B Code for 32 bit length</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.JbcdStream.Length64">
            <summary>JSON-B Code for 64 bit length</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.JbcdStream.LengthMask">
            <summary>JSON-B Length mask </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.JbcdStream.TypeMask">
            <summary>JSON-B Type mask </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.TagLength(System.Int64)">
            <summary>
            Return the shortest tag length for the specified production.
            </summary>
            <param name="Length">Length of data to follow.</param>
            <returns>The tag length.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.TagSpace(System.Int32)">
            <summary>
            Return the length of a code
            </summary>
            <param name="Code">Base code.</param>
            <returns>The number of bytes required.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.CodeSpace(System.Int32)">
            <summary>
            Return the length of a code
            </summary>
            <param name="Code">Base code.</param>
            <returns>The number of bytes required.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.TotalLength(System.Int64)">
            <summary>
            Determine Tag length using the shortest possible production
            </summary>
            <param name="Length">Length of data to follow.</param>
            <returns>The number of bytes required.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.TotalLength2(System.Int64)">
            <summary>
            Determine Tag length using the shortest possible production
            </summary>
            <param name="Length">Length of data to follow.</param>
            /// <returns>The number of bytes required.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.WriteTag(System.Byte,System.Int64)">
            <summary>
            Write out a Tag-Length value using the shortest possible production
            </summary>
            <param name="Code">Base code.</param>
            <param name="Length">Length of data to follow.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.WriteTagReverse(System.Byte,System.Int64)">
            <summary>
            Write out a Tag-Length value using the shortest possible production
            </summary>
            <param name="Code">Base code.</param>
            <param name="Length">Length of data to follow.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.WriteFrame(System.Byte[],System.Int64,System.Int64,System.Boolean)">
            <summary>
            Write a unidirectional or bidirectional frame to the current stream at the current write position. 
            The code does not currently support 64 bit frames as it should.
            </summary>
            <param name="FrameData">The data to write.</param>
            <param name="Offset">Offset within the data.</param>
            <param name="Length">Number of bytes to write.</param>
            <param name="Bidirectional">If true, a bidirectional frame is written.</param>
            <returns>The total size of the frame.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.WriteWrappedFrame(System.Byte[],System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            Write a wrapped frame containing a header and an optional data section
            to the current stream at the current write position. 
            The code does not currently support 64 bit frames as it should.
            </summary>
            <param name="FrameHeader">The header data to write.</param>
            <param name="FrameData1">First data record, contains data content.</param>
            <param name="FrameData2">Second data record, contains protected metadata.</param>
            <param name="flush">If true, flush the frame data value to the file.</param>
            <returns>The total size of the frame.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.WriteWrappedFrameBegin(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Write a wrapped frame containing a header and an optional data section
            to the current stream at the current write position. 
            The code does not currently support 64 bit frames as it should.
            </summary>
            <param name="FrameHeader">The header data to write.</param>
            <param name="FrameDataLength">Length of the frame payload.</param>
            <param name="FrameTrailerLength">Length of the frame trailer.</param>
            <returns>The total size of the frame.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.WriteWrappedFrameEnd(System.Byte[])">
            <summary>
            Complete writing out a wrapped frame. The frame must previously be started
            using a matching call to WriteWrappedFrameBegin. If the content written 
            does not match the length originally specified, an error is thrown.
            </summary>
            <returns>The total size of the frame.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.WriteBinaryBegin(System.Int64,System.Boolean)">
            <summary>Begin partial write of binary data. 
            This is not yet implemented for standard streams.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.WriteBinaryPart(System.Byte[],System.Int64,System.Int64)">
            <summary>Write binary data as length-data item.</summary>
            <param name="Data">Value to write</param>
            <param name="First">The index position of the first byte in the input data to process</param>
            <param name="Length">The number of bytes to process</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.ReadLength(System.Int32,System.Int64@)">
            <summary>
            Read a length value of known length in the forward direction.
            </summary>
            <param name="LengthLength">The number of bytes to read.</param>
            <param name="Length">The length value read.</param>
            <returns>Always true. All failures trigger exceptions.</returns>
            <exception cref="T:Goedel.Cryptography.Dare.InvalidFileFormatException">The record data read from disk was invalid</exception>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.CheckReversedLength(System.Int32,System.Int64)">
            <summary>
            Check a reversed length value of known length in the forward direction (from the start of the
            file to the end).
            </summary>
            <param name="Code">The code that was read</param>
            <param name="LengthIn">The length value read.</param>
            <returns>Always true. All failures trigger exceptions.</returns>
            <exception cref="T:Goedel.Cryptography.Dare.InvalidFileFormatException">The record data read from disk was invalid</exception>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.ReadLengthReverse(System.Int32,System.Int64@)">
            <summary>
            Read a length value of known length in the reverse direction.
            </summary>
            <param name="LengthLength">The number of bytes to read.</param>
            <param name="Length">The length value read.</param>
            <returns>Always true. All failures trigger exceptions.</returns>
            <exception cref="T:Goedel.Cryptography.Dare.InvalidFileFormatException">The record data read from disk was invalid</exception>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.ReadTag(System.Int32@,System.Int64@)">
            <summary>
            Read a forward length tag in the forward direction
            </summary>
            <param name="Code">The tag code that was read</param>
            <param name="Length">The length that was read</param>
            <returns>True if a tag was read or false if EOF was encountered.</returns>
            <exception cref="T:Goedel.Cryptography.Dare.InvalidFileFormatException">The record data read from disk was invalid</exception>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.ReadTagReverse(System.Int32@,System.Int64@)">
            <summary>
            Read a forward length tag in the Reverse direction
            </summary>
            <param name="Code">The tag code that was read</param>
            <param name="Length">The length that was read</param>
            <returns>True if a tag was read or false if EOF was encountered.</returns>
            <exception cref="T:Goedel.Cryptography.Dare.InvalidFileFormatException">The record data read from disk was invalid</exception>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.ReadRecord(System.Int64@,System.Byte[]@)">
            <summary>
             Read a frame in the forward direction.
            </summary>
            <param name="MaxLength">The maximum length of data to read including the tags</param>
            <param name="Data">The data that was read.</param>
            <returns>True if a tag was read or false if EOF was encountered.</returns>
            <exception cref="T:Goedel.Cryptography.Dare.InvalidFileFormatException">The record data read from disk was invalid</exception>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.ReadFrame(System.Byte[]@,System.Byte[]@,System.Byte[]@)">
            <summary>
            Read a pair of wrapped frames in the forward direction.
            </summary>
            <param name="FrameData">The payload data that was read.</param>
            <param name="FrameHeader">The header data that was read.</param>
            <param name="FrameTrailer">The trailer data that was read.</param>
            <returns>True if a tag was read or false if EOF was encountered.</returns>
            <exception cref="T:Goedel.Cryptography.Dare.InvalidFileFormatException">The record data read from disk was invalid</exception>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.Next">
            <summary>
            Move to the next position in the stream without reading any part of it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.Previous">
            <summary>
            Move to the previous position in the stream without reading any part of it.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Goedel.Cryptography.Dare.JbcdStream.StartLastFrameRead">
            <summary>
            Records the start position of the last frame that was read.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.FramerOpen(System.Int64)">
            <summary>
            Open a frame reader at the position indicated by <paramref name="Position"/>
            and return the frame length.
            </summary>
            <param name="Position">The file position at which to begin reading. If
            less than 0, the frame reader position is reset. This will cause the last
            record read with FramerOpen to be re-read unless FramerClose has been called 
            in which case the next frame in the stream will be read.</param>
            <returns>The length of the frame if it could be read, otherwise -1.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.FramerGetData">
            <summary>
            Read the next frame record and return the data as a byte array.
            </summary>
            <returns>The frame record data or <code>null</code> if the data could
            not be read.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.FramerGetFrameIndex(System.Int64@,System.Int64@)">
            <summary>
            Read the next frame and return the starting and ending frame markers.
            </summary>
            <param name="DataPosition"></param>
            <param name="DataLength"></param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.FramerGetReader(System.Int64,System.Int64)">
            <summary>
            Return a bounded stream reader for the frame payload data.
            </summary>
            <param name="DataPosition">The position of the first byte of data.</param>
            <param name="DataLength">The number of bytes to be read.</param>
            <returns>The bounded stream reader.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.FramerNext">
            <summary>
            Skip all remaining records in the frame and move to the next record.
            The
            </summary>
            <returns>If <code>true</code>, there are more frames to be read. If 
            <code>false</code> the end of the stream has been reached.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.FramerPrevious">
            <summary>
            Skip all remaining records in the frame and move to the next record.
            The
            </summary>
            <returns>If <code>true</code>, there are more frames to be read. If 
            <code>false</code> the end of the stream has been reached.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.ReadFrame(System.Byte[]@)">
            <summary>
            Read a pair of wrapped frames in the forward direction.
            </summary>
            <param name="FrameHeader">The header data that was read.</param>
            <returns>True if a tag was read or false if EOF was encountered.</returns>
            <exception cref="T:Goedel.Cryptography.Dare.InvalidFileFormatException">The record data read from disk was invalid</exception>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.ReadFrameReverse(System.Byte[]@,System.Byte[]@)">
            <summary>
            Read a pair of wrapped frames in the reverse direction. This is typically done to read the last
            record in a file to see how the file should be extended.
            </summary>
            <param name="FrameData">The payload data that was read.</param>
            <param name="FrameHeader">The header data that was read.</param>
            <returns>True if a tag was read or false if EOF was encountered.</returns>
            <exception cref="T:Goedel.Cryptography.Dare.InvalidFileFormatException">The record data read from disk was invalid</exception>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.ReadFrameReverse(System.Byte[]@)">
            <summary>
            Read a pair of wrapped frames in the reverse direction. This is typically done to read the last
            record in a file to see how the file should be extended.
            </summary>
            <param name="FrameHeader">The header data that was read.</param>
            <returns>True if a tag was read or false if EOF was encountered.</returns>
            <exception cref="T:Goedel.Cryptography.Dare.InvalidFileFormatException">The record data read from disk was invalid</exception>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.MoveFrameReverse">
            <summary>
            Move a frame in the reverse direction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.ReadFrameHeader">
            <summary>
            Read the current frame header
            </summary>
            <returns>The current frame header</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.ReadFirstFrameHeader">
            <summary>
            Read the final frame header
            </summary>
            <returns>The last frame header</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.ReadLastFrameHeader">
            <summary>
            Read the final frame header
            </summary>
            <returns>The last frame header</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JbcdStream.ReadDareEnvelope">
            <summary>
            Return the current container frame as a DareEnvelope.
            </summary>
            <returns>The container data.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Dare.JBCDStreamDebug">
            <summary>
            Debugging version of JBCDStream
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.JBCDStreamDebug.Active">
            <summary>
            Output flag. 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JBCDStreamDebug.#ctor(System.String,Goedel.IO.FileStatus,System.Boolean,System.IO.TextWriter)">
            <summary>
            Constructor from a file
            </summary>
            <param name="FileName">The file to open.</param>
            <param name="FileStatus">The file access mode.</param>
            <param name="WriteOnly">If true, the file is only opened in write mode.</param>
            <param name="Output">The additional output stream.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JBCDStreamDebug.#ctor(System.IO.Stream,System.IO.TextWriter)">
            <summary>
            Constructor from a stream
            </summary>
            <param name="Stream">The underlying stream. This must support the seek operation.</param>
            <param name="Output">The additional output stream.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JBCDStreamDebug.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if 
            at the end of the stream.
            </summary>
            <returns>The unsigned byte cast to an Int32, or -1 if at the end of the stream.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JBCDStreamDebug.ReadByteReverse">
            <summary>
            Read a byte in the reverse direction, i.e. the byte immediately preceding the 
            current position.
            </summary>
            <returns>The byte read or -1.</returns>
            <exception cref="T:Goedel.Cryptography.Dare.InvalidFileFormatException">The record data read from disk was invalid</exception>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JBCDStreamDebug.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="Buffer"> An array of bytes. When this method returns, the buffer contains the specified byte array with the values between 
            offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="Offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="Count">Number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested 
            if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
        </member>
        <member name="P:Goedel.Cryptography.Dare.JBCDStreamDebug.DisplayBytesMax">
            <summary>
            Maximum number of bytes to display before turning on summary mode.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.JBCDStreamDebug.DisplayBytesSummary">
            <summary>
            Number of bytes to display in summary mode.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JBCDStreamDebug.ReadTag(System.Int32@,System.Int64@)">
            <summary>
            Read a forward length tag in the forward direction
            </summary>
            <param name="Code">The tag code that was read</param>
            <param name="Length">The length that was read</param>
            <returns>True if a tag was read or false if EOF was encountered.</returns>
            <exception cref="T:Goedel.Cryptography.Dare.InvalidFileFormatException">The record data read from disk was invalid</exception>
        </member>
        <member name="M:Goedel.Cryptography.Dare.JBCDStreamDebug.CheckReversedLength(System.Int32,System.Int64)">
            <summary>
            Check a reversed length value of known length in the forward direction (from the start of the
            file to the end).
            </summary>
            <param name="Code">The tag code that was read</param>
            <param name="LengthIn">The length that was read</param>
            <returns>Always true. All failures trigger exceptions.</returns>
            <exception cref="T:Goedel.Cryptography.Dare.InvalidFileFormatException">The record data read from disk was invalid</exception>
        </member>
        <member name="T:Goedel.Cryptography.Dare.KeyCollectionEphemeral">
            <summary>
            Stub key collection used to prevent keys being written to persistent storage.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.KeyCollectionEphemeral.ErasePrivateKey(System.String)">
            <summary>
            Attempt to erase the private key with fingerprint <paramref name="udf"/> from the
            associated persistence store.
            </summary>
            <param name="udf"></param>
            <returns>True if the key was found, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.KeyCollectionEphemeral.LocatePrivateKey(System.String)">
            <summary>
            Locate the private key with fingerprint <paramref name="udf"/> and return
            the corresponding JSON description.
            </summary>
            <param name="udf">Key to locate</param>
            <returns>Exception <see cref="T:Goedel.Cryptography.PrivateKeyNotFound"/> since there is no 
            backing store.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.KeyCollectionEphemeral.Persist(System.String,Goedel.Cryptography.PKIX.IPKIXPrivateKey,System.Boolean)">
            <summary>
            Persist the key pair specified by <paramref name="privateKey"/> and mark as exportable
            or non-exportable according to the value of <paramref name="Exportable"/>.
            </summary>
            <param name="udf">The UDF of the key</param>
            <param name="privateKey">The private key parameters.</param>
            <param name="Exportable">If true, the key is exportable.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.KeyCollectionEphemeral.Persist(System.String,Goedel.Cryptography.IJson,System.Boolean)">
            <summary>
            Persist the key pair specified by <paramref name="joseKey"/> and mark as exportable
            or non-exportable according to the value of <paramref name="exportable"/>.
            </summary>
            <param name="udf">The UDF of the key</param>
            <param name="joseKey">The private key parameters.</param>
            <param name="exportable">If true, the key is exportable.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.KeyCollectionEphemeral.ValidateTrustPath(Goedel.Cryptography.Dare.DareSignature,System.String)">
            <summary>
            Attempt to form a trust path for the key used to sign <paramref name="dareSignature"/>.
            </summary>
            <param name="dareSignature">The signature to validate.</param>
            <param name="anchor">If present specifies the fingerprint of a key that MUST anchor
            the trust path.</param>
            <returns>The result of the trust path analysis.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Dare.NamespaceDoc">
            <summary>
            Classes to manage a JBCD Container file.
            
            <para>All JBCD Containers support efficient append only access with 
            efficient read-only access in both the forward and the reverse 
            directions.</para>
            
            <para>Setting the IsTree parameter to true when a container is 
            first created causes a binary tree structure to be embedded into
            the file as it is written. This incurs a modest (log n) performance
            penalty on write but enables efficient random access (log n).</para>
            
            <para>Either type of container may be protected against an insertion
            attack with the use of a chained digest. If the container type if a 
            binary tree, a Merkle Tree is constructed. Otherwise, a simple chain 
            construction is used.</para>
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.IndexType">
            <summary>File index modes</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.IndexType.None">
            <summary>No index</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.IndexType.Position">
            <summary>Index table of frame positions</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.IndexType.Partial">
            <summary>There is an index table of positions and an index table for some specified labels.</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.IndexType.Complete">
            <summary>There is an index table of positions and an index table for all labels specified in the file.</summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.SequenceFrame">
            <summary>
            Class to allow enumeration of sequence frames
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.SequenceFrame.FrameCount">
            <summary>The current write frame index (writes are always
            appended to the end of the file.</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.SequenceFrame.Position">
            <summary>The byte offset from the start of the file for the 
            first byte of the current frame.</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.SequenceFrame.FrameData">
            <summary>The current frame data</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.SequenceFrame.FrameHeader">
            <summary>The current frame header as binary data</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.SequenceFrame.Header">
            <summary>The current frame header as a parsed object.</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.SequenceFrame.Trailer">
            <summary>The current frame trailer as a parsed object.</summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.Sequence">
            <summary>
            Base class for Sequence file implementations
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.Sequence.Digest">
            <summary>The apex digest value of the sequence as written to the file.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.Sequence.DigestRequired">
            <summary>If true, the Sequence type requires a digest calculated on the payload.</summary> 
        </member>
        <member name="F:Goedel.Cryptography.Dare.Sequence.FrameZero">
            <summary>The first frame in the sequence</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.Sequence.JbcdStream">
            <summary>The underlying file stream</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.Sequence.StartOfData">
            <summary>The byte offset from the start of the file for Record 1</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.Sequence.DataEncoding">
            <summary>The encoding to use for creating the FrameHeader entry</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.Sequence.FrameCount">
            <summary>The value of the last frame index</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.Sequence.PositionFinalFrameStart">
            <summary>The start of the last frame.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.Sequence.FrameIndexLast">
            <summary>The last frame in the sequence</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.Sequence.KeyLocate">
            <summary>The key location instance.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.Sequence.Position">
            <summary>The current read position.</summary> 
        </member>
        <member name="P:Goedel.Cryptography.Dare.Sequence.PositionIndex">
            <summary>Position of the last index in the file.</summary> 
        </member>
        <member name="P:Goedel.Cryptography.Dare.Sequence.SequenceIndex">
            <summary>The last sequence index found.</summary> 
        </member>
        <member name="P:Goedel.Cryptography.Dare.Sequence.TrailerLast">
            <summary>The trailer section of the last envelope in the sequence.</summary> 
        </member>
        <member name="P:Goedel.Cryptography.Dare.Sequence.HeaderBytes">
            <summary>The current frame header as binary data</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.Sequence.CryptoParametersSequence">
            <summary>
            The cryptography parameters.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.Sequence.CryptoStack">
            <summary>
            The default cryptographic stack
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.Sequence.Header">
            <summary>The current frame header as a parsed object.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.Sequence.SequenceInfo">
            <summary>Convenience accessor for the SequenceInfo field of the sequence.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.Sequence.HeaderFirst">
            <summary>
            The first sequence header. This is read only since it is fixed after
            the record is written.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.Sequence.HeaderFinal">
            <summary>The last sequence header.</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.Sequence.DisposeJBCDStream">
            <summary>
            The underlying stream reader/writer for the sequence. This will be disposed of when
            the sequence is released.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.Disposing">
            <summary>
            The class specific disposal routine.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.GetEnumerator">
            <summary>
            Returns an enumerator over the sequence contents starting with the
            first frame.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.Open(System.String,Goedel.IO.FileStatus,Goedel.Cryptography.IKeyLocate,Goedel.Cryptography.Dare.SequenceType,Goedel.Cryptography.Dare.DarePolicy,System.String,System.Boolean,System.Boolean)">
            <summary>
            Open or create sequence according to the setting of FileStatus. The underlying 
            filestreams will be disposed of automatically when the sequence is disposed.
            </summary>
            <param name="fileName">The file name.</param>
            <param name="fileStatus">The file access mode.</param>
            <param name="keyLocate">The key collection to be used to resolve requests
            for decryption keys. If unspecified, the default KeyCollection is used.</param>
            <param name="policy">The cryptographic policy to govern the sequence.</param>
            <param name="sequenceType">The sequence type to create if the sequence does
            not already exist.</param>
            <param name="contentType">The content type to declare if a new sequence is
            created.</param>
            <param name="decrypt">If true, enable decryption of sequence payload,
            otherwise return payload contents as plaintext.</param>
            <param name="create">If true, create a sequence file if none already exists</param>
            <returns>The new sequence.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.Open(Goedel.Cryptography.Dare.JbcdStream,Goedel.Cryptography.IKeyLocate)">
            <summary>
            Open or create sequence according to the setting of FileStatus. The underlying 
            filestreams will be disposed of automatically when the sequence is disposed.
            </summary>
            <param name="jbcdStream">The stream to use to access the sequence.</param>
            <param name="keyLocate">The key collection to be used to resolve keys</param>
            <returns>The new sequence.</returns>
        </member>
        <member name="F:Goedel.Cryptography.Dare.Sequence.KeyCollection">
            <summary>
            The default key collection to use for decryption
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.OpenExisting(System.String,Goedel.IO.FileStatus,Goedel.Cryptography.IKeyLocate,System.Boolean)">
            <summary>
            Open an existing sequence file.
            </summary>
            <param name="fileName">The file to open as a sequence.</param>
            <param name="fileStatus">The file status.</param>
            <param name="keyCollection">The key collection to be used to decrypt the contents
            of the sequence.</param>
            <param name="decrypt">If true configure to enable decryption of bodies.</param>
            <returns>The sequence object if found. Otherwise, an exception is thrown.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.OpenExisting(Goedel.Cryptography.Dare.JbcdStream,Goedel.Cryptography.IKeyLocate,System.Boolean)">
            <summary>
            Open an existing sequence according to the information contained in the next frame to be read.
            </summary>
            <param name="jbcdStream">The frame reader. Since this is passed to the
            method to create the class it is not disposed with the sequence using it.</param>
            <param name="keyCollection">The key collection to be used to resolve requests
            for decryption keys. If unspecified, the default KeyCollection is used.</param>
            <param name="decrypt">If true, enable decryption of sequence payload,
            otherwise return payload contents as plaintext.</param>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.NewContainer(System.String,Goedel.IO.FileStatus,Goedel.Cryptography.Dare.SequenceType,Goedel.Cryptography.Dare.DarePolicy,System.Byte[],System.String,Goedel.Protocol.DataEncoding,System.Byte[],System.Collections.Generic.List{System.Byte[]})">
            <summary>
            Create a new sequence file of the specified type and write the initial
            data record
            </summary>
            <param name="filename">The file to open</param>
            <param name="fileStatus">The file status.</param>
            <param name="payload">Optional data payload. </param>
            <param name="contentType">Content type of the optional data payload</param>
            <param name="sequenceType">The sequence type.</param>
            <param name="policy">The cryptographic policy to be applied to the sequence.</param>
            <param name="dataEncoding">The data encoding.</param>
            <param name="cloaked">Data to be converted to an EDS and presented as a cloaked header.</param>
            <param name="dataSequences">Data sequences to be converted to an EDS and presented 
                as an EDSS header entry.</param>
            <exception cref="T:Goedel.Cryptography.Dare.InvalidFileModeException">The file mode specified was not valid.</exception>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.NewContainer(Goedel.Cryptography.Dare.JbcdStream,Goedel.Cryptography.IKeyLocate,Goedel.Cryptography.Dare.SequenceType,Goedel.Cryptography.Dare.DarePolicy,System.Byte[],System.String,Goedel.Protocol.DataEncoding,System.Byte[],System.Collections.Generic.List{System.Byte[]})">
            <summary>
            Create a new sequence file of the specified type and write the initial
            data record
            </summary>
            <param name="jbcdStream">The underlying file stream. This MUST be opened
            in a read access mode and should have exclusive write access. All existing
            content in the file will be overwritten.</param>
            <param name="keyLocate">The key collection to be used to resolve requests
            for decryption keys. If unspecified, the default KeyCollection is used.</param>
            <param name="payload">Optional data payload. </param>
            <param name="dataEncoding">The data encoding.</param>
            <param name="contentType">Content type of the optional data payload</param>
            <param name="sequenceType">The sequence type. This determines whether
            a tree index is to be created or not and if so, whether </param>
            <param name="policy">The cryptographic policy to govern the sequence.</param>
            <param name="cloaked">Data to be converted to an EDS and presented as a cloaked header.</param>
            <param name="dataSequences">Data sequences to be converted to an EDS and presented 
                as an EDSS header entry.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.MakeNewSequence(Goedel.Cryptography.Dare.JbcdStream,Goedel.Cryptography.Dare.SequenceType)">
            <summary>
            Create a new sequence file of the specified type and write the initial
            data record
            </summary>
            <param name="jbcdStream">The underlying JBCDStream stream. This MUST be opened
            in a read access mode and should have exclusive read access. All existing
            content in the file will be overwritten.</param>
            <param name="sequenceType">The sequence type. This determines whether
            a tree index is to be created or not and if so, whether </param>
            <returns>The newly constructed sequence.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.MakeNewSequence(System.String,Goedel.Cryptography.IKeyLocate,System.Collections.Generic.List{Goedel.Cryptography.Dare.DareEnvelope},Goedel.IO.FileStatus)">
            <summary>
            Create a new sequence with the name <paramref name="fileName"/> and
            append <paramref name="envelopes"/> to the end of the sequence.
            </summary>
            <param name="fileName">Name of the sequence to create</param>
            <param name="envelopes">Envelopes to add</param>
            <param name="fileStatus">File status (used for concurrency locking)</param>
            <param name="keyLocate">The key location collection to be used to resolve keys.</param>
            <returns>The created sequence</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.Select(System.Int32,System.Boolean)">
            <summary>
            Return an enumerator with the specified selectors.
            </summary>
            <param name="minIndex">The minimum index.</param>
            <param name="reverse">If true, read the sequence from the end.</param>
            <returns>The enumerator.</returns>
        </member>
        <member name="F:Goedel.Cryptography.Dare.Sequence.FrameIndexToPositionDictionary">
            <summary>
            Dictionary of frame index to frame position.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.RegisterFrame(Goedel.Cryptography.Dare.SequenceInfo,System.Int64)">
            <summary>
            Register a frame in the sequence access dictionaries.
            </summary>
            <param name="sequenceInfo">Frame header</param>
            <param name="position">Position of the frame</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.GetFramePosition(System.Int64)">
            <summary>
            Get the frame position.
            </summary>
            <param name="frame">The frame index</param>
            <returns>The frame position.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.FillDummyTrailer(Goedel.Cryptography.Dare.CryptoStack)">
            <summary>
            The number of bytes to be reserved for the trailer.
            </summary>
            <returns>The number of bytes to reserve</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.MakeTrailer(Goedel.Cryptography.Dare.DareTrailer@)">
            <summary>
            The dummy trailer to add to the end of the frame.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.AppendFrame(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Append a new data frame payload to the end of the file.
            </summary>
            <param name="payload">The frame payload data value.</param>
            <param name="header">The frame header value.</param>
            <param name="trailer">The frame trailer value.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.Append(System.Collections.Generic.List{Goedel.Cryptography.Dare.DareEnvelope},System.Int32)">
            <summary>
            Append the envelopes <paramref name="envelopes"/> to the sequence starting
            with the <paramref name="index"/>th envelope.
            </summary>
            <param name="envelopes">The enveolpes to append</param>
            <param name="index">The starting point at which to begin appending.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.MakeSequenceInfo">
            <summary>
            Initialize a <see cref="P:Goedel.Cryptography.Dare.Sequence.SequenceInfo"/> instance for the current sequence
            position.
            </summary>
            <returns>The initialized instance.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.Append(Goedel.Cryptography.Dare.SequenceIndex,Goedel.Cryptography.Dare.ContentMeta)">
            <summary>
            Append an empty frame containing sequence index or content information.
            </summary>
            <param name="sequenceIndex">The SequenceIndex to append.</param>
            <param name="contentMeta">The ContentMeta to append.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.Append(Goedel.Cryptography.Dare.DareEnvelope,System.Boolean)">
            <summary>
            Write a previously prepared or validated Dare Envelope to the sequence directly.
            </summary>
            <param name="envelope">The envelope to append to the sequence</param>
            <param name="updateEnvelope">If true, update the header and trailer of 
            <paramref name="envelope"/> to the computed values.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.PrepareFrame(Goedel.Cryptography.Dare.SequenceInfo)">
            <summary>
            Prepare the sequence frame information in <paramref name="sequenceInfo"/>.
            </summary>
            <param name="sequenceInfo">The sequence information to be prepared.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.GetSequenceFrameIndex(System.Int64,System.Int64)">
            <summary>
            Obtain a ContainerFrameIndex instance for <paramref name="index"/> if
            specified or <paramref name="position"/> otherwise.
            </summary>
            <param name="index">The sequence index to obtain the frame index for.</param>
            <param name="position">The sequence position to obtain the frame index for.</param>
            <returns>The created ContainerFrameIndex instance,</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.Append(System.Byte[],Goedel.Cryptography.Dare.ContentMeta,System.String,System.Byte[],System.Collections.Generic.List{System.Byte[]},Goedel.Cryptography.Dare.CryptoParameters)">
            <summary>
            Append a new data frame payload to the end of the file.
            </summary>
            <param name="data">Ciphertext data to append.</param>
            <param name="contentMeta">Content metadata.</param>
            <param name="contentType">The payload content type.</param>
            <param name="cloaked">Data to be converted to an EDS and presented as a cloaked header.</param>
            <param name="dataSequences">Data sequences to be converted to an EDS and presented </param>
            <param name="cryptoParameters">The cryptographic parameters.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.AppendFile(System.String,Goedel.Cryptography.Dare.ContentMeta,System.String,System.Byte[],System.Collections.Generic.List{System.Byte[]})">
            <summary>
            Read data from the specified file and append to the sequence.
            </summary>
            <param name="fileName">The file to append</param>
            <param name="contentInfo">Container header data.</param>
            <param name="contentType">The payload content type.</param>
            <param name="cloaked">Data to be converted to an EDS and presented as a cloaked header.</param>
            <param name="dataSequences">Data sequences to be converted to an EDS and presented 
                as an EDSS header entry.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.AppendFromStream(System.IO.Stream,System.Int64,Goedel.Cryptography.Dare.ContentMeta,System.String,System.Byte[],System.Collections.Generic.List{System.Byte[]},Goedel.Cryptography.Dare.CryptoParameters)">
            <summary>
            Read data from the specified file and append to the sequence.
            </summary>
            <param name="input">The stream to be read.</param>
            <param name="contentLength"> The number of bytes to read from <paramref name="input"/>.</param>
            <param name="contentInfo">Container header data.</param>
            <param name="contentType">The payload content type.</param>
            <param name="cloaked">Data to be converted to an EDS and presented as a cloaked header.</param>
            <param name="dataSequences">Data sequences to be converted to an EDS and presented 
                as an EDSS header entry.</param>
            <param name="cryptoParameters">The cryptographic parameters.</param>
            <returns>The number of bytes written.</returns>
            <remarks>At present, the file stream MUST support the seek operation
            which is an issue that has to be removed.</remarks>
        </member>
        <member name="F:Goedel.Cryptography.Dare.Sequence.contextWrite">
            <summary>
            Header of the framer being written
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.AppendBegin(System.Int64,Goedel.Cryptography.Dare.ContentMeta,System.String,System.Byte[],System.Collections.Generic.List{System.Byte[]},Goedel.Cryptography.Dare.CryptoParameters)">
            <summary>
            Begin appending a data frame.
            </summary>
            <remarks>This call is not thread safe. It is the responsibility of the caller
            to ensure that only one process writes to the sequence at once and that no other
            process has access.</remarks>
            <param name="contentLength">The plaintext payload data length. the final payload
            length may be longer as a result of padding.</param>
            <param name="contentInfo">Pre-populated sequence header.</param>
            <param name="contentType">The payload content type.</param>
            <param name="cloaked">Data to be converted to an EDS and presented as a cloaked header.</param>
            <param name="dataSequences">Data sequences to be converted to an EDS and presented 
                as an EDSS header entry.</param>
            <param name="cryptoParameters">The cryptographic parameters.</param>
            <returns>The number of bytes written</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.AppendProcess(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Process record data. This method may be called any number
            of times but the total count of the number of items must match
            the Content Length specified in the original call.
            </summary>
            <param name="data">The data to procees</param>
            <param name="offset">Index of first byte to process.</param>
            <param name="count">Number of bytes to process.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.AppendEnd">
            <summary>
            Complete appending a record.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.Defer(Goedel.Cryptography.Dare.SequenceWriterDeferred,Goedel.Cryptography.Dare.ContentMeta,System.Byte[],System.Byte[],System.Collections.Generic.List{System.Byte[]})">
            <summary>
            Create a DareEnvelope to be added to the sequence in deferred write mode.
            </summary>
            <param name="contextWrite">The sequence write context the envelope is to be written in.</param>
            <param name="contentMeta">The content metadata.</param>
            <param name="data">The data plaintext payload.</param>
            <param name="cloaked">Data to be converted to an EDS and presented as a cloaked header.</param>
            <param name="dataSequences">Data sequences to be converted to an EDS and presented 
                as an EDSS header entry.</param>
            <returns>The created envelope</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.PrepareFrame(Goedel.Cryptography.Dare.SequenceWriter)">
            <summary>
            Prepare the header information to write an envelope to a sequence.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.ValidateFrame(Goedel.Cryptography.Dare.SequenceWriter)">
            <summary>
            Validate a frame to be added to the sequence.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.CommitHeader(Goedel.Cryptography.Dare.DareHeader,Goedel.Cryptography.Dare.SequenceWriter)">
            <summary>
            Append the header to the frame. This is called after the payload data
            has been passed using AppendPreprocess.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.GetHeader(System.Int32)">
            <summary>
            Return the header of frame with index <paramref name="frame"/>.
            </summary>
            <param name="frame">The index of the frame to be returned.</param>
            <returns>The requested header.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.FillDictionary(Goedel.Cryptography.Dare.SequenceInfo,System.Int64,System.Int64)">
            <summary>
            Initialize the dictionaries used to manage the tree by registering the set
            of values leading up to the apex value.
            </summary>
            <param name="header">Final frame header</param>
            <param name="firstPosition">Position of frame 1</param>
            <param name="positionLast">Position of the last frame</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.VerifyPolicy(System.String,Goedel.Cryptography.IKeyLocate)">
            <summary>
            Verify that the file <paramref name="filename"/> is a DARE Sequence that
            is in compliance with its specified policy.
            </summary>
            <param name="filename">The sequence to verify.</param>
            <param name="keyLocate">Key location to be used to resolve keys.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.VerifyPolicy">
            <summary>
            Verify policy on the sequence.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.CheckSequence(System.Collections.Generic.List{Goedel.Cryptography.Dare.DareHeader})">
            <summary>
            Perform sanity checking on a list of sequence headers.
            </summary>
            <param name="headers">List of headers to check</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.Validate(System.Int32)">
            <summary>
            Read the data in the current file 
            </summary>
            <param name="direction">Direction in which to perform check.
            <list type="bullet"><item>1 = forward</item><item>-1 = forward</item>
            <item>0 = forward then backward.</item></list></param>
            <returns>True if the validation succeded, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.Start">
            <summary>
            Move read pointer to Frame 1.
            </summary>
            <returns>True if a next frame exists, otherwise false</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.NextFrame">
            <summary>
            Read the next frame in the file.
            </summary>
            <returns>True if a next frame exists, otherwise false</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.PreviousFrame">
            <summary>
            Read the next frame in the file.
            </summary>
            <returns>True if a next frame exists, otherwise false</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.Previous">
            <summary>
            Read the previous frame in the file.
            </summary>
            <returns>True if a previous frame exists, otherwise false</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.MoveToIndex(System.Int64)">
            <summary>
            Move to the frame with index Position in the file. 
            <para>If the tree positioning mechanism is in use, the
            time complexity for this operation is log2(n) where n is
            the difference between the current position and the new 
            position.</para>
            </summary>
            <param name="frameIndex">Frame index to move to.</param>
            <returns>True if the position exists.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.MoveToLast">
            <summary>
            Move to begin reading the last frame in the sequence.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.VerifySequence">
            <summary>
            Verify sequence contents by reading every frame starting with the first and checking
            for integrity. This is likely to take a very long time.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.ReadDirectReverse">
            <summary>
            Move to the start of the previous frame and save the reader position.
            Then read the frame and return the reader position to the start of
            the frame.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.ReadDirect">
            <summary>
            Return the current sequence frame as a DareEnvelope.
            </summary>
            <returns>The sequence data.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.ToConsole(System.String)">
            <summary>
            Pretty print the sequence specified to the console
            </summary>
            <param name="fileName">The sequence file.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.Sequence.ToBuilder(System.String,System.Text.StringBuilder,System.Int32)">
            <summary>
            Pretty print the sequence specified.
            </summary>
            <param name="fileName">The sequence file.</param>
            <param name="builder">The stringbuilder to use.</param>
            <param name="indent">The indent level.</param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.SequenceIntegrity">
            <summary>Describe the integrity checking to be applied when reading a sequence.</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.SequenceIntegrity.None">
            <summary>Do not perform integrity checks.</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.SequenceIntegrity.Trailer">
            <summary>Check that the digest values specified in the headers and trailers are
            consistent with the payload digest value specified. Do not verify the payload digest 
            value.</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.SequenceIntegrity.Full">
            <summary>Check that the digest values specified in the headers and trailers are
            consistent with the payload digest value specified and verify the payload digest 
            value against the payload contents.</summary>
        </member>
        <member name="T:Goedel.Cryptography.Dare.SequenceFrameIndex">
            <summary>
            Sequence index with the decoded head and tail and extent information for
            the body.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.SequenceFrameIndex.Header">
            <summary>The frame header</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.SequenceFrameIndex.Trailer">
            <summary>The frame trailer</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.SequenceFrameIndex.DataPosition">
            <summary>The first byte of the data segment (excluding the length indicator)</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.SequenceFrameIndex.DataLength">
            <summary>The length of the data segment.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.SequenceFrameIndex.HasPayload">
            <summary>If true, the frame has a payload section</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.SequenceFrameIndex.JsonObject">
            <summary>The decoded JSONObject</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.SequenceFrameIndex.IsEncrypted">
            <summary>Convenience property, set true iff payload is encrypted.</summary> 
        </member>
        <member name="P:Goedel.Cryptography.Dare.SequenceFrameIndex.KeyExchange">
            <summary>Convenience property, set true iff header contains direct key exchange.</summary> 
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceFrameIndex.CopyPayload(Goedel.Cryptography.Dare.Sequence,Goedel.Cryptography.IKeyLocate,System.IO.Stream)">
            <summary>
            Return the frame payload.
            </summary>
            <returns>The frame payload data.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceFrameIndex.#ctor(Goedel.Cryptography.Dare.DareEnvelope)">
            <summary>
            Constructor returning an instance for the envelope <paramref name="envelope"/>.
            </summary>
            <param name="envelope">The envelope to return an index for.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceFrameIndex.#ctor(Goedel.Cryptography.Dare.JbcdStream,System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="jsonStream">Stream reader positioned to the start of the frame.</param>
            <param name="Position">The position in the file.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceFrameIndex.GetJSONObject(Goedel.Cryptography.Dare.Sequence)">
            <summary>
            Read the payload data from the specified position in <paramref name="sequence"/>
            and deserialize to return the corresponding object.
            </summary>
            <param name="sequence">The container that was indexed.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceFrameIndex.GetBody(Goedel.Cryptography.Dare.Sequence)">
            <summary>
            Return the frame payload verbatim (i.e. ciphertext if encrypted).
            </summary>
            <param name="sequence">The indexed sequence.</param>
            <returns>The frame payload</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceFrameIndex.GetEnvelope(Goedel.Cryptography.Dare.Sequence,System.Boolean)">
            <summary>
            Return a DareEnvelope wrapping the fnewrame.
            </summary>
            <param name="sequence">The indexed container.</param>
            <param name="detatched">If true, </param>
            <returns>The frame payload</returns>      
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceFrameIndex.CopyToFile(Goedel.Cryptography.Dare.Sequence,System.String)">
            <summary>
            Copy the payload data to file.
            </summary>
            <param name="file">The file to write the payload to.</param>
            <param name="sequence">The sequence in which the payload is recorded.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceFrameIndex.GetPayload(Goedel.Cryptography.Dare.Sequence,Goedel.Cryptography.IKeyLocate)">
            <summary>
            Return the frame payload.
            </summary>
            <returns>The frame payload data.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Dare.SequenceWriter">
            <summary>
            Base class for container writers.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.SequenceWriter.Sequence">
            <summary>The container to be written to.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.SequenceWriter.CryptoParametersSequence">
            <summary>Property allowing access to the crypto parameters and policy governing
            the container.</summary> 
        </member>
        <member name="F:Goedel.Cryptography.Dare.SequenceWriter.SequenceHeader">
            <summary>The last container header written</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.SequenceWriter.SequenceInfo">
            <summary>SequenceInfo element of last container header written.</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.SequenceWriter.DareTrailer">
            <summary>The trailer of the envelope currently being written.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.SequenceWriter.FrameStart">
            <summary>Position of the frame start.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceWriter.CommitFrame(Goedel.Cryptography.Dare.DareTrailer)">
            <summary>
            Finish writing the frame
            </summary>
            <param name="dareTrailer">The trailer to write.</param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.SequenceWriterFile">
            <summary>
            Sequence writer to write direct to a file.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.SequenceWriterFile.FrameStart">
            <summary>Position of the frame start.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceWriterFile.#ctor(Goedel.Cryptography.Dare.Sequence,Goedel.Cryptography.Dare.DareHeader,Goedel.Cryptography.Dare.JbcdStream)">
            <summary>
            Main constructor.
            </summary>
            <param name="sequence">The sequence to be written</param>
            <param name="header">The sequence header???</param>
            <param name="JBCDStream">The stream???</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceWriterFile.CommitFrame(Goedel.Cryptography.Dare.DareTrailer)">
            <summary>
            Finish writing the frame
            </summary>
            <param name="dareTrailer">The trailer to write.</param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.SequenceWriterDeferred">
            <summary>
            Sequence writer to write in defered mode so that the updates can be applied in one transaction.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.SequenceWriterDeferred.Digest">
            <summary>The apex digest value of the container as written to the file.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceWriterDeferred.#ctor(Goedel.Cryptography.Dare.Sequence)">
            <summary>
            Main constructor
            </summary>
            <param name="sequence">The container to be written</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceWriterDeferred.PrepareSequenceInfo">
            <summary>
            Prepare the sequence information for a new frame to be added to the sequence.
            </summary>
            <returns>The new sequence information</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceWriterDeferred.StreamOpen">
            <summary>
            Open a write stream
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceWriterDeferred.StreamClose">
            <summary>
            Close the write stream.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceWriterDeferred.End(System.Byte[])">
            <summary>
            Write a fixed length body.
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.SequenceWriterDeferred.CommitFrame(Goedel.Cryptography.Dare.DareTrailer)">
            <summary>
            Finish writing the frame
            </summary>
            <param name="dareTrailer">The trailer to write.</param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.StoreEntry">
            <summary>
            Index handle for data stored in a <see cref="T:Goedel.Cryptography.Dare.StoreIndex"/> in-memory index.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.StoreEntry.Container">
            <summary>The container the store entry belongs to</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.StoreEntry.ContainerHeader">
            <summary>The envelope header</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.StoreEntry.ContentInfo">
            <summary>The envelope metadata</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.StoreEntry.UniqueID">
            <summary>Unique identifier of entry;</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.StoreEntry.FrameCount">
            <summary>The container frame</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.StoreEntry.Deleted">
            <summary>If true the object haws been deleted and cannot be further modified.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.StoreEntry.JsonObject">
            <summary>The JSONObject.</summary>
        </member>
        <member name="F:Goedel.Cryptography.Dare.StoreEntry.FrameIndex">
            <summary>The frame index within the container</summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.StoreEntry.Previous">
            <summary>
            The previous object instance value for this object instance.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.StoreEntry.First">
            <summary>
            The first object instance value for this object instance.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.StoreEntry.#ctor(Goedel.Cryptography.Dare.Sequence,Goedel.Cryptography.Dare.DareEnvelope,Goedel.Cryptography.Dare.StoreEntry,Goedel.Protocol.JsonObject)">
            <summary>
            Constructor, creates an entry for the specified container header, data and previous relationship.
            </summary>
            <param name="container">Container to create the entry in.</param>
            <param name="dareEnvelope">The envelope entry.</param>
            <param name="previous">Link to previous value of this object</param>
            <param name="item">The JSONObject representation.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.StoreEntry.#ctor(Goedel.Cryptography.Dare.SequenceFrameIndex,Goedel.Cryptography.Dare.StoreEntry,Goedel.Cryptography.Dare.Sequence,Goedel.Protocol.JsonObject)">
            <summary>
            Constructor, creates an entry for the specified container header, data and previous relationship.
            </summary>
            <param name="frameIndex">The position of the entry within the container frame.</param>
            <param name="previous">Link to previous value of this object</param>
            <param name="container"></param>
            <param name="item">The JSONObject representation.</param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.ContainerStoreIndexEntry">
            <summary>
            Index entry for Item.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.ContainerStoreIndexEntry.Data">
            <summary>
            The associated persistence data.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.ContainerStoreIndexEntry.Singleton">
            <summary>
            If true, this is the only entry in the list.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerStoreIndexEntry.GetEnumerator">
            <summary>
            Implement the enumeration interface
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="T:Goedel.Cryptography.Dare.ContainerStoreIndexEntry.Enumerator">
            <summary>
            Enumerator class. 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerStoreIndexEntry.#ctor(Goedel.Cryptography.Dare.ContainerStoreIndexEntry,Goedel.Cryptography.Dare.IPersistenceEntry)">
            <summary>
            Insert a new Index entry to a list of index entries
            </summary>
            <param name="Existing">The entry that will becomd the Previous entry,
            if null, starts a new list.</param>
            <param name="EntryData">The entry data for the new index value.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerStoreIndexEntry.Insert(Goedel.Cryptography.Dare.IPersistenceIndexEntry,Goedel.Cryptography.Dare.IPersistenceEntry)">
            <summary>
            Insert a new Index entry to a list of index entries.
            </summary>
            <param name="Existing">The entry that will becomd the Previous entry,
            if null, starts a new list.</param>
            <param name="EntryData">The entry data for the new index value.</param>
            <returns>The new entry.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.ContainerStoreIndexEntry.Remove(Goedel.Cryptography.Dare.IPersistenceIndexEntry)">
            <summary>
            Remove an entry from a list of index entries.
            </summary>
            <param name="Entry"></param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.StoreIndex">
            <summary>
            In-memory index structure for container data store. This offers the best performance
            but at a significantly higher memory overhead than an index-on disk approach.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.StoreIndex.Last(System.String)">
            <summary>
            The set of object instances that match the specified value.
            </summary>
            <param name="Value">The value to match</param>
            <returns>The object instance if found, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Dare.StoreIndex.Add(Goedel.Cryptography.Dare.StoreEntry,System.String)">
            <summary>
            Add an entry to the index.
            </summary>
            <param name="ContainerStoreEntry">The entry to add.</param>
            <param name="Value">The value to add it to</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.StoreIndex.Delete(Goedel.Cryptography.Dare.StoreEntry,System.String)">
            <summary>
            Remove an entry from the index.
            </summary>
            <param name="ContainerStoreEntry">The entry to remove.</param>
            <param name="Value">The value to remove it from</param>
        </member>
        <member name="T:Goedel.Cryptography.Dare.StreamReaderBounded">
            <summary>
            A stream that reads from a container record.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.StreamReaderBounded.Length">
            <summary>
            Gets the frame length in bytes. 
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Dare.StreamReaderBounded.Remaining">
            <summary>
            The number of bytes remaining to be read.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Dare.StreamReaderBounded.#ctor(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Construct a bounded reader for the frame.
            </summary>
            <param name="Stream">The underlying stream to be read</param>
            <param name="Start">The position at which to begin reading the file.</param>
            <param name="Length">The maximum number of bytes to be read.</param>
        </member>
        <member name="M:Goedel.Cryptography.Dare.StreamReaderBounded.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies bytes from the current buffered stream to an array.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the 
            specified byte array with the values between <paramref name="offset"/> and 
            (<paramref name="offset"/> + <paramref name="Count"/> - 1) 
            replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing 
            the data read from the current stream.</param>
            <param name="Count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes 
            requested if that many bytes are not currently available, or zero (0) if the end of the stream 
            has been reached.</returns>
        </member>
    </members>
</doc>
