<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Goedel.Protocol.Service</name>
    </assembly>
    <members>
        <member name="T:Goedel.Protocol.Service.ConnectionId">
            <summary>
            The connection identifier.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.ConnectionId.Serial">
            <summary>Unique serial number.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.ConnectionId.ConnectionReserved">
            <summary>Reserves serial numbers 0-16</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.ConnectionId.Initial">
            <summary>Initial connection identifier.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.ConnectionId.Invalid">
            <summary>Invalid connection identifier.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.ConnectionId.Ignore">
            <summary>Ignore connection identifier</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.ConnectionId.IsInitial">
            <summary>If true the connection identifier is an initial connection.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.ConnectionId.InitialPacket">
            <summary>Connection token used for an initial packet.</summary> 
        </member>
        <member name="M:Goedel.Protocol.Service.ConnectionId.#ctor(System.UInt64)">
            <summary>
            Constructor, return an instance with unique serial number <paramref name="serial"/>.
            </summary>
            <param name="serial">The serial number of the connection.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.ConnectionId.#ctor(System.Byte[])">
            <summary>
            Constructor recovering the connection identifier from the first n bytes of
            <paramref name="plaintext"/>.
            </summary>
            <param name="plaintext">The decrypted identifier buffer.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.ConnectionId.GetFirst(System.Security.Cryptography.ICryptoTransform)">
            <summary>
            Return the 
            </summary>
            <param name="decryptor"></param>
            <returns></returns>
        </member>
        <member name="M:Goedel.Protocol.Service.ConnectionId.WriteConnectionToken(System.Security.Cryptography.ICryptoTransform,System.UInt64,System.Byte[],System.Int32@)">
            <summary>
            Write a connection token to the output buffer <paramref name="packet"/> beginning
            at byte <paramref name="packetOffset"/>. The connection token will be the result of
            encrypting the byte sequence formed from <see cref="P:Goedel.Protocol.Service.ConnectionId.Serial"/> followed by the
            value <paramref name="counter"/> using the encryption trasform <paramref name="encryptor"/>.
            </summary>
            <param name="encryptor">The encryptor to use</param>
            <param name="counter">Counter value, MUST be incremented on each use.</param>
            <param name="packet">Packet buffer to write the connection token to.</param>
            <param name="packetOffset">Offset within the buffer.</param>
        </member>
        <member name="T:Goedel.Protocol.Service.ConnectionIdGenerator">
            <summary>
            Issuer of connection identifiers.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.ConnectionIdGenerator.Start">
            <summary>The first connection allocated (will never be issued though)</summary>  
        </member>
        <member name="P:Goedel.Protocol.Service.ConnectionIdGenerator.Serial">
            <sumary>The next connection identifier value to allocate.</sumary> 
        </member>
        <member name="M:Goedel.Protocol.Service.ConnectionIdGenerator.#ctor(System.Security.Cryptography.ICryptoTransform)">
            <summary>
            Constructor. Returns a new instance that is guaranteed to never issue a 
            connection identifier that could produce an all zeroes token.
            </summary>
            <param name="decryptor">The decryption transform.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.ConnectionIdGenerator.GetNext">
            <summary>
            Thread safe allocation of a unique new connection identifier which is
            guaranteed to never be one of the reserved values or to result in an 
            all zeros output.
            </summary>
            <returns>The new connection identifier.</returns>
        </member>
        <member name="T:Goedel.Protocol.Service.FatEvent">
            <summary>
            Structure describing a complete event.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.FatEvent.LogLevel">
            <summary>The log level for the event.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.FatEvent.EventId">
            <summary>The event identifier (should be unique for a given application)</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.FatEvent.Message">
            <summary>The event message.</summary> 
        </member>
        <member name="M:Goedel.Protocol.Service.FatEvent.#ctor(Microsoft.Extensions.Logging.LogLevel,System.Int32,System.String,System.String)">
            <summary>
            Constructor returning an instance.
            </summary>
            <param name="logLevel">The log level for the event.</param>
            <param name="id">The event identifier (should be unique for a given application)</param>
            <param name="name">The event name (written to the log)</param>
            <param name="message">The event message.</param>
        </member>
        <member name="T:Goedel.Protocol.Service.Extensions">
            <summary>
            Extension class to make loggin an event straightforward.
            </summary>
        </member>
        <member name="M:Goedel.Protocol.Service.Extensions.Log(Microsoft.Extensions.Logging.ILogger,Goedel.Protocol.Service.FatEvent,System.Object[])">
            <summary>
            Log an event.
            </summary>
            <param name="logger">The event logger.</param>
            <param name="logEvent">The event to log.</param>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.Extensions.Log(Microsoft.Extensions.Logging.ILogger,System.Exception,Goedel.Protocol.Service.FatEvent,System.Object[])">
            <summary>
            Log an event.
            </summary>
            <param name="logger">The event logger.</param>
            <param name="logEvent">The event to log.</param>
            <param name="args">The event arguments.</param>
            <param name="exception">Exception returned.</param>
        </member>
        <member name="T:Goedel.Protocol.Service.Event">
            <summary>
            Logging events for the Goedel Host.
            </summary>
        </member>
        <member name="T:Goedel.Protocol.Service.ServerNotSupported">
            <summary>
            This platform does not support HTTP service
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.ServerNotSupported.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="P:Goedel.Protocol.Service.ServerNotSupported.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Protocol.Service.ServerNotSupported.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.ServerNotSupported._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="P:Goedel.Protocol.Service.ServerNotSupported.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Protocol.Service.EventExtensions">
            <summary>
            Extensions class defining logging events and convenience methods.
            </summary>
        </member>
        <member name="M:Goedel.Protocol.Service.EventExtensions.#cctor">
            <summary>
            Static initializer, is called once when the module loads.
            </summary>
        </member>
        <member name="M:Goedel.Protocol.Service.EventExtensions.ListenerStart(Microsoft.Extensions.Logging.ILogger,System.Exception)">
            <summary>
            Write an event of type ListenerStart to <paramref name="logger"/> 
            </summary>
            <param name="logger">The logger to write the output to.</param>
            <param name="_exception">Exception (if thrown)</param>
        </member>
        <member name="M:Goedel.Protocol.Service.EventExtensions.ListenerEnd(Microsoft.Extensions.Logging.ILogger,System.Exception)">
            <summary>
            Write an event of type ListenerEnd to <paramref name="logger"/> 
            </summary>
            <param name="logger">The logger to write the output to.</param>
            <param name="_exception">Exception (if thrown)</param>
        </member>
        <member name="M:Goedel.Protocol.Service.EventExtensions.ServiceStart(Microsoft.Extensions.Logging.ILogger,System.String,System.String,System.String,System.Exception)">
            <summary>
            Write an event of type ServiceStart to <paramref name="logger"/> 
            </summary>
            <param name="logger">The logger to write the output to.</param>
            <param name="serviceName">The service name</param>
            <param name="serviceUdf">Service key identifier</param>
            <param name="hostUdf">Host key identifier</param>
            <param name="_exception">Exception (if thrown)</param>
        </member>
        <member name="M:Goedel.Protocol.Service.EventExtensions.ServiceEnd(Microsoft.Extensions.Logging.ILogger,System.String,System.Exception)">
            <summary>
            Write an event of type ServiceEnd to <paramref name="logger"/> 
            </summary>
            <param name="logger">The logger to write the output to.</param>
            <param name="serviceName">The service name</param>
            <param name="_exception">Exception (if thrown)</param>
        </member>
        <member name="M:Goedel.Protocol.Service.EventExtensions.TransactionStart(Microsoft.Extensions.Logging.ILogger,System.Int64,System.String,System.Exception)">
            <summary>
            Write an event of type TransactionStart to <paramref name="logger"/> 
            </summary>
            <param name="logger">The logger to write the output to.</param>
            <param name="transactionId">Transaction identifier</param>
            <param name="method">The transaction method</param>
            <param name="_exception">Exception (if thrown)</param>
        </member>
        <member name="M:Goedel.Protocol.Service.EventExtensions.TransactionCompleted(Microsoft.Extensions.Logging.ILogger,System.Int64,System.String,System.Exception)">
            <summary>
            Write an event of type TransactionCompleted to <paramref name="logger"/> 
            </summary>
            <param name="logger">The logger to write the output to.</param>
            <param name="transactionId">Transaction identifier</param>
            <param name="method">The transaction method</param>
            <param name="_exception">Exception (if thrown)</param>
        </member>
        <member name="M:Goedel.Protocol.Service.EventExtensions.LoadContextUser(Microsoft.Extensions.Logging.ILogger,System.String,System.Exception)">
            <summary>
            Write an event of type LoadContextUser to <paramref name="logger"/> 
            </summary>
            <param name="logger">The logger to write the output to.</param>
            <param name="accountAddress">The account address</param>
            <param name="_exception">Exception (if thrown)</param>
        </member>
        <member name="M:Goedel.Protocol.Service.EventExtensions.DisposeContextUser(Microsoft.Extensions.Logging.ILogger,System.String,System.Exception)">
            <summary>
            Write an event of type DisposeContextUser to <paramref name="logger"/> 
            </summary>
            <param name="logger">The logger to write the output to.</param>
            <param name="accountAddress">The account address</param>
            <param name="_exception">Exception (if thrown)</param>
        </member>
        <member name="M:Goedel.Protocol.Service.EventExtensions.OpenFile(Microsoft.Extensions.Logging.ILogger,System.String,System.String,System.Exception)">
            <summary>
            Write an event of type OpenFile to <paramref name="logger"/> 
            </summary>
            <param name="logger">The logger to write the output to.</param>
            <param name="filename">The file name</param>
            <param name="mode">The access mode</param>
            <param name="_exception">Exception (if thrown)</param>
        </member>
        <member name="M:Goedel.Protocol.Service.EventExtensions.CloseFile(Microsoft.Extensions.Logging.ILogger,System.String,System.Exception)">
            <summary>
            Write an event of type CloseFile to <paramref name="logger"/> 
            </summary>
            <param name="logger">The logger to write the output to.</param>
            <param name="filename">The file name</param>
            <param name="_exception">Exception (if thrown)</param>
        </member>
        <member name="M:Goedel.Protocol.Service.EventExtensions.OpenContainer(Microsoft.Extensions.Logging.ILogger,System.String,System.String,System.Exception)">
            <summary>
            Write an event of type OpenContainer to <paramref name="logger"/> 
            </summary>
            <param name="logger">The logger to write the output to.</param>
            <param name="filename">The file name</param>
            <param name="mode">The access mode</param>
            <param name="_exception">Exception (if thrown)</param>
        </member>
        <member name="M:Goedel.Protocol.Service.EventExtensions.CloseContainer(Microsoft.Extensions.Logging.ILogger,System.String,System.Exception)">
            <summary>
            Write an event of type CloseContainer to <paramref name="logger"/> 
            </summary>
            <param name="logger">The logger to write the output to.</param>
            <param name="filename">The file name</param>
            <param name="_exception">Exception (if thrown)</param>
        </member>
        <member name="M:Goedel.Protocol.Service.EventExtensions.TransactionFailed(Microsoft.Extensions.Logging.ILogger,System.Int64,System.String,System.Exception)">
            <summary>
            Write an event of type TransactionFailed to <paramref name="logger"/> 
            </summary>
            <param name="logger">The logger to write the output to.</param>
            <param name="transactionId">Transaction identifier</param>
            <param name="method">The transaction method</param>
            <param name="_exception">Exception (if thrown)</param>
        </member>
        <member name="M:Goedel.Protocol.Service.EventExtensions.TransactionUnauthorized(Microsoft.Extensions.Logging.ILogger,System.Int64,System.String,System.Exception)">
            <summary>
            Write an event of type TransactionUnauthorized to <paramref name="logger"/> 
            </summary>
            <param name="logger">The logger to write the output to.</param>
            <param name="transactionId">Transaction identifier</param>
            <param name="method">The transaction method</param>
            <param name="_exception">Exception (if thrown)</param>
        </member>
        <member name="M:Goedel.Protocol.Service.EventExtensions.TransactionNotSupported(Microsoft.Extensions.Logging.ILogger,System.String,System.Exception)">
            <summary>
            Write an event of type TransactionNotSupported to <paramref name="logger"/> 
            </summary>
            <param name="logger">The logger to write the output to.</param>
            <param name="method">The transaction method</param>
            <param name="_exception">Exception (if thrown)</param>
        </member>
        <member name="M:Goedel.Protocol.Service.EventExtensions.TransactionUnknown(Microsoft.Extensions.Logging.ILogger,System.String,System.Exception)">
            <summary>
            Write an event of type TransactionUnknown to <paramref name="logger"/> 
            </summary>
            <param name="logger">The logger to write the output to.</param>
            <param name="method">The transaction method</param>
            <param name="_exception">Exception (if thrown)</param>
        </member>
        <member name="M:Goedel.Protocol.Service.EventExtensions.UnhandledException(Microsoft.Extensions.Logging.ILogger,System.Exception)">
            <summary>
            Write an event of type UnhandledException to <paramref name="logger"/> 
            </summary>
            <param name="logger">The logger to write the output to.</param>
            <param name="_exception">Exception (if thrown)</param>
        </member>
        <member name="T:Goedel.Protocol.Service.IMonitorProvider">
            <summary>
            Monitor provider interface. Used by a provider to advertise availability of a monitor.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.IMonitorProvider.Monitor">
            <summary>The monitor class to be exposed.</summary> 
        </member>
        <member name="T:Goedel.Protocol.Service.HostMonitor">
            <summary>
            Service monitoring class.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.HostMonitor.Total">
            <summary>Total result since the Monitor was last restarted.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.HostMonitor.Recent">
            <summary>Total results in the most recent sample interval.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.HostMonitor.Logger">
            <summary>The system logger.</summary> 
        </member>
        <member name="M:Goedel.Protocol.Service.HostMonitor.#ctor(Microsoft.Extensions.Logging.ILogger{Goedel.Protocol.Service.HostMonitor},Microsoft.Extensions.Options.IOptionsMonitor{Goedel.Protocol.GenericHostConfiguration})">
            <summary>
            Constructor returning a monitor instance using the logger <paramref name="logger"/>.
            </summary>
            <param name="logger">The system logger output.</param>
            <param name="hostConfiguration">The host configuration</param>
        </member>
        <member name="M:Goedel.Protocol.Service.HostMonitor.Log(Goedel.Protocol.Service.FatEvent,System.Object[])">
            <summary>
            Write an event to the event logger.
            </summary>
            <param name="logEvent">The event to log.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.HostMonitor.StartMonitor(System.Int32,System.Int32)">
            <summary>
            Start the monitor with <paramref name="listeners"/>
            listeners and <paramref name="dispatchers"/> dispatchers.
            </summary>
            <param name="listeners">The number of listener threads.</param>
            <param name="dispatchers">The number of dispatcher threads.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.HostMonitor.StartBusy">
            <summary>
            Mark the start of period when the service is blocked because no dispatcher threads are available.
            </summary>
        </member>
        <member name="M:Goedel.Protocol.Service.HostMonitor.EndBusy">
            <summary>
            Mark the end of period when the service is blocked because no dispatcher threads are available.
            </summary>
        </member>
        <member name="M:Goedel.Protocol.Service.HostMonitor.StartDispatch(System.Int32)">
            <summary>
            Mark the start of dispatch on thread <paramref name="dispatch"/>
            </summary>
            <param name="dispatch">Index of the thread that was started.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.HostMonitor.EndDispatch(System.Int32)">
            <summary>
            Mark the end of dispatch on thread <paramref name="dispatch"/>
            </summary>
            <param name="dispatch">Index of the thread that was ended.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.HostMonitor.MarkRecent">
            <summary>
            Mark the end of the 'Recent' period.
            </summary>
        </member>
        <member name="M:Goedel.Protocol.Service.HostMonitor.GetStats">
            <summary>
            Return a snapshot of the server status for the total time since the 
            collection period began and for the most recent collection interval.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Goedel.Protocol.Service.IServiceConfiguration">
            <summary>
            Service configuration
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.IServiceConfiguration.WellKnown">
            <summary>The IANA well known service name.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.IServiceConfiguration.Addresses">
            <summary>List of service addresses.</summary> 
        </member>
        <member name="T:Goedel.Protocol.Service.LogService">
            <summary>
            Service level logging class.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.LogService.ConsoleOutput">
            <summary>Reporting mode for console output</summary>  
        </member>
        <member name="P:Goedel.Protocol.Service.LogService.HostMonitor">
            <summary>The host monitor tracking start and end of host requests.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.LogService.Logger">
            <summary>The logger instance</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.LogService.GenericHostConfiguration">
            <summary>The host configuration</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.LogService.GenericServiceConfiguration">
            <summary>The service configuration</summary> 
        </member>
        <member name="M:Goedel.Protocol.Service.LogService.#ctor(Goedel.Protocol.GenericHostConfiguration,Goedel.Protocol.Service.ServiceConfiguration,Goedel.Protocol.Service.HostMonitor,System.Int64)">
            <summary>
            Create a transaction logging service instance.
            </summary>
            <param name="genericHostConfiguration">The host configuration</param>
            <param name="meshHostConfiguration">The service configuration</param>
            <param name="hostMonitor">The host monitor service</param>
            <param name="first">Index of the first log entry</param>
        </member>
        <member name="M:Goedel.Protocol.Service.LogService.Start(System.String,Goedel.Protocol.IReport)">
            <summary>
            Begin a new transaction.
            </summary>
            <param name="token">The transaction token.</param>
            <param name="request">The request identifier.</param>
            <returns>The transaction record.</returns>
        </member>
        <member name="M:Goedel.Protocol.Service.LogService.UnknownCommand(System.String)">
            <summary>
            Report unknown command.
            </summary>
            <param name="command">The unknown command.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.LogService.WriteToConsole(System.Text.StringBuilder)">
            <summary>
            Atomic write to console.
            </summary>
            <param name="output">The text to write.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.LogService.Success(Goedel.Protocol.Service.LogTransaction)">
            <summary>
            Record successful completion of the transaction <paramref name="logTransaction"/>.
            </summary>
            <param name="logTransaction">Transaction to log.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.LogService.Fail(Goedel.Protocol.Service.LogTransaction)">
            <summary>
            Record failure of the transaction <paramref name="logTransaction"/>.
            </summary>
            <param name="logTransaction">Transaction to log.</param>
        </member>
        <member name="T:Goedel.Protocol.Service.LogTransaction">
            <summary>
            Record describing a specific transaction.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.LogTransaction.Start">
            <summary>Transaction start time.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.LogTransaction.Finish">
            <summary>Transaction finish time.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.LogTransaction.LogService">
            <summary>The service logging instance.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.LogTransaction.TransactionIdentifier">
            <summary>Unique, monotonically increasing transaction identifier.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.LogTransaction.Token">
            <summary>The transaction method identifier.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.LogTransaction.Request">
            <summary>The request object.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.LogTransaction.Response">
            <summary>The response object</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.LogTransaction.Exception">
            <summary>Exception (if occurred)</summary> 
        </member>
        <member name="M:Goedel.Protocol.Service.LogTransaction.#ctor(Goedel.Protocol.Service.LogService)">
            <summary>
            Constructor, create new instance of a transaction log entry for 
            <paramref name="logService"/>.
            </summary>
            <param name="logService">The service to log.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.LogTransaction.Success(Goedel.Protocol.IReport)">
            <summary>
            Report successful completion.
            </summary>
            <param name="response">The response object.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.LogTransaction.Fail(System.Exception,Goedel.Protocol.IReport)">
            <summary>
            Report failure.
            </summary>
            <param name="exception">The exception raised.</param>
            <param name="response">The response object.</param>
        </member>
        <member name="T:Goedel.Protocol.Service.MonitorResult">
            <summary>
            Class containing a set of monitor results.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.MonitorResult.TimeBegin">
            <summary>The time at which the result interval began</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.MonitorResult.TimeEnd">
            <summary>The time at which the next result interval began</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.MonitorResult.TimeElapsed">
            <summary>The elapsed time.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.MonitorResult.ListenerRequests">
            <summary>Number of listener events received</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.MonitorResult.DispatcherRequests">
            <summary>Number of dispatcher requests started.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.MonitorResult.DispatcherBusy">
            <summary>Time the dispatcher thread was busy in milliseconds</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.MonitorResult.Busy">
            <summary>Time all threads were busy.</summary> 
        </member>
        <member name="M:Goedel.Protocol.Service.MonitorResult.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor creating a new result for <paramref name="listeners"/> and
            <paramref name="dispatchers"/> dispatchers.
            </summary>
            <param name="listeners">The number of listener threads.</param>
            <param name="dispatchers">The number of dispatcher threads.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.MonitorResult.Add(Goedel.Protocol.Service.MonitorResult)">
            <summary>
            Add the continguous result <paramref name="value"/> to the current result.
            </summary>
            <param name="value">The contiguous result data.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.MonitorResult.CopyClear">
            <summary>
            Create a copy of the current monitor result, clear the current values and return
            the copy. This is performed 
            </summary>
            <returns>The copy of the original values.</returns>
        </member>
        <member name="M:Goedel.Protocol.Service.MonitorResult.Copy">
            <summary>
            Create a copy of the current monitor result and return
            the copy. This is performed 
            </summary>
            <returns>The copy of the values.</returns>
        </member>
        <member name="T:Goedel.Protocol.Service.NamespaceDoc">
            <summary>
            Service monitoring classes.
            </summary>
        </member>
        <member name="T:Goedel.Protocol.Service.NullTransform16">
            <summary>
            Block cipher performing a null transform on 16 bytes at a time. 
            For debugging use only.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.NullTransform16.CanReuseTransform">
            <inheritdoc/>
        </member>
        <member name="P:Goedel.Protocol.Service.NullTransform16.CanTransformMultipleBlocks">
            <inheritdoc/>
        </member>
        <member name="P:Goedel.Protocol.Service.NullTransform16.InputBlockSize">
            <inheritdoc/>
        </member>
        <member name="P:Goedel.Protocol.Service.NullTransform16.OutputBlockSize">
            <inheritdoc/>
        </member>
        <member name="M:Goedel.Protocol.Service.NullTransform16.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Goedel.Protocol.Service.NullTransform16.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Goedel.Protocol.Service.NullTransform16.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Goedel.Protocol.Service.OutboundData">
            <summary>
            Record specifying new data to be sent
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.OutboundData.OutboundItems">
            <summary></summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.OutboundData.HasPending">
            <summary></summary> 
        </member>
        <member name="M:Goedel.Protocol.Service.OutboundData.OpenConnection(Goedel.Protocol.Service.PacketConnection)">
            <summary>
            Queue connection request.
            </summary>
            <param name="connectionId">The connection identifier.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.OutboundData.Acknowledge(Goedel.Protocol.Service.PacketConnection,System.UInt32)">
            <summary>
             Queue acknowledgement request.
            </summary>
            <param name="connectionId">The connection identifier.</param>
            <param name="packetId">The packet being acknowledged.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.OutboundData.OpenStream(Goedel.Protocol.Service.PacketConnection,Goedel.Protocol.Service.PacketStream)">
            <summary>
            Queue stream creation request.
            </summary>
            <param name="connectionId">The connection identifier.</param>
            <param name="streamId">The stream identifier.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.OutboundData.Post(Goedel.Protocol.Service.PacketConnection,Goedel.Protocol.Service.PacketStream,System.Byte[])">
            <summary>
            Queue data post request.
            </summary>
            <param name="connectionId">The connection identifier.</param>
            <param name="streamId">The stream identifier.</param>
            <param name="data">The data to post.</param>
        </member>
        <member name="T:Goedel.Protocol.Service.OutboundItem">
            <summary>
            Base type for outbound data tasks.
            </summary>
        </member>
        <member name="M:Goedel.Protocol.Service.OutboundItem.#ctor">
            <summary>
            Base type for outbound data tasks.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.OutboundItem.ConnectionId">
            <summary>The connection identifier.</summary> 
        </member>
        <member name="T:Goedel.Protocol.Service.OutboundItemConnection">
            <summary>
            Queue connection request.
            </summary>
        </member>
        <member name="T:Goedel.Protocol.Service.OutboundItemAcknowledge">
            <summary>
            Queue acknowledgement request.
            </summary>
        </member>
        <member name="F:Goedel.Protocol.Service.OutboundItemAcknowledge.PacketId">
            <summary>The packet being acknowledged modulo the packet identifier 
            field length.</summary> 
        </member>
        <member name="T:Goedel.Protocol.Service.OutboundItemStream">
            <summary>
            Queue stream creation request.
            </summary>
        </member>
        <member name="F:Goedel.Protocol.Service.OutboundItemStream.StreamId">
            <summary>The stream identifier.</summary> 
        </member>
        <member name="T:Goedel.Protocol.Service.OutboundItemPost">
            <summary>
            Queue data post request.
            </summary>
        </member>
        <member name="F:Goedel.Protocol.Service.OutboundItemPost.Data">
            <summary>The data to post.</summary> 
        </member>
        <member name="T:Goedel.Protocol.Service.PacketUDP">
            <summary>
            Base type for inbound and outbound packets.
            </summary>
        </member>
        <member name="F:Goedel.Protocol.Service.PacketUDP.ConnectionTokenLength">
            <summary>The connection token size (16 bytes)</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.PacketUDP.OffsetSalt">
            <summary>Byte offset for the salt field (2 bytes)</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.PacketUDP.SaltLength">
            <summary>The salt length, currently fixed at 2 bytes but could be expanded
            or variable. Since the IV is the connection ID plus the salt, and
            since we are using a mode that does not collapse on nonce reuse such as OCB,
            this is more than sufficient.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.PacketUDP.OffsetSerial">
            <summary>Byte offset for the truncated serial field (2 bytes)</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.PacketUDP.SerialLength">
            <summary>The serial number precision. This is currently 2 bytes allowing for
            32767 simultaneous packets in flight without ambiguity.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.PacketUDP.OffsetExpecting">
            <summary>Byte offset for the expecting field (2 bytes)</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.PacketUDP.OffsetAcknowledge">
            <summary>Byte offset for the acknowledgements field (2 bytes)</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.PacketUDP.AcknowledgeLength">
            <summary>The acknowledgement field length. This does not need to extend
            to the entire window. In the case that the </summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.PacketUDP.StartPayload">
            <summary>Byte offset for the reserved field (2 bytes)</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.PacketUDP.Plaintext">
            <summary>The packet plaintext data. This is retained even for an 
            an outbound packet in case the packet needs to be resent.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.PacketUDP.Integer1">
            <summary>Tag indicating a 1 byte integer encoding.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.PacketUDP.Integer2">
            <summary>Tag indicating a 2 byte integer encoding.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.PacketUDP.Integer4">
            <summary>Tag indicating a 4 byte integer encoding.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.PacketUDP.Integer8">
            <summary>Tag indicating a 8 byte integer encoding.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.PacketUDP.IntegerMask">
            <summary>Tag indicating a 8 byte integer encoding.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.PacketUDP.IntegerFirst">
            <summary>Tag indicating a 8 byte integer encoding.</summary> 
        </member>
        <member name="T:Goedel.Protocol.Service.ConnectionState">
            <summary>
            Connection states
            </summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ConnectionState.Connected">
            <summary>The connection hasw been established.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.ConnectionState.OutboundInitial">
            <summary>The connection identifier has been reserved but
            contact has not yet been made.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.ConnectionState.OutboundSent">
            <summary>The initial connection request has been sent.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.ConnectionState.InboundReceived">
            <summary>A connection request has been received.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.ConnectionState.Invalid">
            <summary>A connection request with an invalid connection identifier 
            was received.</summary> 
        </member>
        <member name="T:Goedel.Protocol.Service.PacketConnection">
            <summary>
            Record representing and processing stream identifiers.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.PacketConnection.InitialEndpoint">
            <summary>The first IP endpoint to which a connection request is issued or
            from which a request was received.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.PacketConnection.ConnectionState">
            <summary>The connection state.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.PacketConnection.ConnectionID">
            <summary>The connection identifier.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.PacketConnection.StreamIdGenerator">
            <summary>Stream identifier generator, returns a unique serial number each time
            it is called.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.PacketConnection.UdpSocket">
            <summary>The parent socket.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.PacketConnection.DictionaryStream">
            <summary>Maps from the stream identifier assigned by the local end of the connection
            to the stream handle.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.PacketConnection.PacketLengthBytes">
            <summary>Packet length in bytes for the connection.</summary> 
        </member>
        <member name="M:Goedel.Protocol.Service.PacketConnection.#ctor(Goedel.Protocol.Service.UdpSocket,Goedel.Protocol.Service.ConnectionId,System.Boolean)">
            <summary>
            Constructor returning a stream identifier for the endpoint <paramref name="connectionID"/>.
            </summary>
            <param name="connectionID">The connection identifier.</param>
            <param name="initiator">If true, the connection was created locally and will have an 
            even stream ID. Otherwise, the streamID will be false.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.PacketConnection.BeginPending(System.Int32)">
            <summary>
            Return a new container for preparing a set of pending items.
            </summary>
            <param name="priority">The priority to assign to the list. Higher values
            have higher priority.</param>
            <returns>Pending items container.</returns>
        </member>
        <member name="M:Goedel.Protocol.Service.PacketConnection.CommitAsync(System.Collections.Generic.List{Goedel.Protocol.Service.PendingItem})">
            <summary>
            Thread safe commit of a series of work items specified in
            <paramref name="pendingItems"/>.
            </summary>
            <param name="pendingItems">The work items to add.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.PacketConnection.CommitAsync(Goedel.Protocol.Service.PendingItem)">
            <summary>
            Thread safe commit of a work item specified in <paramref name="item"/>.
            </summary>
            <param name="item">The work item to add.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.PacketConnection.CommitAsync">
            <summary>
            Asynchronously queue this connection as an outbound work item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Goedel.Protocol.Service.PacketConnection.QueueOutbound">
            <summary>
            
            </summary>
            <remarks>This routine is NOT thread safe as it is only to be called by the 
            sender task that services the connection.</remarks>
            <returns></returns>
        </member>
        <member name="M:Goedel.Protocol.Service.PacketConnection.ServiceRequest(System.String,System.Byte[])">
            <summary>
            Post the request data <paramref name="message"/> to the service 
            <paramref name="serviceId"/> and return the response asynchronously.
            </summary>
            <param name="serviceId"></param>
            <param name="message"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Goedel.Protocol.Service.PacketConnection.GetStreamAsync">
            <summary>
            Wait asynchronously for an inbound request to create a stream and return a 
            <see cref="T:Goedel.Protocol.Service.PacketStream"/> handle for the stream created.
            </summary>
            <returns>The next stream request received.</returns>
        </member>
        <member name="M:Goedel.Protocol.Service.PacketConnection.ProcessInitial(Goedel.Protocol.Service.PacketInbound)">
            <summary>
            Process the packet <paramref name="inboundPacket"/> as connection creation
            request packet.
            </summary>
            <param name="inboundPacket">The packet to process.</param>
        </member>
        <member name="T:Goedel.Protocol.Service.PacketInbound">
            <summary>
            Inbound packet record.Containst parse methods.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.PacketInbound.UdpReceiveResult">
            <summary>The received data.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.PacketInbound.ConnectionId">
            <summary>The stream identifier assigned by the receiver endpoint.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.PacketInbound.PlaintextPrefix">
            <summary>The first block of the inbound packet decrypted under the common key.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.PacketInbound.Serial">
            <summary>The truncated serial number.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.PacketInbound.Expecting">
            <summary>The truncated expected serial number.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.PacketInbound.Acknowledge">
            <summary>The acknowledgement field.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.PacketInbound.Received">
            <summary>The time at which the packet was received.</summary> 
        </member>
        <member name="M:Goedel.Protocol.Service.PacketInbound.#ctor(System.Net.Sockets.UdpReceiveResult,System.Security.Cryptography.ICryptoTransform)">
            <summary>
            Constructor, returns an instance using data extracted from <paramref name="udpReceiveResult"/>
            with the <see cref="P:Goedel.Protocol.Service.PacketInbound.PlaintextPrefix"/> and <see cref="P:Goedel.Protocol.Service.PacketInbound.ConnectionId"/> properties initialized 
            from values extracted from the first encryption block, decrypted using 
            <paramref name="decryptor"/>.
            </summary>
            <param name="udpReceiveResult">The UDP packet received.</param>
            <param name="decryptor">The block decryptor.</param>
        </member>
        <member name="T:Goedel.Protocol.Service.MessageData">
            <summary>
            Message data response record. Introducing this structure allows handling of 
            chunked streams and a means of eventually substituting in the ability to
            return a reader over the raw packet data so as to avoid repeated copying.
            </summary>
        </member>
        <member name="F:Goedel.Protocol.Service.MessageData.Data">
            <summary>The message data.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.MessageData.IsChunked">
            <summary>If true, this is one of a series of chunks.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.MessageData.IsLast">
            <summary>If true, this is the last chunk (always true for non chunked data).</summary> 
        </member>
        <member name="T:Goedel.Protocol.Service.PacketOutbound">
            <summary>
            Outbound packet record.Containst write methods.
            </summary>
        </member>
        <member name="M:Goedel.Protocol.Service.PacketOutbound.#ctor(System.Int32)">
            <summary>
            Initialize a new outbound packet.
            </summary>
            <param name="length">The packet length in bytes.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.PacketOutbound.OpenStream(Goedel.Protocol.Service.PendingStream)">
            <summary>
            Attempt to write an open stream request to the packet, returning 
            false if there is insufficient space.
            </summary>
            <param name="streamId">The stream to write to.</param>
            <param name="streamName">The stream label.</param>
            <returns>True if the action succeeded.</returns>
        </member>
        <member name="M:Goedel.Protocol.Service.PacketOutbound.PostData(Goedel.Protocol.Service.PendingPost)">
            <summary>
            Attempt to post <paramref name="length"/> bytes from <paramref name="data"/> 
            starting at byte <paramref name="start"/> and return the number of bytes
            written.
            </summary>
            <param name="pendingPost">Contains the data to post.</param>
            <returns>The number of bytes written. If zero, no bytes were written.</returns>
        </member>
        <member name="T:Goedel.Protocol.Service.Pending">
            <summary>
            Manage a list of pending requests to a connection.
            </summary>
            <param name="PacketConnection">The connection the requests are to be queued to.</param>
            <param name="Priority">The priority of the request set, higher values 
            indicate higher priority.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.Pending.#ctor(Goedel.Protocol.Service.PacketConnection,System.Int32)">
            <summary>
            Manage a list of pending requests to a connection.
            </summary>
            <param name="PacketConnection">The connection the requests are to be queued to.</param>
            <param name="Priority">The priority of the request set, higher values 
            indicate higher priority.</param>
        </member>
        <member name="P:Goedel.Protocol.Service.Pending.PacketConnection">
            <summary>The connection the requests are to be queued to.</summary>
        </member>
        <member name="P:Goedel.Protocol.Service.Pending.Priority">
            <summary>The priority of the request set, higher values 
            indicate higher priority.</summary>
        </member>
        <member name="P:Goedel.Protocol.Service.Pending.PendingItems">
            <summary>List of pending items.</summary> 
        </member>
        <member name="M:Goedel.Protocol.Service.Pending.OpenOutboundStreamPending(System.String)">
            <summary>
            Assign a ne stream identifier and queue a request to use that identifier.
            </summary>
            <param name="serviceId">Optional </param>
            <returns></returns>
        </member>
        <member name="M:Goedel.Protocol.Service.Pending.Post(Goedel.Protocol.Service.PacketStream,System.Byte[])">
            <summary>
            Post the data packet <paramref name="data"/> to the stream
            <paramref name="stream"/>.
            </summary>
            <param name="stream">The stream to post to.</param>
            <param name="data">The data to post.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.Pending.CommitAsync">
            <summary>
            Commit the list of requests to the connection.
            </summary>
        </member>
        <member name="T:Goedel.Protocol.Service.PendingItem">
            <summary>
            Base record for pending outbound items.
            </summary>
        </member>
        <member name="T:Goedel.Protocol.Service.PendingEnd">
            <summary>
            Payload marking the end of the payload data section.
            </summary>
        </member>
        <member name="T:Goedel.Protocol.Service.PendingUnknown">
            <summary>
            Unknown / unsupported payload.
            </summary>
        </member>
        <member name="T:Goedel.Protocol.Service.PendingInvalidStream">
            <summary>
            Unknown / unsupported payload.
            </summary>
        </member>
        <member name="T:Goedel.Protocol.Service.PendingStream">
            <summary>
            Pending stream assignment request.
            </summary>
            <param name="StreamId">The stream identifier to assign.</param>
            <param name="PacketStream">The handle for the stream.</param>
            <param name="Label">The stream label, (must be less than 64 bytes)</param>
        </member>
        <member name="M:Goedel.Protocol.Service.PendingStream.#ctor(Goedel.Protocol.Service.StreamId,System.Byte[],Goedel.Protocol.Service.PacketStream)">
            <summary>
            Pending stream assignment request.
            </summary>
            <param name="StreamId">The stream identifier to assign.</param>
            <param name="PacketStream">The handle for the stream.</param>
            <param name="Label">The stream label, (must be less than 64 bytes)</param>
        </member>
        <member name="P:Goedel.Protocol.Service.PendingStream.StreamId">
            <summary>The stream identifier to assign.</summary>
        </member>
        <member name="P:Goedel.Protocol.Service.PendingStream.Label">
            <summary>The stream label, (must be less than 64 bytes)</summary>
        </member>
        <member name="P:Goedel.Protocol.Service.PendingStream.PacketStream">
            <summary>The handle for the stream.</summary>
        </member>
        <member name="T:Goedel.Protocol.Service.PendingPost">
            <summary>
            Pending data post assignment.
            </summary>
            <param name="PacketStream">The stream to post to.</param>
            <param name="Data">The data to post.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.PendingPost.#ctor(Goedel.Protocol.Service.PacketStream,System.Byte[])">
            <summary>
            Pending data post assignment.
            </summary>
            <param name="PacketStream">The stream to post to.</param>
            <param name="Data">The data to post.</param>
        </member>
        <member name="P:Goedel.Protocol.Service.PendingPost.PacketStream">
            <summary>The stream to post to.</summary>
        </member>
        <member name="P:Goedel.Protocol.Service.PendingPost.Data">
            <summary>The data to post.</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.PendingPost.Sent">
            <summary>The message index to send.</summary> 
        </member>
        <member name="T:Goedel.Protocol.Service.resource2">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.resource2.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.resource2.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.resource2.CommandNotSupported">
            <summary>
              Looks up a localized string similar to Command not supported.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.resource2.DeviceProfile">
            <summary>
              Looks up a localized string similar to Device Profile.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.resource2.EndListener">
            <summary>
              Looks up a localized string similar to Listener Stopped.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.resource2.EndService">
            <summary>
              Looks up a localized string similar to Service Stopped.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.resource2.EndTransaction">
            <summary>
              Looks up a localized string similar to Transaction End.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.resource2.Error">
            <summary>
              Looks up a localized string similar to Error.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.resource2.FailTransaction">
            <summary>
              Looks up a localized string similar to Transaction failed.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.resource2.Host">
            <summary>
              Looks up a localized string similar to Host.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.resource2.HostAddress">
            <summary>
              Looks up a localized string similar to Host Address.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.resource2.Path">
            <summary>
              Looks up a localized string similar to Path.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.resource2.Port">
            <summary>
              Looks up a localized string similar to Port.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.resource2.ServiceAddress">
            <summary>
              Looks up a localized string similar to Service Address.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.resource2.ServiceProfile">
            <summary>
              Looks up a localized string similar to Service Profile.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.resource2.StartListener">
            <summary>
              Looks up a localized string similar to Host Starting.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.resource2.StartService">
            <summary>
              Looks up a localized string similar to Listener Starting.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.resource2.StartTransaction">
            <summary>
              Looks up a localized string similar to Transaction Start.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.resource2.TransactionFail">
            <summary>
              Looks up a localized string similar to Fail.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.resource2.TransactionStart">
            <summary>
              Looks up a localized string similar to Start.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.resource2.TransactionSuccess">
            <summary>
              Looks up a localized string similar to Success.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.resource2.UnhandledException">
            <summary>
              Looks up a localized string similar to Unhandled Exception.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.resource2.UnknownCommand">
            <summary>
              Looks up a localized string similar to Unknown Command.
            </summary>
        </member>
        <member name="T:Goedel.Protocol.Service.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.Resources.CommandNotSupported">
            <summary>
              Looks up a localized string similar to Command not supported.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.Resources.DeviceProfile">
            <summary>
              Looks up a localized string similar to Device Profile.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.Resources.EndListener">
            <summary>
              Looks up a localized string similar to Listener Stopped.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.Resources.EndService">
            <summary>
              Looks up a localized string similar to Service Stopped.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.Resources.EndTransaction">
            <summary>
              Looks up a localized string similar to Transaction End.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.Resources.Error">
            <summary>
              Looks up a localized string similar to Error.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.Resources.FailTransaction">
            <summary>
              Looks up a localized string similar to Transaction failed.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.Resources.Host">
            <summary>
              Looks up a localized string similar to Host.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.Resources.HostAddress">
            <summary>
              Looks up a localized string similar to Host Address.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.Resources.Path">
            <summary>
              Looks up a localized string similar to Path.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.Resources.Port">
            <summary>
              Looks up a localized string similar to Port.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.Resources.ServiceAddress">
            <summary>
              Looks up a localized string similar to Service Address.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.Resources.ServiceProfile">
            <summary>
              Looks up a localized string similar to Service Profile.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.Resources.StartListener">
            <summary>
              Looks up a localized string similar to Host Starting.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.Resources.StartService">
            <summary>
              Looks up a localized string similar to Listener Starting.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.Resources.StartTransaction">
            <summary>
              Looks up a localized string similar to Transaction Start.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.Resources.TransactionFail">
            <summary>
              Looks up a localized string similar to Fail.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.Resources.TransactionStart">
            <summary>
              Looks up a localized string similar to Start.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.Resources.TransactionSuccess">
            <summary>
              Looks up a localized string similar to Success.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.Resources.UnhandledException">
            <summary>
              Looks up a localized string similar to Unhandled Exception.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.Resources.UnknownCommand">
            <summary>
              Looks up a localized string similar to Unknown Command.
            </summary>
        </member>
        <member name="T:Goedel.Protocol.Service.RudService">
            <summary>
            Service provider managing HTTP and UDP listeners.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.RudService.MaxDispatch">
            <summary>Maximum number of concurrent worker processes.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.RudService.Timeout">
            <summary>Timeout for action on a worker thread.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.RudService.Listener">
            <summary>The RDP Listener.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.RudService.Monitor">
            <summary>Service instrumentation.</summary> 
        </member>
        <member name="M:Goedel.Protocol.Service.RudService.Disposing">
            <summary>
            Disposal routine, perform clean termination of all active threads.
            </summary>
        </member>
        <member name="M:Goedel.Protocol.Service.RudService.#ctor(System.Collections.Generic.IEnumerable{Goedel.Protocol.IConfguredService},Goedel.Protocol.Service.HostMonitor,Goedel.Protocol.Presentation.ICredentialPrivate,Goedel.Protocol.Presentation.Listener,System.Int32)">
            <summary>
            Constructor returning an instance servicing the interfaces <paramref name="providers"/>.
            </summary>
            <param name="providers">The services to be served.</param>
            <param name="rdpListener">Specify the listener layer (default is <see cref="T:Goedel.Protocol.Presentation.RudListener"/>.</param>
            <param name="maxCores">Maximum number of dispatch threads.</param>
            <param name="credential">Credential for the listener to use.</param>
            <remarks>Constructor returns after the service has been started and listener threads 
            initialized.</remarks>
            <param name="hostMonitor">The host monitor service.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.RudService.GetProvider(System.String,System.Int32,System.String)">
            <summary>
            Return a provider.
            </summary>
            <param name="domain">Domain to which the provider is bound.</param>
            <param name="port">Port to which the provider is bound.</param>
            <param name="resource">Protocol serviced.</param>
            <returns>The provider.</returns>
        </member>
        <member name="M:Goedel.Protocol.Service.RudService.WaitServiceAsync">
            <summary>
            Begin servicing tasks.
            </summary>
            <returns>The listener task.</returns>
        </member>
        <member name="M:Goedel.Protocol.Service.RudService.NullTask">
            <summary>
            Null task, simply runs to completion. This is used to allow gracefull shutdown of the
            dispatch threads.
            </summary>
        </member>
        <member name="T:Goedel.Protocol.Service.ServiceConfiguration">
            <summary>
            Base class for service configurations.
            </summary>
        </member>
        <member name="M:Goedel.Protocol.Service.ServiceConfiguration.GetConfigurationEntry">
            <summary>Returns the configuration entry.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.ServiceConfiguration.DefaultHostConfiguration">
            <summary>The default</summary>
        </member>
        <member name="P:Goedel.Protocol.Service.ServiceConfiguration.ServiceUdf">
            <summary>The service profile fingerprint.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.ServiceConfiguration.ServicePath">
            <summary>Path to the service data</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.ServiceConfiguration.ServiceDNS">
            <summary>Service DNS addresses</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.ServiceConfiguration.Administrators">
            <summary>The set of administrators.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.ServiceConfiguration.HostPath">
            <summary>Path to the host data.</summary> 
        </member>
        <member name="T:Goedel.Protocol.Service.PayloadTag">
            <summary>Payload tags</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.PayloadTag.Unknown">
            <summary>Undefined type</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.PayloadTag.DataFull">
            <summary>Full message</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.PayloadTag.DataStart">
            <summary>Message start unchunked</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.PayloadTag.DataStartChunked">
            <summary>Message start chunked</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.PayloadTag.Data">
            <summary>Message data</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.PayloadTag.DataLast">
            <summary>Complete data send</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.PayloadTag.DataAbort">
            <summary>Abort data send</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.PayloadTag.StreamOpen">
            <summary>Open stream</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.PayloadTag.StreamClose">
            <summary>Close stream</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.PayloadTag.StreamConfigure">
            <summary>Configure stream</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.PayloadTag.ConnectionOpen">
            <summary>Open connection</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.PayloadTag.ConnectionClose">
            <summary>Close connection</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.PayloadTag.ConnectionConfigure">
            <summary>Configure connection</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.PayloadTag.ConnectionTokensIssue">
            <summary>Issue tokens</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.PayloadTag.ConnectionTokensRequest">
            <summary>Request additional tokens</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.PayloadTag.EndpointOpen">
            <summary>Open additional endpoint</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.PayloadTag.EndpointClose">
            <summary>Close endpoint</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.PayloadTag.EndpointConfigure">
            <summary>Configure endpoint</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.PayloadTag.EndpointMeasure">
            <summary>Measure endpoint</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.PayloadTag.EndOfPayload">
            <summary>End of packet payload.</summary>
        </member>
        <member name="T:Goedel.Protocol.Service.ServiceConstants">
            <summary>
            Constants specified in hallambaker-mesh-rud
            </summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagDataFullTag">
            <summary>Jose enumeration tag for PayloadTag.DataFull</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagDataFullTitle">
            <summary>Description for PayloadTag.DataFull</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagDataStartTag">
            <summary>Jose enumeration tag for PayloadTag.DataStart</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagDataStartTitle">
            <summary>Description for PayloadTag.DataStart</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagDataStartChunkedTag">
            <summary>Jose enumeration tag for PayloadTag.DataStartChunked</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagDataStartChunkedTitle">
            <summary>Description for PayloadTag.DataStartChunked</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagDataTag">
            <summary>Jose enumeration tag for PayloadTag.Data</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagDataTitle">
            <summary>Description for PayloadTag.Data</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagDataLastTag">
            <summary>Jose enumeration tag for PayloadTag.DataLast</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagDataLastTitle">
            <summary>Description for PayloadTag.DataLast</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagDataAbortTag">
            <summary>Jose enumeration tag for PayloadTag.DataAbort</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagDataAbortTitle">
            <summary>Description for PayloadTag.DataAbort</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagStreamOpenTag">
            <summary>Jose enumeration tag for PayloadTag.StreamOpen</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagStreamOpenTitle">
            <summary>Description for PayloadTag.StreamOpen</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagStreamCloseTag">
            <summary>Jose enumeration tag for PayloadTag.StreamClose</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagStreamCloseTitle">
            <summary>Description for PayloadTag.StreamClose</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagStreamConfigureTag">
            <summary>Jose enumeration tag for PayloadTag.StreamConfigure</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagStreamConfigureTitle">
            <summary>Description for PayloadTag.StreamConfigure</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagConnectionOpenTag">
            <summary>Jose enumeration tag for PayloadTag.ConnectionOpen</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagConnectionOpenTitle">
            <summary>Description for PayloadTag.ConnectionOpen</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagConnectionCloseTag">
            <summary>Jose enumeration tag for PayloadTag.ConnectionClose</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagConnectionCloseTitle">
            <summary>Description for PayloadTag.ConnectionClose</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagConnectionConfigureTag">
            <summary>Jose enumeration tag for PayloadTag.ConnectionConfigure</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagConnectionConfigureTitle">
            <summary>Description for PayloadTag.ConnectionConfigure</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagConnectionTokensIssueTag">
            <summary>Jose enumeration tag for PayloadTag.ConnectionTokensIssue</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagConnectionTokensIssueTitle">
            <summary>Description for PayloadTag.ConnectionTokensIssue</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagConnectionTokensRequestTag">
            <summary>Jose enumeration tag for PayloadTag.ConnectionTokensRequest</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagConnectionTokensRequestTitle">
            <summary>Description for PayloadTag.ConnectionTokensRequest</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagEndpointOpenTag">
            <summary>Jose enumeration tag for PayloadTag.EndpointOpen</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagEndpointOpenTitle">
            <summary>Description for PayloadTag.EndpointOpen</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagEndpointCloseTag">
            <summary>Jose enumeration tag for PayloadTag.EndpointClose</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagEndpointCloseTitle">
            <summary>Description for PayloadTag.EndpointClose</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagEndpointConfigureTag">
            <summary>Jose enumeration tag for PayloadTag.EndpointConfigure</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagEndpointConfigureTitle">
            <summary>Description for PayloadTag.EndpointConfigure</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagEndpointMeasureTag">
            <summary>Jose enumeration tag for PayloadTag.EndpointMeasure</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagEndpointMeasureTitle">
            <summary>Description for PayloadTag.EndpointMeasure</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagEndOfPayloadTag">
            <summary>Jose enumeration tag for PayloadTag.EndOfPayload</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceConstants.PayloadTagEndOfPayloadTitle">
            <summary>Description for PayloadTag.EndOfPayload</summary>
        </member>
        <member name="M:Goedel.Protocol.Service.ServiceConstants.ToPayloadTag(System.String)">
            <summary>
            Convert the string <paramref name="text"/> to the corresponding enumeration
            value.
            </summary>
            <param name="text">The string to convert.</param>
            <returns>The enumeration value.</returns>
        </member>
        <member name="M:Goedel.Protocol.Service.ServiceConstants.ToLabel(Goedel.Protocol.Service.PayloadTag)">
            <summary>
            Convert the enumerated value <paramref name="data"/> to the corresponding string
            value.
            </summary>
            <param name="data">The enumerated value.</param>
            <returns>The text value.</returns>
        </member>
        <member name="T:Goedel.Protocol.Service.RequestQuality">
            <summary>
            Describe the result of request source analysis.
            </summary>
        </member>
        <member name="F:Goedel.Protocol.Service.RequestQuality.OK">
            <summary>The request comes from an acceptable (non blocked source).</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.RequestQuality.Reason">
            <summary>The request is not acceptable respond giving (Reason TBS)</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.RequestQuality.Abort">
            <summary>The request is not acceptable and should be ignored without response.</summary> 
        </member>
        <member name="T:Goedel.Protocol.Service.ServiceRequest">
            <summary>
            Base class for connection handlers
            </summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceRequest.MaxRequest">
            <summary>The maximum request size</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.ServiceRequest.ObjectEncoding">
            <summary>The object encoding to use.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.ServiceRequest.Resource">
            <summary>Specifies a resouce that is under contention, e.g. an account or the 
            account catalog. This allows requests for the same resource to be queued for
            dispatch after the blocking requests have completed.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceRequest.Slot">
            <summary></summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceRequest.Service">
            <summary></summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceRequest.Buffer">
            <summary>The buffer to receive the input request.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.ServiceRequest.Count">
            <summary>Number of bytes read into the input buffer.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.ServiceRequest.Refused">
            <summary>If true, the request was refused.</summary> 
        </member>
        <member name="M:Goedel.Protocol.Service.ServiceRequest.Complete">
            <summary>
            Process the connection, dispatch the request and return the result.
            </summary>
        </member>
        <member name="M:Goedel.Protocol.Service.ServiceRequest.AbuseCheckIpSource(System.Net.IPEndPoint)">
            <summary>
            Determine  quality of request received from <paramref name="iPEndPoint"/>
            </summary>
            <param name="iPEndPoint">The request origin.</param>
            <returns>The quality of the request.</returns>
        </member>
        <member name="M:Goedel.Protocol.Service.ServiceRequest.Abort(Goedel.Protocol.Service.RequestQuality)">
            <summary>
            Abort the connection.
            </summary>
            <param name="requestQuality"></param>
        </member>
        <member name="M:Goedel.Protocol.Service.ServiceRequest.ProcessBuffer">
            <summary>
            Process the buffer containing inbound data.
            </summary>
        </member>
        <member name="M:Goedel.Protocol.Service.ServiceRequest.ReturnResponse(System.Byte[])">
            <summary>
            Return a response containing the payload <paramref name="payload"/>
            </summary>
            <param name="payload">The payload data to return.</param>
        </member>
        <member name="T:Goedel.Protocol.Service.ServiceRequestHttp">
            <summary>
            Connection handler for HTTP request
            </summary>
        </member>
        <member name="M:Goedel.Protocol.Service.ServiceRequestHttp.#ctor(Goedel.Protocol.Service.RudService,System.Net.HttpListenerContext)">
            <summary>
            Constructor returning an instance to process the request 
            specified by <paramref name="listenerContext"/>.
            </summary>
            <param name="service">The service to process the request.</param>
            <param name="listenerContext">The HTTP request context.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.ServiceRequestHttp.Complete">
            <summary>
            Process the connection, dispatch the request and return the result.
            </summary>
        </member>
        <member name="M:Goedel.Protocol.Service.ServiceRequestHttp.ReturnResponse(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:Goedel.Protocol.Service.ServiceRequestHttp.Abort(Goedel.Protocol.Service.RequestQuality)">
            <inheritdoc/>
        </member>
        <member name="T:Goedel.Protocol.Service.ServiceRequestUdp">
            <summary>
            Connection handler for UDP request
            </summary>
        </member>
        <member name="M:Goedel.Protocol.Service.ServiceRequestUdp.#ctor(System.Net.Sockets.UdpReceiveResult)">
            <summary>
            Constructor, process the request contained in <paramref name="result"/>.
            </summary>
            <param name="result">The UDP receive result</param>
        </member>
        <member name="M:Goedel.Protocol.Service.ServiceRequestUdp.Complete">
            <summary>
            Process the connection, dispatch the request and return the result.
            </summary>
        </member>
        <member name="M:Goedel.Protocol.Service.ServiceRequestUdp.Abort(Goedel.Protocol.Service.RequestQuality)">
            <inheritdoc/>
        </member>
        <member name="M:Goedel.Protocol.Service.ServiceRequestUdp.ReturnResponse(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="T:Goedel.Protocol.Service.StreamId">
            <summary>
            Stream identifier.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.StreamId.Serial">
            <summary>The serial number.</summary> 
        </member>
        <member name="M:Goedel.Protocol.Service.StreamId.#ctor(System.UInt64)">
            <summary>
            Constrructor, returns an instance with serial number value 
            <paramref name="serial"/>.
            </summary>
            <param name="serial"></param>
        </member>
        <member name="T:Goedel.Protocol.Service.StreamIdGenerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Goedel.Protocol.Service.StreamIdGenerator.#ctor(System.Boolean)">
            <summary>
            Return a new generator for <see cref="T:Goedel.Protocol.Service.StreamId"/> instances. If the value
            <paramref name="initiator"/> is true, the stream identifier valuies will
            always be even. Otherwise, the stream identifier values will be odd. The 
            identifiers returned will always be greater than 0.
            </summary>
            <param name="initiator">If true, the stream identifiers generated will be
            for the connection initiator sid, i.e. even. Otherwise, the identifiers
            will be odd.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.StreamIdGenerator.GetNext">
            <summary>
            Return the next serial number and increment the generator value by 2.
            </summary>
            <returns>The stream identifier created.</returns>
        </member>
        <member name="T:Goedel.Protocol.Service.PacketStream">
            <summary>
            Handle for interaction with a particular stream within a connection.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.PacketStream.PacketConnection">
            <summary>The connection under which this stream is established.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.PacketStream.StreamId">
            <summary>The outbound stream, which is always assigned by the local end
            of the connection.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.PacketStream.Label">
            <summary>The stream label</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.PacketStream.MessageBuffer">
            <summary>The inbound message block. Consumers of the stream MAY obtain more
            detailed information on the inbound messages by consuming messages 
            directly from the buffer rather than as raw bytes returned by
            <see cref="M:Goedel.Protocol.Service.PacketStream.ReadBytesAsync"/>.</summary> 
        </member>
        <member name="M:Goedel.Protocol.Service.PacketStream.Post(System.Byte[])">
            <summary>
            Queue the data <paramref name="data"/> to be sent out on the stream.
            </summary>
            <param name="data">The data to send</param>
        </member>
        <member name="M:Goedel.Protocol.Service.PacketStream.ReadBytesAsync">
            <summary>
            Read bytes from the 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Goedel.Protocol.Service.HostUDP">
            <summary>
            UDP Host type.
            </summary>
        </member>
        <member name="T:Goedel.Protocol.Service.ConnectionUDP">
            <summary>
            UDP Connection type (obsolete?)
            </summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ConnectionUDP.CompletionInbound">
            <summary>This really goes in the stream</summary> 
        </member>
        <member name="M:Goedel.Protocol.Service.ConnectionUDP.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Goedel.Protocol.Service.FrameReceiverSocket">
            <summary>
            Frame receiver class handling messages sent to the socket itself.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.ServiceBinding.UdpService">
            <summary>The enclosing service.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.InboundStream.UdpService">
            <summary>The enclosing service.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.InboundStream.IPEndPoint">
            <summary>The IP Endpoint (Address, port).</summary> 
        </member>
        <member name="T:Goedel.Protocol.Service.UdpSocket">
            <summary>
            UDP socket capable of supporting both the client and service modes.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.UdpSocket.MaxUdpPortAttempts">
            <summary>Maximum number of tries to obtain a UDP port.</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.UdpSocket.DefaultListenerTasks">
            <summary>The default number of listener tasks.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.UdpSocket.MinimumWait">
            <summary>Minimum time to wait in ticks.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.UdpSocket.TotalReceiveTasks">
            <summary>The total number of UDP receive tasks.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.UdpSocket.IdleReceiveTasks">
            <summary>The number of receive tasks that were in an idle state.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.UdpSocket.IPEndPoint">
            <summary>The IP Endpoint (Address, port).</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.UdpSocket.InboundConnectionQueue">
            <summary>Dispatch queue for receipt of inbound connections.</summary> 
        </member>
        <member name="M:Goedel.Protocol.Service.UdpSocket.Disposing">
            <summary>
            Disposing method. Performs shutdown on the listener.
            </summary>
        </member>
        <member name="M:Goedel.Protocol.Service.UdpSocket.#ctor(System.Net.IPAddress,System.Int32,System.Byte[])">
            <summary>
            Return a UDP listener socket bound to a randomly chosen port. If 
            <paramref name="address"/> is not null, the listener is bound to that address,
            otherwise the listener is bound to all inbound addresses.
            </summary>
            <param name="address">The inbound address.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.UdpSocket.GetNextConnection(System.Boolean)">
            <summary>
            Return the next connection handle. 
            </summary>
            <param name="initiator">If true, the connection was initiated locally, otherwise,
            the connection was initiated remotely.</param>
            <returns></returns>
        </member>
        <member name="M:Goedel.Protocol.Service.UdpSocket.WaitListenerAsync">
            <summary>
            Begin servicing tasks.
            </summary>
            <returns>The listener task.</returns>
        </member>
        <member name="M:Goedel.Protocol.Service.UdpSocket.GetPacketAsync">
            <summary>
            Await receipt of a packet, extract the stream ID and return the result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Goedel.Protocol.Service.UdpSocket.HandleUnknownStream(Goedel.Protocol.Service.PacketInbound)">
            <summary>
            Handle an inbound request with an unknown stream ID.
            </summary>
            <param name="inboundPacket"></param>
        </member>
        <member name="M:Goedel.Protocol.Service.UdpSocket.WaitSenderAsync">
            <summary>
            The sender dispatch loop
            </summary>
            <returns>Task handle.</returns>
        </member>
        <member name="M:Goedel.Protocol.Service.UdpSocket.ReserveConnection(System.Net.IPEndPoint)">
            <summary>
            Create an outbound connection request for the 
            </summary>
            <param name="ipEndPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Goedel.Protocol.Service.UdpSocket.GetConnectionAsync">
            <summary>
            Wait asynchronously for an inbound connection request.
            </summary>
            <returns>The first request received if requests are pending, otherwise,
            waits asynchronously for the next request.</returns>
        </member>
        <member name="M:Goedel.Protocol.Service.UdpSocket.GetServiceAsync(System.String,System.String,System.Nullable{System.Int32},Goedel.Discovery.DNSFallback)">
            <summary>
            Resolve a DNS name to an address and service characteristics.
            </summary>
            <param name="address">The address to use</param>
            <param name="service">The DNS service prefix</param>
            <param name="port">The default DNS port number</param>
            <param name="fallback">The fallback mode to use if SRV lookup fails</param>
            <returns>IP Destination describing the resolution results</returns>
        </member>
    </members>
</doc>
