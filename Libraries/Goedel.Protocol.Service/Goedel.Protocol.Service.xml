<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Goedel.Protocol.Service</name>
    </assembly>
    <members>
        <member name="T:Goedel.Protocol.Service.ServerNotSupported">
            <summary>
            This platform does not support HTTP service
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.ServerNotSupported.ExceptionFormatDelegate">
            <summary>The exception formatting delegate. May be overriden 
            locally or globally to implement different exception formatting.</summary>
        </member>
        <member name="F:Goedel.Protocol.Service.ServerNotSupported.Templates">
            <summary>Templates for formatting response messages.</summary>
        </member>
        <member name="M:Goedel.Protocol.Service.ServerNotSupported.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Construct instance for exception
            </summary>		
            <param name="description">Description of the error, may be used to override the 
            generated message.</param>	
            <param name="inner">Inner Exception</param>	
            <param name="args">Optional list of parameterized arguments.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.ServerNotSupported._Throw(System.Object)">
            <summary>
            The public fatory delegate
            </summary>
            public static global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;
        </member>
        <member name="F:Goedel.Protocol.Service.ServerNotSupported.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.IMonitorProvider.Monitor">
            <summary>The monitor class to be exposed.</summary> 
        </member>
        <member name="T:Goedel.Protocol.Service.Monitor">
            <summary>
            Service monitoring class.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.Monitor.Total">
            <summary>Total result since the Monitor was last restarted.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.Monitor.Recent">
            <summary>Total results in the most recent sample interval.</summary> 
        </member>
        <member name="M:Goedel.Protocol.Service.Monitor.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor returning a monitor instance for <paramref name="listeners"/>
            listeners and <paramref name="dispatchers"/> dispatchers.
            </summary>
            <param name="listeners">The number of listener threads.</param>
            <param name="dispatchers">The number of dispatcher threads.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.Monitor.StartBusy">
            <summary>
            Mark the start of period when the service is blocked because no dispatcher threads are available.
            </summary>
        </member>
        <member name="M:Goedel.Protocol.Service.Monitor.EndBusy">
            <summary>
            Mark the end of period when the service is blocked because no dispatcher threads are available.
            </summary>
        </member>
        <member name="M:Goedel.Protocol.Service.Monitor.StartDispatch(System.Int32)">
            <summary>
            Mark the start of dispatch on thread <paramref name="dispatch"/>
            </summary>
            <param name="dispatch">Index of the thread that was started.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.Monitor.EndDispatch(System.Int32)">
            <summary>
            Mark the end of dispatch on thread <paramref name="dispatch"/>
            </summary>
            <param name="dispatch">Index of the thread that was ended.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.Monitor.MarkRecent">
            <summary>
            Mark the end of the 'Recent' period.
            </summary>
        </member>
        <member name="M:Goedel.Protocol.Service.Monitor.GetStats">
            <summary>
            Return a snapshot of the server status for the total time since the 
            collection period began and for the most recent collection interval.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Goedel.Protocol.Service.MonitorResult">
            <summary>
            Class containing a set of monitor results.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.MonitorResult.TimeBegin">
            <summary>The time at which the result interval began</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.MonitorResult.TimeEnd">
            <summary>The time at which the next result interval began</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.MonitorResult.TimeElapsed">
            <summary>The elapsed time.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.MonitorResult.ListenerRequests">
            <summary>Number of listener events received</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.MonitorResult.DispatcherRequests">
            <summary>Number of dispatcher requests started.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.MonitorResult.DispatcherBusy">
            <summary>Time the dispatcher thread was busy in milliseconds</summary> 
        </member>
        <member name="F:Goedel.Protocol.Service.MonitorResult.Busy">
            <summary>Time all threads were busy.</summary> 
        </member>
        <member name="M:Goedel.Protocol.Service.MonitorResult.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor creating a new result for <paramref name="listeners"/> and
            <paramref name="dispatchers"/> dispatchers.
            </summary>
            <param name="listeners">The number of listener threads.</param>
            <param name="dispatchers">The number of dispatcher threads.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.MonitorResult.Add(Goedel.Protocol.Service.MonitorResult)">
            <summary>
            Add the continguous result <paramref name="value"/> to the current result.
            </summary>
            <param name="value">The contiguous result data.</param>
        </member>
        <member name="M:Goedel.Protocol.Service.MonitorResult.CopyClear">
            <summary>
            Create a copy of the current monitor result, clear the current values and return
            the copy. This is performed 
            </summary>
            <returns>The copy of the original values.</returns>
        </member>
        <member name="M:Goedel.Protocol.Service.MonitorResult.Copy">
            <summary>
            Create a copy of the current monitor result and return
            the copy. This is performed 
            </summary>
            <returns>The copy of the values.</returns>
        </member>
        <member name="T:Goedel.Protocol.Service.Provider">
            <summary>
            Service provider class.
            </summary>
        </member>
        <member name="P:Goedel.Protocol.Service.Provider.HTTPEndpoints">
            <summary>The HTTP endpoints.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.Provider.UdpEndpoints">
            <summary>The UDP endpoints</summary> 
        </member>
        <member name="M:Goedel.Protocol.Service.Provider.#ctor(System.Collections.Generic.List{Goedel.Protocol.Service.Endpoint},Goedel.Protocol.JpcInterface)">
            <summary>
            Constructor, returns an instance servicing the endpoints <paramref name="endpoints"/>
            </summary>
            <param name="endpoints">The endpoints to be serviced.</param>
        </member>
        <member name="P:Goedel.Protocol.Service.Service.MaxDispatch">
            <summary>Maximum number of concurrent worker processes.</summary> 
        </member>
        <member name="P:Goedel.Protocol.Service.Service.Timeout">
            <summary>Timeout for action on a worker thread.</summary> 
        </member>
        <member name="M:Goedel.Protocol.Service.Service.NullTask">
            <summary>
            Null task, simply runs to completion. This is used to allow gracefull shutdown of the
            dispatch threads.
            </summary>
        </member>
        <member name="T:Goedel.Protocol.Service.Connection">
            <summary>
            Base class for connection handlers
            </summary>
        </member>
        <member name="M:Goedel.Protocol.Service.Connection.Complete">
            <summary>
            Process the connection, dispatch the request and return the result.
            </summary>
        </member>
        <member name="T:Goedel.Protocol.Service.ConnectionHttp">
            <summary>
            Connection handler for HTTP request
            </summary>
        </member>
        <member name="M:Goedel.Protocol.Service.ConnectionHttp.Complete">
            <summary>
            Process the connection, dispatch the request and return the result.
            </summary>
        </member>
        <member name="T:Goedel.Protocol.Service.ConnectionUdp">
            <summary>
            Connection handler for UDP request
            </summary>
        </member>
        <member name="M:Goedel.Protocol.Service.ConnectionUdp.#ctor(System.Net.Sockets.UdpReceiveResult)">
            <summary>
            Constructor, process the request contained in <paramref name="buffer"/>.
            </summary>
            <param name="result">The UDP receive result</param>
        </member>
        <member name="M:Goedel.Protocol.Service.ConnectionUdp.Complete">
            <summary>
            Process the connection, dispatch the request and return the result.
            </summary>
        </member>
    </members>
</doc>
