using System;
/* Unmerged change from project 'Goedel.Utilities'
Before:
using System.Text;
using System.Threading.Tasks;
using System.Numerics;
After:
using System.Numerics;
using System.Text;
using System.Threading.Tasks;
*/


namespace Goedel.Utilities {

    /// <summary>
    /// Base class for all exceptions generated by Exceptional
    /// </summary>
    public abstract class GoedelException : Exception {
        /// <summary>
        /// Construct instance for exception "An internal error occurred"
        /// </summary>		
        public GoedelException() : base("An unknown error occurred") {
            }

        /// <summary>
        /// Construct instance for exception "An internal error occurred"
        /// </summary>		
        /// <param name="description">Description of the error</param>	
        public GoedelException(string description) : base(description) {
            }

        /// <summary>
        /// Construct instance for exception 		/// containing an inner exception.
        /// </summary>		
        /// <param name="description">Description of the error</param>	
        /// <param name="inner">Inner Exception</param>	
        public GoedelException(string description=null, Exception inner =null) :
                base(description, inner) {
            }

        ///<summary>The message template in the current locale.</summary>
        public static  string MessageTemplate { get; }


        /// <summary>
        /// User data associated with the exception.
        /// </summary>	
        public object UserData;

        /// <summary>
        /// User data associated with the exception.
        /// </summary>	
        public object[] UserDataNew;

        /// <summary>
        /// Formatted error return.
        /// </summary>
        /// <param name="reasons">Exception parameter data.</param>
        /// <returns>The formated exception description.</returns>
        public virtual string Format(params object[] reasons) => "Formatted reasons...";

        }


    /// <summary>
    /// Delegate that will be thrown as an exception if a condition is met
    /// </summary>
    /// <param name="Reason">The reason for raising the exception.</param>
    /// <returns>The exception to throw</returns>
    public delegate System.Exception ThrowDelegate(object Reason = null);

    /// <summary>
    /// Delegate that will be thrown as an exception if a condition is met
    /// </summary>
    /// <param name="Reasons">The reasons for raising the exception.</param>
    /// <returns>The exception to throw</returns>
    public delegate System.Exception ThrowNewDelegate(object[] Reasons = null);


    /// <summary>
    /// Convenience class for constructing an object on the fly to report exception
    /// parameters of type integer or string.
    /// </summary>
    public class ExceptionData {
        /// <summary>An integer value;</summary>
        public int Int { get; set; }

        /// <summary>A string value</summary>
        public string String { get; set; }

        /// <summary>
        /// Factory method to create and return object with specified integer
        /// and/or string values.
        /// </summary>
        /// <param name="Int">The integer value</param>
        /// <param name="String">The string value</param>
        /// <returns>The boxed exception data.</returns>
        public static ExceptionData Box(int Int = 0, string String = "") => new ExceptionData() {
            Int = Int,
            String = String
            };
        }



    /// <summary>
    /// Convenience routines to test various types of assertion and throw
    /// an exception using an exception factory method such as the ones
    /// created by Exceptional.
    /// </summary>
    public static class Assert {


        /// <summary>
        /// Provides a means of optionally expiring a value specified by <paramref name="value"/>.
        /// If <paramref name="expiry"/> is not null and specifies a time value that is strictly 
        /// less than the value of <see cref="DateTime.Now"/>, the value null is returned. Otherwise
        /// the value <paramref name="value"/> is returned.
        /// </summary>
        /// <typeparam name="T">The type to return and of <paramref name="value"/>.</typeparam>
        /// <param name="expiry">The expiry time.</param>
        /// <param name="value">The value to return if not expired.</param>
        /// <returns>
        /// The value <paramref name="value"/> unless the parameter <paramref name="expiry"/>
        /// is not null and is strictly less than the current time in which case the value 
        /// <code>null</code> is returned. 
        ///</returns>
        public static T Expired<T>(this DateTime? expiry, T value) {
            if (expiry == null) {
                return value;
                }
            if (DateTime.Now < expiry) {
                return value;
                }
            return default;
            }


        /// <summary>
        /// Cache and return a value. This is used to produce compact expression
        /// body methods for properties that are only evaluated the first time
        /// they are called.
        /// </summary>
        /// <typeparam name="T">The type of data to be cached.</typeparam>
        /// <param name="Value">The value to be stored.</param>
        /// <param name="Store">The store that the value is to be written to.</param>
        /// <returns>The stored value.</returns>
        public static T CacheValue<T>(this T Value, out T Store) where T : class {
            Store = Value;
            return Value;
            }


        /// <summary>Throw an exception if the specified condition is true. 
        ///Assert.False (test, NYIException.Throw, "test was true")
        /// </summary>
        /// <param name="Throw">Delegate that creates the exception to be thrown if
        /// Condition is true</param>
        /// <param name="Reason">Reason data for filling throw template</param>
        /// <param name="Int">Integer default parameter</param>
        /// <param name="String">String default parameter</param>
        public static void Fail(ThrowDelegate Throw = null,
                    object Reason = null, string String = null, int Int = -1) {

            Reason ??= new ExceptionData() {
                String = String,
                Int = Int
                };
            Throw ??= Utilities.AssertionFail.Throw;
            throw Throw(Reason);
            }


        /// <summary>Throw a Not Yet Implemented exception.
        /// </summary>
        /// <param name="Reason">Reason data for filling throw template</param>
        /// <param name="Int">Integer default parameter</param>
        /// <param name="String">String default parameter</param>
        public static void NYI(object Reason = null, string String = null, int Int = -1) => Fail(Utilities.NYI.Throw, Reason, String, Int);

        /// <summary>Throw an exception if the specified condition is true. 
        ///Assert.False (test, NYIException.Throw, "test was true")
        /// </summary>
        /// <param name="Condition">The condition</param>
        /// <param name="Throw">Delegate that creates the exception to be thrown if
        /// Condition is true</param>
        /// <param name="Reason">Reason data for filling throw template</param>
        /// <param name="Int">Integer default parameter</param>
        /// <param name="String">String default parameter</param>
        public static void False(bool Condition, ThrowDelegate Throw = null,
                    object Reason = null, string String = null, int Int = -1) {
            if (Condition) {
                Fail(Throw, Reason, String, Int);
                }
            }

        /// <summary>Throw an exception if the specified condition is true. 
        ///(test, NYIException.Throw, "test was true").AssertFalse();
        /// </summary>
        /// <param name="Condition">The condition</param>
        /// <param name="Throw">Delegate that creates the exception to be thrown if
        /// Condition is true</param>
        /// <param name="Reason">Reason data for filling throw template</param>
        /// <param name="Int">Integer default parameter</param>
        /// <param name="String">String default parameter</param>
        public static void AssertFalse(this bool Condition, ThrowDelegate Throw = null,
            object Reason = null, string String = null, int Int = -1) => False(
                Condition, Throw, Reason, String, Int);

        /// <summary>Throw an exception if the specified condition is false. 
        ///Assert.True (test, NYIException.Throw, "test was false")
        /// </summary>
        /// <param name="Condition">The condition</param>
        /// <param name="Throw">Delegate that creates the exception to be thrown if
        /// Condition is true</param>
        /// <param name="Reason">Reason data for filling throw template</param>
        /// <param name="Int">Integer default parameter</param>
        /// <param name="String">String default parameter</param>
        public static void True(bool Condition, ThrowDelegate Throw = null,
                    object Reason = null, string String = null, int Int = -1) {
            if (!Condition) {
                Fail(Throw, Reason, String, Int);
                }
            }

        /// <summary>Throw an exception if the specified condition is false. 
        /// (test, NYIException.Throw, "test was false").AssertTrue();
        /// </summary>
        /// <param name="Condition">The condition</param>
        /// <param name="Throw">Delegate that creates the exception to be thrown if
        /// Condition is true</param>
        /// <param name="Reason">Reason data for filling throw template</param>
        /// <param name="Int">Integer default parameter</param>
        /// <param name="String">String default parameter</param>
        public static void AssertTrue(this bool Condition, ThrowDelegate Throw = null,
            object Reason = null, string String = null, int Int = -1) => True(
                Condition, Throw, Reason, String, Int);


        /// <summary>Throw an exception if the specified object is not null. 
        /// </summary>
        /// <param name="Object">The condition</param>
        /// <param name="Throw">Delegate that creates the exception to be thrown if
        /// Condition is true</param>
        /// <param name="Reason">Reason data for filling throw template</param>
        /// <param name="Int">Integer default parameter</param>
        /// <param name="String">String default parameter</param>
        public static void Null(object Object, ThrowDelegate Throw = null,
                    object Reason = null, string String = null, int Int = -1) => True(Object == null, Throw, Reason, String, Int);

        /// <summary>Throw an exception if the specified object is not null. 
        /// </summary>
        /// <param name="Object">The condition</param>
        /// <param name="Throw">Delegate that creates the exception to be thrown if
        /// Condition is true</param>
        /// <param name="Reason">Reason data for filling throw template</param>
        /// <param name="Int">Integer default parameter</param>
        /// <param name="String">String default parameter</param>
        public static void AssertNull(this object Object, ThrowDelegate Throw = null,
                    object Reason = null, string String = null, int Int = -1) => True(Object == null, Throw, Reason, String, Int);



        /// <summary>Throw an exception if the specified object is not null. 
        /// </summary>
        /// <param name="Object">The condition</param>
        /// <param name="Throw">Delegate that creates the exception to be thrown if
        /// Condition is true</param>
        /// <param name="Reason">Reason data for filling throw template</param>
        /// <param name="Int">Integer default parameter</param>
        /// <param name="String">String default parameter</param>
        public static void NotNull(this object Object, ThrowDelegate Throw = null,
                    object Reason = null, string String = null, int Int = -1) => True(Object != null, Throw, Reason, String, Int);


        /// <summary>Throw an exception if the specified object is not null. 
        /// </summary>
        /// <param name="Object">The condition</param>
        /// <param name="Throw">Delegate that creates the exception to be thrown if
        /// Condition is true</param>
        /// <param name="Reason">Reason data for filling throw template</param>
        /// <param name="Int">Integer default parameter</param>
        /// <param name="String">String default parameter</param>
        public static void AssertNotNull(this object Object, ThrowDelegate Throw = null,
                    object Reason = null, string String = null, int Int = -1) => True(Object != null, Throw, Reason, String, Int);


        /// <summary>Test to see if two arrays are equal.
        /// </summary>
        /// <param name="Test1">First test value</param>
        /// <param name="Test2">Second test value</param>
        /// <param name="Throw">Delegate that creates the exception to be thrown if
        /// Condition is true</param>
        /// <param name="Reason">Reason data for filling throw template</param>
        /// <param name="Int">Integer default parameter</param>
        /// <param name="String">String default parameter</param>

        public static void AssertEqual(this byte[] Test1, byte[] Test2, ThrowDelegate Throw = null,
                    object Reason = null, string String = null, int Int = -1) => AssertTrue(
                        ArrayUtilities.IsEqualTo(Test1, Test2), Throw, Reason, String, Int);

        /// <summary>Test to see if two arrays are equal.
        /// </summary>
        /// <param name="Test1">First test value</param>
        /// <param name="Test2">Second test value</param>
        /// <param name="Throw">Delegate that creates the exception to be thrown if
        /// Condition is true</param>
        /// <param name="Reason">Reason data for filling throw template</param>
        /// <param name="Int">Integer default parameter</param>
        /// <param name="String">String default parameter</param>

        public static void AssertEqual<T>(this T Test1, T Test2, ThrowDelegate Throw = null,
                    object Reason = null, string String = null, int Int = -1) => AssertTrue(
                        Test1.Equals(Test2), Throw, Reason, String, Int);


        /// <summary>
        /// Utility routine used to flag missing code to implement missing
        /// cryptographic authentication check
        /// </summary>
        /// <param name="description"></param>
        public static void TaskValidate(this string description) => description.Keep();


        /// <summary>
        /// Utility routine used to flag possibly redundant code.
        /// </summary>
        /// <param name="description"></param>
        public static void TaskRedundant(this string description) => description.Keep();


        /// <summary>
        /// Utility routine used to flag missing code to implement missing test for
        /// functionality not yet implemented.
        /// </summary>
        /// <param name="description"></param>
        public static void TaskTest(this string description) => description.Keep();

        /// <summary>
        /// Utility routine used to flag missing code to implement missing test for
        /// functionality not yet implemented.
        /// </summary>
        /// <param name="description">Description of the missing functionality.</param>
        /// <param name="exception">If true, throw an exception.</param>
        public static void TaskFunctionality(this string description, bool exception = false) {
            if (exception) {
                throw new NYI();
                }
            Console.WriteLine($"***Functionality missing***{description}");
            }

        /// <summary>
        /// Utility routine used to flag missing code to implement missing test for
        /// functionality not yet implemented.
        /// </summary>
        /// <param name="description">Description of the missing test.</param>
        /// <param name="result">The result value to be returned.</param>
        /// <returns>The value <paramref name="result"/>.</returns>
        public static string Task(this string result, string description) {
            Console.WriteLine($"***Task***{description}");
            return result;
            }

        }

    }

