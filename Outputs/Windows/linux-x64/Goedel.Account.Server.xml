<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Goedel.Account.Server</name>
    </assembly>
    <members>
        <member name="T:Goedel.Account.Server.AccountLocalPortal">
            <summary>
            Abstract interface to a local service provider.
            </summary>
        </member>
        <member name="P:Goedel.Account.Server.AccountLocalPortal.ServiceName">
            <summary>The service name</summary>
        </member>
        <member name="F:Goedel.Account.Server.AccountLocalPortal.AccountServiceHost">
            <summary>
            The local PublicMeshServiceHost.
            </summary>
        </member>
        <member name="T:Goedel.Account.Server.AccountPortalDirect">
            <summary>
            Direct connection to service provider via API calls. 
            </summary>
        </member>
        <member name="M:Goedel.Account.Server.AccountPortalDirect.#ctor(System.String,System.String)">
            <summary>
            Create new portal using the default stores.
            </summary>
            <param name="ServiceName">The canonical service name</param>
            <param name="Store">The file to store the account data to</param>
        </member>
        <member name="M:Goedel.Account.Server.AccountPortalDirect.GetService(System.String,System.String)">
            <summary>
            Return a MeshService object for the named portal service.
            </summary>
            <param name="Account">The account to get.</param>
            <param name="Portal">The portal to get the service from.</param>
            <returns>The service instance</returns> 
        </member>
        <member name="T:Goedel.Account.Server.AccountPortalLocal">
            <summary>
            Direct connection to service provider via JSON encoding, decoding and dispatch.
            Useful for producing documentation and for testing.
            </summary>
        </member>
        <member name="M:Goedel.Account.Server.AccountPortalLocal.#ctor(System.String)">
            <summary>
            Create new portal using the default stores.
            </summary>
            <param name="ServiceName">The service name.</param>
        </member>
        <member name="M:Goedel.Account.Server.AccountPortalLocal.GetService(System.String,System.String)">
            <summary>
            Return a MeshService object for the named portal service.
            </summary>
            <param name="Account">The account to get.</param>
            <param name="Service">The service to get the service from.</param> 
            <returns>The service instance</returns>
        </member>
        <member name="T:Goedel.Account.Server.AccountStore">
            <summary>Base store for accounts (non persistent)</summary>
        </member>
        <member name="F:Goedel.Account.Server.AccountStore.DefaultStore">
            <summary>The default store file name</summary>
        </member>
        <member name="P:Goedel.Account.Server.AccountStore.Domain">
            <summary>
            The DNS name of this service.
            </summary>
        </member>
        <member name="M:Goedel.Account.Server.AccountStore.#ctor(System.String,System.String)">
            <summary>
            Construct a persistence store for the specified domain, with the
            specified store and portal stores.
            </summary>
            <param name="Domain">Domain name of the service</param>
            <param name="Store">store name for the account persistence store.</param>
        </member>
        <member name="M:Goedel.Account.Server.AccountStore.CheckAccount(System.String)">
            <summary>Test to see if an account name is available. Note that 
            a subsequence CreateAccount request can fail even if a previous call 
            to CheckAccount succeeded as the account name may have been issued in the 
            interim or may fail for other reasons.
            </summary>
            <param name="AccountId">The requested account name</param>
            <returns>True is the name is available, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Account.Server.AccountStore.CreateAccount(Goedel.Account.AccountData)">
            <summary>
            Create a new account record.
            </summary>
            <param name="AccountData">Account data to record.</param>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Account.Server.AccountStore.DeleteAccount(System.String)">
            <summary>
            Delete an account record.
            </summary>
            <param name="AccountId">Identifier of account to delete.</param>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Account.Server.AccountStore.GetAccount(System.String)">
            <summary>
            Get an account record.
            </summary>
            <param name="AccountId">Identifier of account to delete.</param>
            <returns>The account record or null if not found.</returns>
        </member>
        <member name="M:Goedel.Account.Server.AccountStore.UpdateAccount(Goedel.Account.AccountData)">
            <summary>
            Update an account record.
            </summary>
            <param name="AccountData">Account data to write.</param>
        </member>
        <member name="T:Goedel.Account.Server.AccountLocalServiceProvider">
            <summary>
            The host class. Receives a stream from the HTTP server caller and 
            dispatches the specified server.
            </summary>
        </member>
        <member name="F:Goedel.Account.Server.AccountLocalServiceProvider.AccountStore">
            <summary>The persistence store.</summary>
        </member>
        <member name="M:Goedel.Account.Server.AccountLocalServiceProvider.#ctor(System.String,System.String)">
            <summary>
            Initialize a Mesh Service Provider.
            </summary>
            <param name="Domain">The domain of the service provider.</param>
            <param name="Store">The  persistence store filename.</param>
        </member>
        <member name="T:Goedel.Account.Server.AccountServiceLocal">
            <summary>Account service using local provider.</summary>
        </member>
        <member name="P:Goedel.Account.Server.AccountServiceLocal.AccountStore">
            <summary>The persistence store.</summary>
        </member>
        <member name="M:Goedel.Account.Server.AccountServiceLocal.#ctor(Goedel.Account.Server.AccountLocalServiceProvider,Goedel.Protocol.JPCSession)">
            <summary>
            Main constructor.
            </summary>
            <param name="Host">The host name for the service/</param>
            <param name="Session">The JPC session.</param>
        </member>
        <member name="M:Goedel.Account.Server.AccountServiceLocal.Hello(Goedel.Protocol.HelloRequest)">
            <summary>
            Implements the transaction Hello.
            </summary>
            <param name="Request">The request object to send to the host.</param>
            <returns>The response object from the service</returns>
        </member>
        <member name="M:Goedel.Account.Server.AccountServiceLocal.Create(Goedel.Account.CreateRequest)">
            <summary>
            Implements the transaction CreateGroup.
            </summary>
            <param name="Request">The request object to send to the host.</param>
            <returns>The response object from the service</returns>
        </member>
        <member name="M:Goedel.Account.Server.AccountServiceLocal.Delete(Goedel.Account.DeleteRequest)">
            <summary>
            Implements the transaction CreateGroup.
            </summary>
            <param name="Request">The request object to send to the host.</param>
            <returns>The response object from the service</returns>
        </member>
        <member name="M:Goedel.Account.Server.AccountServiceLocal.Update(Goedel.Account.UpdateRequest)">
            <summary>
            Implements the transaction CreateGroup.
            </summary>
            <param name="Request">The request object to send to the host.</param>
            <returns>The response object from the service</returns>
        </member>
        <member name="M:Goedel.Account.Server.AccountServiceLocal.Get(Goedel.Account.GetRequest)">
            <summary>
            Implements the transaction CreateGroup.
            </summary>
            <param name="Request">The request object to send to the host.</param>
            <returns>The response object from the service</returns>
        </member>
        <member name="T:Goedel.Account.Server.NamespaceDoc">
            <summary>
            Goedel Account Server API
            </summary>
        </member>
    </members>
</doc>
