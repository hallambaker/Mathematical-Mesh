<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Goedel.Utilities</name>
    </assembly>
    <members>
        <member name="T:Goedel.Utilities.NamespaceDoc">
            <summary>
            The Goedel.Utilities namespace contains various utilities classes. These include
            <list type="bullet">
            <item>Methods of converting binary data to/from character strings using
            standard encodings.</item>
            <item>Testing if a character is of a particular type.</item>
            <item>Convenience routines to test various types of assertion and throw
            an exception using an exception factory method such as the ones
            created by Exceptional.</item>
            </list>
            </summary>
        </member>
        <member name="T:Goedel.Utilities.ArrayUtilities">
            <summary>
            Static class containing extension methods for array manipulation.
            </summary>
        </member>
        <member name="M:Goedel.Utilities.ArrayUtilities.IsEqualTo(System.Byte[],System.Byte[])">
            <summary>Test to see if two arrays are equal.
            </summary>
            <param name="Test1">First test value</param>
            <param name="Test2">Second test value</param>
            <returns>true if and only if the two arrays are of the same size and each
            element is equal.</returns>
        </member>
        <member name="M:Goedel.Utilities.ArrayUtilities.AppendChecked(System.Byte[],System.Int32,System.Byte[])">
            <summary>
            Copy data into the destination array at the specified index. If there is insufficient
            space, the remaining data is silently discarded. The main use for this is for inside 
            key derivation functions where the amount of key generated by the function may be greater
            than the amount needed.
            </summary>
            <param name="Destination">The destination array</param>
            <param name="Offset">Offset in the destination array</param>
            <param name="Data">Data to be written</param>
            <returns>Offset of the next byte to be written.</returns>
        </member>
        <member name="M:Goedel.Utilities.ArrayUtilities.OrTruncated(System.Byte[],System.Int32)">
            <summary>
            Conditional truncation of an output value. If the value Length is zero,
            returns the source array. Otherwise a new array is created and the first
            Length bits of the source array copied into it and the new array returned.
            </summary>
            <param name="Source">The source array</param>
            <param name="Length">The truncation length, 0 for no truncation.</param>
            <returns>Truncated value</returns>
        </member>
        <member name="M:Goedel.Utilities.ArrayUtilities.AddSafe``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Wrapper for the Dictionary Add method to signal success or failure by means of a
            boolean return value rather than throwing an error.
            </summary>
            <typeparam name="TKey">The Key type</typeparam>
            <typeparam name="TValue">The Value type, null values are pruned.</typeparam>
            <param name="Dictionary">The dictionary to add to</param>
            <param name="Key">The key to add</param>
            <param name="Value">The value to add</param>
            <returns>True if a new entry was added, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Utilities.ArrayUtilities.Concatenate(System.Byte[],System.Byte[])">
            <summary>
            Concatenate the two arrays
            </summary>
            <param name="First">First array</param>
            <param name="Second">Second array</param>
            <returns>result</returns>
        </member>
        <member name="T:Goedel.Utilities.ThrowDelegate">
            <summary>
            Delegate that will be thrown as an exception if a condition is met
            </summary>
            <param name="Reason">The reason for raising the exception.</param>
            <returns>The exception to throw</returns>
        </member>
        <member name="T:Goedel.Utilities.ExceptionData">
            <summary>
            Convenience class for constructing an object on the fly to report exception
            parameters of type integer or string.
            </summary>
        </member>
        <member name="P:Goedel.Utilities.ExceptionData.Int">
            <summary>An integer value;</summary>
        </member>
        <member name="P:Goedel.Utilities.ExceptionData.String">
            <summary>A string value</summary>
        </member>
        <member name="M:Goedel.Utilities.ExceptionData.Box(System.Int32,System.String)">
            <summary>
            Factory method to create and return object with specified integer
            and/or string values.
            </summary>
            <param name="Int">The integer value</param>
            <param name="String">The string value</param>
            <returns>The boxed exception data.</returns>
        </member>
        <member name="T:Goedel.Utilities.Assert">
            <summary>
            Convenience routines to test various types of assertion and throw
            an exception using an exception factory method such as the ones
            created by Exceptional.
            </summary>
        </member>
        <member name="M:Goedel.Utilities.Assert.Fail(Goedel.Utilities.ThrowDelegate,System.Object,System.String,System.Int32)">
             <summary>Throw an exception if the specified condition is true. 
            Assert.False (test, NYIException.Throw, "test was true")
             </summary>
             <param name="Throw">Delegate that creates the exception to be thrown if
             Condition is true</param>
             <param name="Reason">Reason data for filling throw template</param>
             <param name="Int">Integer default parameter</param>
             <param name="String">String default parameter</param>
        </member>
        <member name="M:Goedel.Utilities.Assert.NYI(System.Object,System.String,System.Int32)">
            <summary>Throw a Not Yet Implemented exception.
            </summary>
            <param name="Reason">Reason data for filling throw template</param>
            <param name="Int">Integer default parameter</param>
            <param name="String">String default parameter</param>
        </member>
        <member name="M:Goedel.Utilities.Assert.False(System.Boolean,Goedel.Utilities.ThrowDelegate,System.Object,System.String,System.Int32)">
             <summary>Throw an exception if the specified condition is true. 
            Assert.False (test, NYIException.Throw, "test was true")
             </summary>
             <param name="Condition">The condition</param>
             <param name="Throw">Delegate that creates the exception to be thrown if
             Condition is true</param>
             <param name="Reason">Reason data for filling throw template</param>
             <param name="Int">Integer default parameter</param>
             <param name="String">String default parameter</param>
        </member>
        <member name="M:Goedel.Utilities.Assert.True(System.Boolean,Goedel.Utilities.ThrowDelegate,System.Object,System.String,System.Int32)">
             <summary>Throw an exception if the specified condition is false. 
            Assert.True (test, NYIException.Throw, "test was false")
             </summary>
             <param name="Condition">The condition</param>
             <param name="Throw">Delegate that creates the exception to be thrown if
             Condition is true</param>
             <param name="Reason">Reason data for filling throw template</param>
             <param name="Int">Integer default parameter</param>
             <param name="String">String default parameter</param>
        </member>
        <member name="M:Goedel.Utilities.Assert.Null(System.Object,Goedel.Utilities.ThrowDelegate,System.Object,System.String,System.Int32)">
            <summary>Throw an exception if the specified object is not null. 
            </summary>
            <param name="Object">The condition</param>
            <param name="Throw">Delegate that creates the exception to be thrown if
            Condition is true</param>
            <param name="Reason">Reason data for filling throw template</param>
            <param name="Int">Integer default parameter</param>
            <param name="String">String default parameter</param>
        </member>
        <member name="M:Goedel.Utilities.Assert.NotNull(System.Object,Goedel.Utilities.ThrowDelegate,System.Object,System.String,System.Int32)">
            <summary>Throw an exception if the specified object is not null. 
            </summary>
            <param name="Object">The condition</param>
            <param name="Throw">Delegate that creates the exception to be thrown if
            Condition is true</param>
            <param name="Reason">Reason data for filling throw template</param>
            <param name="Int">Integer default parameter</param>
            <param name="String">String default parameter</param>
        </member>
        <member name="T:Goedel.Utilities.Disposable">
            <summary>
            Base class for an object that implements the standard IDisposable pattern.
            </summary>
        </member>
        <member name="M:Goedel.Utilities.Disposable.Dispose">
            <summary>
            Dispose method, frees all resources.
            </summary>
        </member>
        <member name="M:Goedel.Utilities.Disposable.Dispose(System.Boolean)">
            <summary>
            Dispose method, frees resources when disposing, 
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Goedel.Utilities.Disposable.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Goedel.Utilities.Disposable.Disposing">
            <summary>
            The class specific disposal routine.
            </summary>
        </member>
        <member name="T:Goedel.Utilities.Extension">
            <summary>
            Static class containing extension methods for the utilities in this namespace.
            </summary>
        </member>
        <member name="M:Goedel.Utilities.Extension.Base16(System.Byte[],System.Int32)">
            <summary>
            Convert data to Base16 (hexadecimal)
            </summary>
            <param name="Data">The data to be encoded.</param>
            <param name="Length">The number of bytes to be encoded, if negative or unspecified,
            all bytes are encoded.</param>
            <returns>The input data converted to a Base16 encoded string</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.Base32(System.Byte[])">
            <summary>
            Convert data to Base32
            </summary>
            <param name="Data">The data to be encoded.</param>
            <returns>The input data converted to a Base32 encoded string</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.UDF(System.Byte[],System.Int32)">
            <summary>
            Convert data to Base32 string with separator characters
            between each five character block.
            </summary>
            <param name="Data">The data to be encoded.</param>
            <param name="Precision">The number of bits of precision to encode</param>
            <returns>The input data converted to a Base32-UDF encoded string</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.Base64(System.Byte[])">
            <summary>
            Convert data to Base64
            </summary>
            <param name="Data">The data to be encoded.</param>
            <returns>The input data converted to a Base64 encoded string</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.Base64URL(System.Byte[])">
            <summary>
            Convert data to Base64 URL Encoded format
            </summary>
            <param name="Data">The data to be encoded.</param>
            <returns>The input data converted to a Base64URL encoded string</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.AppendBase16(System.Text.StringBuilder,System.Byte[])">
            <summary>
            Convert data to Base16 (hexadecimal) and append to the specified stringbuilder.
            </summary>
            <param name="StringBuilder">String builder to append data to</param>
            <param name="Data">The data to be encoded.</param>
        </member>
        <member name="M:Goedel.Utilities.Extension.AppendBase32(System.Text.StringBuilder,System.Byte[])">
            <summary>
            Convert data to Base16 (hexadecimal) and append to the specified stringbuilder.
            </summary>
            <param name="StringBuilder">String builder to append data to</param>
            <param name="Data">The data to be encoded.</param>
        </member>
        <member name="M:Goedel.Utilities.Extension.AppendBase64(System.Text.StringBuilder,System.Byte[])">
            <summary>
            Convert data to Base16 (hexadecimal) and append to the specified stringbuilder.
            </summary>
            <param name="StringBuilder">String builder to append data to</param>/// 
            <param name="Data">The data to be encoded.</param>
        </member>
        <member name="M:Goedel.Utilities.Extension.AppendBase64URL(System.Text.StringBuilder,System.Byte[])">
            <summary>
            Convert data to Base16 (hexadecimal) and append to the specified stringbuilder.
            </summary>
            <param name="StringBuilder">String builder to append data to</param>
            <param name="Data">The data to be encoded.</param>
        </member>
        <member name="M:Goedel.Utilities.Extension.ToUTF8(System.Byte[])">
            <summary>
            Convert UTF8 encoded bytes to string
            </summary>
            <param name="Data">The encoded bytes to convert.</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.ToBytes(System.String)">
            <summary>
            Convert Text to UTF8 encoded bytes
            </summary>
            <param name="Text">Text to convert</param>
            <returns>The encoded bytes</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.ToASCII(System.Int32)">
            <summary>
            Convert integer to ASCII character if in the range 1-127, otherwise
            return .
            </summary>
            <param name="In">The character to convert</param>
            <returns>ASCII character if 0 &lt; In &lt; 128, otherwise '.'</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.IsBase64(System.Int32)">
            <summary>Test to see if an input character is a Base64 character.
            </summary>
            <param name="c">The input character value</param>
            <returns>true if and only if the input corresponds to an ASCII 
            character used to encode Base64 in traditional or URL encoding
            format.</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.IsWhite(System.Int32)">
            <summary>Test to see if an input character is a Base64 character.
            </summary>
            <param name="c">The input character value</param>
            <returns>true if and only if the input corresponds to an ASCII 
            character used to encode Base64 in traditional or URL encoding
            format.</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.CountUTF8(System.String)">
            <summary>
            Count the number of bytes that are required to encode
            a string in UTF8.
            </summary>
            <param name="Text">Input string</param>
            <returns>Number of bytes required to encode the string.</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.ToUTF8(System.String)">
            <summary>
            Convert a string to a UTF byte array
            </summary>
            <param name="Text">Text to convert</param>
            <returns>UTF8 character data as array</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.ToUTF8(System.String,System.Byte[],System.Int32)">
            <summary>
            Convert a string to a UTF byte array
            </summary>
            <param name="Text">Text to convert</param>
            <param name="Buffer">Output buffer to write result to.</param>
            <param name="Position">Starting position to write data to.</param>
            <returns>Number of characters converted</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.XMLEscape(System.String)">
            <summary>
            Escape text using XML character entity sequences &amp;lt;, &amp;gt; and &amp;amp;
            </summary>
            <param name="In">String to be escaped</param>
            <returns>The escaped string</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.XMLAttributeEscape(System.String)">
            <summary>
            Escape text using XML acharacter entity sequences &amp;lt;, &amp;gt;, &amp;amp;
            &amp;quot; and &amp;nbsp;.
            </summary>
            <param name="In">String to be escaped</param>
            <returns>The escaped string</returns>
        </member>
        <member name="F:Goedel.Utilities.Extension.AlwaysTrue">
            <summary>
            You might think this code is unnecessary but it is actually very 
            important. Don't tamper with it unless you understand how the
            different storage classes affect the moves permitted by the optimizer.
            </summary>
        </member>
        <member name="M:Goedel.Utilities.Extension.True(System.Boolean)">
            <summary>
            Convert constant truth value to static. This allows the programmer 
            to prevent unreachable code being removed.
            </summary>
            <param name="Value">The test value</param>
            <returns>True if the test value is true, false otherwise.</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.False(System.Boolean)">
            <summary>
            Convert constant truth value to static. This allows the programmer 
            to prevent unreachable code being removed.
            </summary>
            <param name="Value">The test value</param>
            <returns>False if the test value is true, true otherwise.</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.UnixCanonicalPath(System.String)">
            <summary>
            Parse file path and return canonical unix path. Relative directory references will
            be consolidated if possible thus a\..\..\b will become ..\b.
            </summary>
            <param name="Path">The path to transform</param>
            <returns>The transformed path.</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.UnixPath(System.String,System.String)">
            <summary>
            Combine a base file path and sujbdirectory path and return a unix file path.
            </summary>
            <param name="File">The base file path.</param>
            <param name="Sub">The subdirectory</param>
            <returns>The combined file path</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.UnixPath(System.String)">
            <summary>
            Return the path for a file as a unix file path.
            </summary>
            <param name="File">The windows file path</param>
            <returns>The corresponding unix path.</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.UnixFile(System.String)">
            <summary>
            Convert Windows file path to Unix.
            </summary>
            <param name="File">Windows file path</param>
            <returns>Unix file path.</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.UnixFile(System.String,System.String)">
            <summary>
            Combine a base file path and sujbdirectory path and return a unix path for the file.
            </summary>
            <param name="File">The base file path.</param>
            <param name="Sub">The subdirectory</param>
            <returns>The combined file path</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.SplitAccountID(System.String,System.String@,System.String@)">
            <summary>
            Extract the Account and Portal components from the specified AccountID.
            </summary>
            <param name="AccountID">The AccountID to split.</param>
            <param name="Service">The portal address.</param>
            <param name="Account">The account name.</param>
        </member>
        <member name="M:Goedel.Utilities.Extension.SplitAccountIDService(System.String,System.String@,System.String@)">
            <summary>
            Parse a string that may contain an account identifier to extract the service and 
            account components.
            </summary>
            <param name="Identifier">The AccountID to split.</param>
            <param name="Service">The portal address.</param>
            <param name="Account">The account name.</param>
        </member>
        <member name="T:Goedel.Utilities.BaseConvert">
            <summary>
            Routines to convert binary data to various character representations.
            Supported representations include Base16, Base32 and Base64 and common
            variations thereof.
            </summary>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToBase16String(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Convert the input data to a base16 string.
            </summary>
            <param name="data">The data to convert.</param>
            <param name="Length">Number of bytes to convert</param>
            <param name="Spaced">If true, insert a space after each entry</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToBase16String(System.Text.StringBuilder,System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Convert the input data to a base16 string.
            </summary>
            <param name="data">The data to convert.</param>
            <param name="Length">Number of bytes to convert</param>
            <param name="Builder">StringBuilder to collect the emitted characteres</param>
            <param name="Spaced">If true, insert a space after each entry</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToBase32String(System.Byte[],System.Int32)">
            <summary>
            Convert the input data to a base32 string.
            </summary>
            <param name="data">The data to convert.</param>
            <param name="Length">Number of bytes to convert</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToBase32String(System.Text.StringBuilder,System.Byte[],System.Int32)">
            <summary>
            Convert the input data to a base32 string.
            </summary>
            <param name="data">The data to convert.</param>
            <param name="Length">Number of bytes to convert</param>
            <param name="Builder">StringBuilder to collect the emitted characteres</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToBase32sString(System.Byte[],System.Int32)">
            <summary>
            Convert the input data to a base32s string.
            </summary>
            <param name="data">The data to convert.</param>
            <param name="Length">Number of bytes to convert</param>
            <returns>The encoded string</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToUDF(System.Byte[],System.Int32)">
            <summary>
            Convert a byte array to a UDF fingerprint with the specified precision.
            </summary>
            <param name="data">The data to take the fingerprint of.</param>
            <param name="Precision">The precision in multiples of 25 bits.</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToUDF32String(System.Byte[])">
            <summary>
            Convert data to Base32/UDF string. This is a Base32 character string with 
            separators between each block of five characters.
            </summary>
            <param name="data">The data to convert</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToUDF32String(System.Byte[],System.Int32)">
            <summary>
            Convert data to Base32/UDF string. This is a Base32 character string with 
            separators between each block of five characters.
            </summary>
            <param name="data">The data to convert</param>
            <param name="Length">The maximum number of characters in the output string
            (including separactors).</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToBase32hsString(System.Byte[],System.Int32)">
            <summary>
            Convert data to Base32HS string.
            </summary>
            <param name="data">The data to convert</param>
            <param name="Length">The maximum number of characters in the output string</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToBase64urlString(System.Byte[],System.Boolean)">
            <summary>
            Convert data to Base64urlString string. 
            </summary>
            <param name="data">The data to convert</param>
            <param name="Newline">If true insert newline characters every 48 characters</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToBase64urlString(System.Byte[])">
            <summary>
            Convert data to Base64urlString string. 
            </summary>
            <param name="data">The data to convert</param>
            <returns>The resulting string.</returns>            
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToBase64urlString(System.Byte[],System.Int32)">
            <summary>
            Convert data to Base64urlString string. 
            </summary>
            <param name="data">The data to convert</param>
            <param name="Length">The number of bytes from the input stream to convert.</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToBase64urlString(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Convert data to Base64urlString string. 
            </summary>
            <param name="data">The data to convert</param>
            <param name="First">The first byte in the input stream to convert</param>
            <param name="Length">The number of bytes from the input stream to convert.</param>
            <param name="Newline">If true insert newline characters every 48 characters</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToBase64urlString(System.Text.StringBuilder,System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Convert data to Base64urlString string. 
            </summary>
            <param name="Builder">String builder to append data to</param>
            <param name="data">The data to convert</param>
            <param name="First">The first byte in the input stream to convert</param>
            <param name="Length">The number of bytes from the input stream to convert.</param>
            <param name="Newline">If true insert newline characters every 48 characters</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToBase64String(System.Byte[],System.Boolean)">
            <summary>
            Convert data to Base64urlString string. 
            </summary>
            <param name="data">The data to convert</param>
            <param name="Newline">If true insert newline characters every 48 characters</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToBase64String(System.Byte[])">
            <summary>
            Convert data to Base64urlString string. 
            </summary>
            <param name="data">The data to convert</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToBase64String(System.Byte[],System.Int32)">
            <summary>
            Convert data to Base64urlString string. 
            </summary>
            <param name="data">The data to convert</param>
            <param name="Length">The number of bytes from the input stream to convert.</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Convert data to Base64urlString string. 
            </summary>
            <param name="data">The data to convert</param>
            <param name="First">The first byte in the input stream to convert</param>
            <param name="Length">The number of bytes from the input stream to convert.</param>
            <param name="Newline">If true insert newline characters every 48 characters</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToBase64String(System.Text.StringBuilder,System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Convert data to Base64urlString string. 
            </summary>
            <param name="Builder">String builder to append data to</param>
            <param name="data">The data to convert</param>
            <param name="First">The first byte in the input stream to convert</param>
            <param name="Length">The number of bytes from the input stream to convert.</param>
            <param name="Newline">If true insert newline characters every 48 characters</param>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.FromBase64urlString(System.String)">
            <summary>
            Convert Base64/Base64URL character string data to binary data. Note
            that because the two character sets are unambiguous, a single conversion
            function converts both types of data.
            </summary>
            <param name="Data">The string to convert</param>
            <returns>The resulting binary data.</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.FromBase32String(System.String)">
            <summary>
            Convert Base32 character string data to binary data.
            </summary>
            <param name="Data">The string to convert</param>
            <returns>The resulting binary data.</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.FromBase16String(System.String)">
            <summary>
            Convert Base16 character string data to binary data.
            </summary>
            <param name="Data">The string to convert</param>
            <returns>The resulting binary data.</returns>
        </member>
        <member name="T:Goedel.Utilities.NYI">
            <summary>
            This feature has not been implemented
            </summary>
        </member>
        <member name="M:Goedel.Utilities.NYI.#ctor">
            <summary>
            Construct instance for exception "The feature has not been implemented"
            </summary>		
        </member>
        <member name="M:Goedel.Utilities.NYI.#ctor(System.String)">
            <summary>
            Construct instance for exception "The feature has not been implemented"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Utilities.NYI.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Utilities.NYI.UserData">
            <summary>
            User data associated with the exception.
            </summary>	
        </member>
        <member name="F:Goedel.Utilities.NYI.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Utilities.Internal">
            <summary>
            An internal assertion check failed.
            </summary>
        </member>
        <member name="M:Goedel.Utilities.Internal.#ctor">
            <summary>
            Construct instance for exception "An internal error occurred"
            </summary>		
        </member>
        <member name="M:Goedel.Utilities.Internal.#ctor(System.String)">
            <summary>
            Construct instance for exception "An internal error occurred"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Utilities.Internal.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Utilities.Internal.UserData">
            <summary>
            User data associated with the exception.
            </summary>	
        </member>
        <member name="F:Goedel.Utilities.Internal.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Utilities.FileReadError">
            <summary>
            The file could not be read.
            </summary>
        </member>
        <member name="M:Goedel.Utilities.FileReadError.#ctor">
            <summary>
            Construct instance for exception "The file could not be read"
            </summary>		
        </member>
        <member name="M:Goedel.Utilities.FileReadError.#ctor(System.String)">
            <summary>
            Construct instance for exception "The file could not be read"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Utilities.FileReadError.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Utilities.FileReadError.UserData">
            <summary>
            User data associated with the exception.
            </summary>	
        </member>
        <member name="M:Goedel.Utilities.FileReadError.#ctor(Goedel.Utilities.ExceptionData)">
            <summary>
            Construct instance for exception using a userdata parameter of
            type ExceptionData and the format string "The file {0} could not be read"
            </summary>		
            <param name="Object">User data</param>	
        </member>
        <member name="M:Goedel.Utilities.FileReadError.#ctor(Goedel.Utilities.ExceptionData,System.Exception)">
            <summary>
            Construct instance for exception using a userdata parameter of
            type ExceptionData and the format string "The file {0} could not be read"
            </summary>		
            <param name="Object">User data</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Utilities.FileReadError.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Utilities.Linewrap">
            <summary>
            Wrap xml output to fit within a line.
            </summary>
        </member>
        <member name="M:Goedel.Utilities.Linewrap.Wrap(System.String,System.Int32)">
            <summary>
            Wrap text to fit a line without breaking words.
            </summary>
            <param name="Input">The input string.</param>
            <param name="Length">Maximum line length</param>
            <returns>The wrapped string.</returns>
        </member>
        <member name="T:Goedel.Utilities.NumberSplit">
            <summary>
            Utilities to split an integer value to byte chunks
            </summary>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte0(System.Int32)">
            <summary>
            Extract bits 0-7 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 0-7</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte1(System.Int32)">
            <summary>
            Extract bits 8-15 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 8-15</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte2(System.Int32)">
            <summary>
            Extract bits 16-23 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 16-23</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte3(System.Int32)">
            <summary>
            Extract bits 24-31 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 24-31</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte0(System.UInt32)">
            <summary>
            Extract bits 0-7 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 0-7</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte1(System.UInt32)">
            <summary>
            Extract bits 8-15 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 8-15</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte2(System.UInt32)">
            <summary>
            Extract bits 16-23 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 16-23</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte3(System.UInt32)">
            <summary>
            Extract bits 24-31 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 24-31</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.BigEndian(System.Int32)">
            <summary>
            Convert integer to bigendian array. That is with the most significant byte first.
            </summary>
            <param name="Data">Input</param>
            <returns>Output array</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.NetworkByte(System.Int32)">
            <summary>
            Convert integer to bigendian array. That is with the most significant byte first.
            This is a convenience alias for Bigendian.
            </summary>
            <param name="Data">Input</param>
            <returns>Output array</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.LittleEndian(System.Int32)">
            <summary>
            Convert integer to little endian array. That is with the most significant byte first.
            </summary>
            <param name="Data">Input</param>
            <returns>Output array</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.SetBigEndian(System.Byte[],System.Int32)">
            <summary>
            Set the values of a byte array from 32 bit integer in big endian order
            </summary>
            <param name="Array">Byte array to set, MUST be sufficiently large for input</param>
            <param name="Data">Data value to set</param>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.SetBigEndian(System.Byte[],System.UInt32)">
            <summary>
            Set the values of a byte array from 32 bit integer in big endian order
            </summary>
            <param name="Array">Byte array to set, MUST be sufficiently large for input</param>
            <param name="Data">Data value to set</param>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.SetBigEndian(System.Byte[],System.UInt64)">
            <summary>
            Set the values of a byte array from 64 bit integer in big endian order
            </summary>
            <param name="Array">Byte array to set, MUST be sufficiently large for input</param>
            <param name="Data">Data value to set</param>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.SetNetworkByte(System.Byte[],System.Int32)">
            <summary>
            Set the values of a byte array from 32 bit integer in big endian order
            </summary>
            <param name="Array">Byte array to set, MUST be sufficiently large for input</param>
            <param name="Data">Data value to set</param>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.SetLittleEndian(System.Byte[],System.Int32)">
            <summary>
            Set the values of a byte array from 32 bit integer in little endian order
            </summary>
            <param name="Array">Byte array to set, MUST be sufficiently large for input</param>
            <param name="Data">Data value to set</param>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte0(System.Int64)">
            <summary>
            Extract bits 0-7 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 0-7</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte1(System.Int64)">
            <summary>
            Extract bits 8-15 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 8-15</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte2(System.Int64)">
            <summary>
            Extract bits 16-23 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 16-23</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte3(System.Int64)">
            <summary>
            Extract bits 24-31 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 24-31</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte4(System.Int64)">
            <summary>
            Extract bits 32-39 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 32-39</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte5(System.Int64)">
            <summary>
            Extract bits 40-47 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 40-47</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte6(System.Int64)">
            <summary>
            Extract bits 48-55 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 48-55</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte7(System.Int64)">
            <summary>
            Extract bits 55-64 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 55-64</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte0(System.UInt64)">
            <summary>
            Extract bits 0-7 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 0-7</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte1(System.UInt64)">
            <summary>
            Extract bits 8-15 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 8-15</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte2(System.UInt64)">
            <summary>
            Extract bits 16-23 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 16-23</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte3(System.UInt64)">
            <summary>
            Extract bits 24-31 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 24-31</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte4(System.UInt64)">
            <summary>
            Extract bits 24-31 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 24-31</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte5(System.UInt64)">
            <summary>
            Extract bits 24-31 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 24-31</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte6(System.UInt64)">
            <summary>
            Extract bits 24-31 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 24-31</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte7(System.UInt64)">
            <summary>
            Extract bits 24-31 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 24-31</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.BigEndian(System.UInt64)">
            <summary>
            Convert integer to bigendian array. That is with the most significant byte first.
            </summary>
            <param name="Data">Input</param>
            <returns>Output array</returns>
        </member>
        <member name="T:Goedel.Utilities.RFC3339">
            <summary>
            Conversion class to and from RFC3339 DateTime representation.
            </summary>
        </member>
        <member name="M:Goedel.Utilities.RFC3339.Digit(System.Char)">
            <summary>
            If C is a digit (0-9), return the numeric value. Otherwise return -1
            </summary>
            <param name="C">Character to convert</param>
            <returns>Integer value of character</returns>
        </member>
        <member name="M:Goedel.Utilities.RFC3339.ToRFC3339(System.DateTime)">
            <summary>
            Format a DateTime value in RFC3339 format.
            </summary>
            <param name="DateTime">The time to convert.</param>
            <returns>The converted date time</returns>
        </member>
        <member name="M:Goedel.Utilities.RFC3339.FromRFC3339(System.String)">
            <summary>
            Parse an RFC3339 format date time value.
            </summary>
            <param name="Text">The date to parse</param>
            <returns>The date value</returns>
        </member>
        <member name="T:Goedel.Utilities.TraceX">
            <summary>
            Extension methods class
            </summary>
        </member>
        <member name="M:Goedel.Utilities.TraceX.FormatX(System.String,System.Object[])">
            <summary>
            Convenience method to do formatted write to the trace output
            </summary>
            <param name="Format">A composite format string </param>
            <param name="Arg">An array of objects to write using format</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:Goedel.Utilities.TraceX.TBS(System.String)">
            <summary>
            Mark code as needing fixing.
            </summary>
            <param name="Report">Comment to report to the trace output.</param>
        </member>
        <member name="M:Goedel.Utilities.TraceX.WriteLine(System.String,System.Object[])">
            <summary>
            Formatted Debug method
            </summary>
            <param name="Format">Format string</param>
            <param name="Arg">Arguments</param>
        </member>
    </members>
</doc>
