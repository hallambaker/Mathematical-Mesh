<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Goedel.Recrypt.Client</name>
    </assembly>
    <members>
        <member name="M:Goedel.Recrypt.Client.Extension.DecryptDARE(Goedel.Mesh.Portal.Client.SessionPersonal,System.Byte[],System.Byte[]@,System.String@)">
            <summary>
            Decrypt a Data At Rest Encrypted (DARE) container.
            </summary>
            <param name="SessionPersonal">The Mesh Personal Profile to use to 
            obtain decryption keys</param>
            <param name="InputData">The ciphertext wrapped in a DARE container.</param>
            <param name="OutputData">The plaintext.</param>
            <param name="ContentType">The content type.</param>
        </member>
        <member name="M:Goedel.Recrypt.Client.Extension.DecryptDARE(Goedel.Mesh.Portal.Client.SessionPersonal,System.String,System.Byte[]@,System.String@)">
            <summary>
            Decrypt a Data At Rest Encrypted (DARE) container.
            </summary>
            <param name="SessionPersonal">The Mesh Personal Profile to use to 
            obtain decryption keys</param>
            <param name="FileName">File containing the ciphertext wrapped in a DARE container.</param>
            <param name="OutputData">The plaintext.</param>
            <param name="ContentType">The content type.</param>
        </member>
        <member name="M:Goedel.Recrypt.Client.Extension.DecryptDARE(Goedel.Mesh.Portal.Client.SessionPersonal,System.String,System.String)">
            <summary>
            Decrypt a Data At Rest Encrypted (DARE) container.
            </summary>
            <param name="SessionPersonal">The Mesh Personal Profile to use to 
            obtain decryption keys</param>
            <param name="InputFile">File containing the ciphertext wrapped in a DARE container.</param>
            <param name="OutputFile">The file to write the output to. If null, the routine will attempt to 
            create a file with the name given in the archive or if unspecified by constructing a filename
            from the content type and the input file name.</param>
        </member>
        <member name="M:Goedel.Recrypt.Client.Extension.RecryptDARE(Goedel.Mesh.Portal.Client.SessionPersonal,System.String,System.String)">
            <summary>
            Decrypt a Data At Rest Encrypted (DARE) container.
            </summary>
            <param name="SessionPersonal">The Mesh Personal Profile to use to 
            obtain decryption keys</param>
            <param name="InputFile">File containing the ciphertext wrapped in a DARE container.</param>
            <param name="OutputFile">The file to write the output to. If null, the routine will attempt to 
            create a file with the name given in the archive or if unspecified by constructing a filename
            from the content type and the input file name.</param>
        </member>
        <member name="M:Goedel.Recrypt.Client.Extension.DecryptReader(Goedel.Mesh.Portal.Client.SessionPersonal,System.String)">
            <summary>
            Return a FileContainerReader for the specified file with access to decryption keys 
            in the key collection associated with the specified personal session
            </summary>
            <param name="FileName">The file to open</param>
            <returns>The reader instance</returns>
        </member>
        <member name="M:Goedel.Recrypt.Client.Extension.RecryptReader(Goedel.Mesh.Portal.Client.SessionPersonal,System.String)">
            <summary>
            Return a FileContainerReader for the specified file with access to decryption keys 
            and recryption group accessors in the key collection associated with the specified 
            personal session.
            </summary>
            <param name="FileName">The file to open</param>
            <returns>The reader instance</returns>
        </member>
        <member name="M:Goedel.Recrypt.Client.Extension.DecryptReader(Goedel.Mesh.Portal.Client.SessionPersonal,System.IO.Stream)">
            <summary>
            Return a FileContainerReader for the specified stream with access to decryption keys 
            in the key collection associated with the specified personal session
            </summary>
            <param name="FileName">The stream to read. This must support seek operations.</param>
            <returns>The reader instance</returns>
        </member>
        <member name="M:Goedel.Recrypt.Client.Extension.RecryptReader(Goedel.Mesh.Portal.Client.SessionPersonal,System.IO.Stream)">
            <summary>
            Return a FileContainerReader for the specified stream with access to decryption keys 
            and recryption group accessors in the key collection associated with the specified 
            personal session.
            </summary>
            <param name="FileName">The stream to read. This must support seek operations.</param>
            <returns>The reader instance</returns>
        </member>
        <member name="M:Goedel.Recrypt.Client.Extension.CreateRecryptProfile(Goedel.Mesh.Portal.Client.SessionPersonal,System.String,System.Collections.Generic.List{Goedel.Mesh.SignedDeviceProfile})">
            <summary>
            Create a new recryption session
            </summary>
            <param name="SessionPersonal"></param>
            <param name="AccountID"></param>
            <param name="Devices"></param>
            <returns></returns>
        </member>
        <member name="M:Goedel.Recrypt.Client.Extension.RecryptDARE(Goedel.Mesh.Portal.Client.SessionPersonal,System.Byte[],System.Byte[]@,System.String@)">
            <summary>
            Decrypt a Data At Rest Encrypted (DARE) container.
            </summary>
            <param name="SessionPersonal">The Mesh Personal Profile to use to 
            obtain decryption keys</param>
            <param name="InputData">The ciphertext wrapped in a DARE container.</param>
            <param name="OutputData">The plaintext.</param>
            <param name="ContentType">The content type.</param>
        </member>
        <member name="M:Goedel.Recrypt.Client.Extension.RecryptDARE(Goedel.Mesh.Portal.Client.SessionPersonal,System.String,System.Byte[]@,System.String@)">
            <summary>
            Decrypt a Data At Rest Encrypted (DARE) container.
            </summary>
            <param name="SessionPersonal">The Mesh Personal Profile to use to 
            obtain decryption keys</param>
            <param name="FileName">File containing the ciphertext wrapped in a DARE container.</param>
            <param name="OutputData">The plaintext.</param>
            <param name="ContentType">The content type.</param>
        </member>
        <member name="T:Goedel.Recrypt.Client.FileContainerReaderRecrypting">
            <summary>
            
            </summary>
        </member>
        <member name="M:Goedel.Recrypt.Client.FileContainerReaderRecrypting.#ctor(Goedel.Mesh.Portal.Client.SessionPersonal,System.String,System.Boolean,Goedel.IO.FileStatus)">
            <summary>
            Open an existing file container in read mode.
            </summary>
            <param name="FileName">The file name to read</param>
            <param name="ReadIndex">If true, read the container index to permit random access</param>
            <param name="FileStatus">The mode to open the file in, this must be a mode
            that permits read access.</param>
            <returns>File Container instance</returns>
        </member>
        <member name="M:Goedel.Recrypt.Client.FileContainerReaderRecrypting.#ctor(Goedel.Mesh.Portal.Client.SessionPersonal,System.Byte[])">
            <summary>
            Open 
            </summary>
            <param name="Data"></param>
        </member>
        <member name="M:Goedel.Recrypt.Client.FileContainerReaderRecrypting.GetExchange(System.Collections.Generic.List{Goedel.Cryptography.Jose.Recipient},Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Perform a Key Exchange
            </summary>
            <param name="Recipients">The list of recipients</param>
            <param name="AlgorithmID">The bulk encryption algorithm</param>
            <returns>The result of the key exchange.</returns>
        </member>
        <member name="T:Goedel.Recrypt.Client.NamespaceDoc">
            <summary>
            Mesh/Recrypt Client API
            </summary>
        </member>
        <member name="T:Goedel.Recrypt.Client.RecryptClient">
            <summary>
            The RecryptClient class is a convenience interface to a RecryptService instance.
            This provides a single point at which dispatch methods for the various transactions 
            may perform sanity checking on input and output variables, enforce timeouts,
            attempt retry etc.
            </summary>
        </member>
        <member name="F:Goedel.Recrypt.Client.RecryptClient.Address">
            <summary>The service address</summary>
        </member>
        <member name="M:Goedel.Recrypt.Client.RecryptClient.#ctor(System.String)">
            <summary>
            Coinstruct a RecryptClient for the specified service.
            </summary>
            <param name="Address">The recryption service to connect to.</param>
        </member>
        <member name="M:Goedel.Recrypt.Client.RecryptClient.#ctor(Goedel.Recrypt.RecryptProfile)">
            <summary>
            Construct a RecryptClient for the specified service.
            </summary>
            <param name="RecryptProfile">The recryption profile.</param>
        </member>
        <member name="M:Goedel.Recrypt.Client.RecryptClient.Hello">
            <summary>
            Check protocol version.
            </summary>
            <returns>The service response</returns>
        </member>
        <member name="M:Goedel.Recrypt.Client.RecryptClient.CreateGroup(Goedel.Recrypt.RecryptionGroup)">
            <summary>
            Create a new recryption group.
            </summary>
            <param name="RecryptionGroup">The recryption group to be created.</param>
            <returns>The service response</returns>
        </member>
        <member name="M:Goedel.Recrypt.Client.RecryptClient.UpdateGroup(Goedel.Recrypt.RecryptionGroup)">
            <summary>
            Update a recryption group definition.
            </summary>
            <param name="RecryptionGroup">The recryption group.</param>
            <returns>The service response</returns>
        </member>
        <member name="M:Goedel.Recrypt.Client.RecryptClient.GetGroup(System.String)">
            <summary>
            Update a recryption group definition.
            </summary>
            <param name="GroupID">The group identifier.</param>
            <returns>The service response</returns>
        </member>
        <member name="M:Goedel.Recrypt.Client.RecryptClient.RecryptKey(System.String)">
            <summary>
            Get the encryption key corresponding to a recryption group.
            </summary>
            <param name="GroupID">The group identifier</param>
            <returns>The service response</returns>
        </member>
        <member name="M:Goedel.Recrypt.Client.RecryptClient.RecryptData(System.String,System.Collections.Generic.List{System.String},Goedel.Cryptography.Jose.Recipient)">
            <summary>
            Request a recryption operation on a Jose Recipient object
            </summary>
            <param name="MemberKeyUDF">The UDF of the encryption key for the device</param>
            <param name="MemberUDF">The UDF of the member profile</param>
            <param name="Recipient">The Recipient field in the encryption data</param>
            <returns>The service response</returns>
        </member>
        <member name="T:Goedel.Recrypt.Client.SessionRecrypt">
            <summary>
            Manage a set of application sessions that are recryption sessions bound to
            a single personal session. This allows for methods such as 'get set of candidate keys'
            </summary>
        </member>
        <member name="F:Goedel.Recrypt.Client.SessionRecrypt.SessionApplications">
            <summary>The list of application sessions.</summary>
        </member>
        <member name="M:Goedel.Recrypt.Client.SessionRecrypt.#ctor(Goedel.Mesh.Portal.Client.SessionPersonal,Goedel.Recrypt.RecryptProfile,System.Boolean)">
            <summary>
            Construct a new SessionRecryption from a profile specification.
            </summary>
            <param name="SessionPersonal">The personal session to construct from.</param>
        </member>
        <member name="M:Goedel.Recrypt.Client.SessionRecrypt.#ctor(Goedel.Mesh.ApplicationProfile,Goedel.Mesh.Portal.Client.SessionPersonal)">
            <summary>
            Construct a SessionRecryption from a cached profile
            </summary>
            <param name="SessionPersonal">The personal session to construct from.</param>
        </member>
        <member name="M:Goedel.Recrypt.Client.SessionRecrypt.GetEncryptionKey(System.Collections.Generic.List{Goedel.Cryptography.Jose.Recipient})">
            <summary>
            Get the encryption key
            </summary>
            <param name="Recipients">List of recipients.</param>
            <returns>The encryption key pair</returns>
        </member>
        <member name="M:Goedel.Recrypt.Client.SessionRecrypt.GetRecryptionGroup(System.String)">
            <summary>
            Locate an existing recryption group.
            </summary>
            <param name="GroupIdentifier">The group identifier</param>
            <returns></returns>
        </member>
        <member name="M:Goedel.Recrypt.Client.SessionRecrypt.CreateGroup(System.String,System.Collections.Generic.List{Goedel.Recrypt.RecryptProfile},Goedel.Cryptography.CryptoAlgorithmID,System.Int32)">
            <summary>
            Create a new recryption group.
            </summary>
            <param name="GroupIdentifier">The group identifier</param>
            <param name="RecryptProfiles">Device profiles </param>
            <param name="cryptoAlgorithmID">The key exchange algorithm to use.</param>
            <param name="KeySize">The key size</param>
            <returns></returns>
        </member>
    </members>
</doc>
