<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Goedel.Utilities</name>
    </assembly>
    <members>
        <member name="T:Goedel.Utilities.NamespaceDoc">
            <summary>
            The Goedel.Utilities namespace contains various utilities classes. These include
            <list type="bullet">
            <item>Methods of converting binary data to/from character strings using
            standard encodings.</item>
            <item>Testing if a character is of a particular type.</item>
            <item>Convenience routines to test various types of assertion and throw
            an exception using an exception factory method such as the ones
            created by Exceptional.</item>
            </list>
            </summary>
        </member>
        <member name="T:Goedel.Utilities.ArrayUtilities">
            <summary>
            Static class containing extension methods for array manipulation.
            </summary>
        </member>
        <member name="M:Goedel.Utilities.ArrayUtilities.IsEqualTo(System.Byte[],System.Byte[])">
            <summary>Test to see if two arrays are equal.
            </summary>
            <param name="Test1">First test value</param>
            <param name="Test2">Second test value</param>
            <returns>true if and only if the two arrays are of the same size and each
            element is equal.</returns>
        </member>
        <member name="M:Goedel.Utilities.ArrayUtilities.AppendChecked(System.Byte[],System.Int32,System.Byte[])">
            <summary>
            Copy data into the destination array at the specified index. If there is insufficient
            space, the remaining data is silently discarded. The main use for this is for inside 
            key derivation functions where the amount of key generated by the function may be greater
            than the amount needed.
            </summary>
            <param name="Destination">The destination array</param>
            <param name="Offset">Offset in the destination array</param>
            <param name="Data">Data to be written</param>
            <returns>Offset of the next byte to be written.</returns>
        </member>
        <member name="M:Goedel.Utilities.ArrayUtilities.Duplicate(System.Byte[])">
            <summary>
            Create a duplicate copy of a byte array. This allows the original data to be modified
            or disposed of.
            </summary>
            <param name="Source">The source array</param>
            <returns>The copied array</returns>
        </member>
        <member name="M:Goedel.Utilities.ArrayUtilities.OrTruncated(System.Byte[],System.Int32)">
            <summary>
            Conditional truncation of an output value. If the value Length is zero,
            returns the source array. Otherwise a new array is created and the first
            Length bits of the source array copied into it and the new array returned.
            </summary>
            <param name="Source">The source array</param>
            <param name="Length">The truncation length, 0 for no truncation.</param>
            <returns>Truncated value</returns>
        </member>
        <member name="M:Goedel.Utilities.ArrayUtilities.AddSafe``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Wrapper for the Dictionary Add method to signal success or failure by means of a
            boolean return value rather than throwing an error.
            </summary>
            <typeparam name="TKey">The Key type</typeparam>
            <typeparam name="TValue">The Value type, null values are pruned.</typeparam>
            <param name="Dictionary">The dictionary to add to</param>
            <param name="Key">The key to add</param>
            <param name="Value">The value to add</param>
            <returns>True if a new entry was added, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Utilities.ArrayUtilities.ReplaceSafe``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Wrapper for the Dictionary Add method to signal success or failure by means of a
            boolean return value rather than throwing an error.
            </summary>
            <typeparam name="TKey">The Key type</typeparam>
            <typeparam name="TValue">The Value type, null values are pruned.</typeparam>
            <param name="Dictionary">The dictionary to add to</param>
            <param name="Key">The key to add</param>
            <param name="Value">The value to add</param>
            <returns>True if a new entry was added, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Utilities.ArrayUtilities.Concatenate(System.Byte[],System.Byte[])">
            <summary>
            Concatenate the two arrays
            </summary>
            <param name="First">First array</param>
            <param name="Second">Second array</param>
            <returns>result</returns>
        </member>
        <member name="T:Goedel.Utilities.ThrowDelegate">
            <summary>
            Delegate that will be thrown as an exception if a condition is met
            </summary>
            <param name="Reason">The reason for raising the exception.</param>
            <returns>The exception to throw</returns>
        </member>
        <member name="T:Goedel.Utilities.ExceptionData">
            <summary>
            Convenience class for constructing an object on the fly to report exception
            parameters of type integer or string.
            </summary>
        </member>
        <member name="P:Goedel.Utilities.ExceptionData.Int">
            <summary>An integer value;</summary>
        </member>
        <member name="P:Goedel.Utilities.ExceptionData.String">
            <summary>A string value</summary>
        </member>
        <member name="M:Goedel.Utilities.ExceptionData.Box(System.Int32,System.String)">
            <summary>
            Factory method to create and return object with specified integer
            and/or string values.
            </summary>
            <param name="Int">The integer value</param>
            <param name="String">The string value</param>
            <returns>The boxed exception data.</returns>
        </member>
        <member name="T:Goedel.Utilities.Assert">
            <summary>
            Convenience routines to test various types of assertion and throw
            an exception using an exception factory method such as the ones
            created by Exceptional.
            </summary>
        </member>
        <member name="M:Goedel.Utilities.Assert.CacheValue``1(``0,``0@)">
            <summary>
            Cache and return a value. This is used to produce compact expression
            body methods for properties that are only evaluated the first time
            they are called.
            </summary>
            <typeparam name="T">The type of data to be cached.</typeparam>
            <param name="Value">The value to be stored.</param>
            <param name="Store">The store that the value is to be written to.</param>
            <returns>The stored value.</returns>
        </member>
        <member name="M:Goedel.Utilities.Assert.Fail(Goedel.Utilities.ThrowDelegate,System.Object,System.String,System.Int32)">
             <summary>Throw an exception if the specified condition is true. 
            Assert.False (test, NYIException.Throw, "test was true")
             </summary>
             <param name="Throw">Delegate that creates the exception to be thrown if
             Condition is true</param>
             <param name="Reason">Reason data for filling throw template</param>
             <param name="Int">Integer default parameter</param>
             <param name="String">String default parameter</param>
        </member>
        <member name="M:Goedel.Utilities.Assert.NYI(System.Object,System.String,System.Int32)">
            <summary>Throw a Not Yet Implemented exception.
            </summary>
            <param name="Reason">Reason data for filling throw template</param>
            <param name="Int">Integer default parameter</param>
            <param name="String">String default parameter</param>
        </member>
        <member name="M:Goedel.Utilities.Assert.False(System.Boolean,Goedel.Utilities.ThrowDelegate,System.Object,System.String,System.Int32)">
             <summary>Throw an exception if the specified condition is true. 
            Assert.False (test, NYIException.Throw, "test was true")
             </summary>
             <param name="Condition">The condition</param>
             <param name="Throw">Delegate that creates the exception to be thrown if
             Condition is true</param>
             <param name="Reason">Reason data for filling throw template</param>
             <param name="Int">Integer default parameter</param>
             <param name="String">String default parameter</param>
        </member>
        <member name="M:Goedel.Utilities.Assert.AssertFalse(System.Boolean,Goedel.Utilities.ThrowDelegate,System.Object,System.String,System.Int32)">
             <summary>Throw an exception if the specified condition is true. 
            (test, NYIException.Throw, "test was true").AssertFalse();
             </summary>
             <param name="Condition">The condition</param>
             <param name="Throw">Delegate that creates the exception to be thrown if
             Condition is true</param>
             <param name="Reason">Reason data for filling throw template</param>
             <param name="Int">Integer default parameter</param>
             <param name="String">String default parameter</param>
        </member>
        <member name="M:Goedel.Utilities.Assert.True(System.Boolean,Goedel.Utilities.ThrowDelegate,System.Object,System.String,System.Int32)">
             <summary>Throw an exception if the specified condition is false. 
            Assert.True (test, NYIException.Throw, "test was false")
             </summary>
             <param name="Condition">The condition</param>
             <param name="Throw">Delegate that creates the exception to be thrown if
             Condition is true</param>
             <param name="Reason">Reason data for filling throw template</param>
             <param name="Int">Integer default parameter</param>
             <param name="String">String default parameter</param>
        </member>
        <member name="M:Goedel.Utilities.Assert.AssertTrue(System.Boolean,Goedel.Utilities.ThrowDelegate,System.Object,System.String,System.Int32)">
            <summary>Throw an exception if the specified condition is false. 
            (test, NYIException.Throw, "test was false").AssertTrue();
            </summary>
            <param name="Condition">The condition</param>
            <param name="Throw">Delegate that creates the exception to be thrown if
            Condition is true</param>
            <param name="Reason">Reason data for filling throw template</param>
            <param name="Int">Integer default parameter</param>
            <param name="String">String default parameter</param>
        </member>
        <member name="M:Goedel.Utilities.Assert.Null(System.Object,Goedel.Utilities.ThrowDelegate,System.Object,System.String,System.Int32)">
            <summary>Throw an exception if the specified object is not null. 
            </summary>
            <param name="Object">The condition</param>
            <param name="Throw">Delegate that creates the exception to be thrown if
            Condition is true</param>
            <param name="Reason">Reason data for filling throw template</param>
            <param name="Int">Integer default parameter</param>
            <param name="String">String default parameter</param>
        </member>
        <member name="M:Goedel.Utilities.Assert.AssertNull(System.Object,Goedel.Utilities.ThrowDelegate,System.Object,System.String,System.Int32)">
            <summary>Throw an exception if the specified object is not null. 
            </summary>
            <param name="Object">The condition</param>
            <param name="Throw">Delegate that creates the exception to be thrown if
            Condition is true</param>
            <param name="Reason">Reason data for filling throw template</param>
            <param name="Int">Integer default parameter</param>
            <param name="String">String default parameter</param>
        </member>
        <member name="M:Goedel.Utilities.Assert.NotNull(System.Object,Goedel.Utilities.ThrowDelegate,System.Object,System.String,System.Int32)">
            <summary>Throw an exception if the specified object is not null. 
            </summary>
            <param name="Object">The condition</param>
            <param name="Throw">Delegate that creates the exception to be thrown if
            Condition is true</param>
            <param name="Reason">Reason data for filling throw template</param>
            <param name="Int">Integer default parameter</param>
            <param name="String">String default parameter</param>
        </member>
        <member name="M:Goedel.Utilities.Assert.AssertNotNull(System.Object,Goedel.Utilities.ThrowDelegate,System.Object,System.String,System.Int32)">
            <summary>Throw an exception if the specified object is not null. 
            </summary>
            <param name="Object">The condition</param>
            <param name="Throw">Delegate that creates the exception to be thrown if
            Condition is true</param>
            <param name="Reason">Reason data for filling throw template</param>
            <param name="Int">Integer default parameter</param>
            <param name="String">String default parameter</param>
        </member>
        <member name="M:Goedel.Utilities.Assert.AssertEqual(System.Byte[],System.Byte[],Goedel.Utilities.ThrowDelegate,System.Object,System.String,System.Int32)">
            <summary>Test to see if two arrays are equal.
            </summary>
            <param name="Test1">First test value</param>
            <param name="Test2">Second test value</param>
            <param name="Throw">Delegate that creates the exception to be thrown if
            Condition is true</param>
            <param name="Reason">Reason data for filling throw template</param>
            <param name="Int">Integer default parameter</param>
            <param name="String">String default parameter</param>
        </member>
        <member name="M:Goedel.Utilities.Assert.AssertEqual``1(``0,``0,Goedel.Utilities.ThrowDelegate,System.Object,System.String,System.Int32)">
            <summary>Test to see if two arrays are equal.
            </summary>
            <param name="Test1">First test value</param>
            <param name="Test2">Second test value</param>
            <param name="Throw">Delegate that creates the exception to be thrown if
            Condition is true</param>
            <param name="Reason">Reason data for filling throw template</param>
            <param name="Int">Integer default parameter</param>
            <param name="String">String default parameter</param>
        </member>
        <member name="M:Goedel.Utilities.Assert.TaskValidate(System.String)">
            <summary>
            Utility routine used to flag missing code to implement missing
            cryptographic authentication check
            </summary>
            <param name="description"></param>
        </member>
        <member name="M:Goedel.Utilities.Assert.TaskTest(System.String)">
            <summary>
            Utility routine used to flag missing code to implement missing test for
            functionality not yet implemented.
            </summary>
            <param name="description"></param>
        </member>
        <member name="M:Goedel.Utilities.Assert.TaskFunctionality(System.String)">
            <summary>
            Utility routine used to flag missing code to implement missing test for
            functionality not yet implemented.
            </summary>
            <param name="description"></param>
        </member>
        <member name="T:Goedel.Utilities.Disposable">
            <summary>
            Base class for an object that implements the standard IDisposable pattern.
            </summary>
        </member>
        <member name="M:Goedel.Utilities.Disposable.Dispose">
            <summary>
            Dispose method, frees all resources.
            </summary>
        </member>
        <member name="M:Goedel.Utilities.Disposable.Dispose(System.Boolean)">
            <summary>
            Dispose method, frees resources when disposing, 
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Goedel.Utilities.Disposable.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Goedel.Utilities.Disposable.Disposing">
            <summary>
            The class specific disposal routine.
            </summary>
        </member>
        <member name="T:Goedel.Utilities.IBytesToStream">
            <summary>
            Interface to binary stream converter.
            </summary>
        </member>
        <member name="M:Goedel.Utilities.IBytesToStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a sequence of bytes to the stream
            </summary>
            <param name="Data">The data to send</param>
            <param name="First">Position of first byte to send.</param>
            <param name="Length">Position of last byte to send. If less than zero, read to end.</param>
        </member>
        <member name="M:Goedel.Utilities.IBytesToStream.Final">
            <summary>
            Complete sending bytes and reset converter to send more bytes.
            </summary>
        </member>
        <member name="T:Goedel.Utilities.IStringToStream">
            <summary>
            Interface to binary stream converter.
            </summary>
        </member>
        <member name="M:Goedel.Utilities.IStringToStream.Write(System.String)">
            <summary>
            Write string to the stream
            </summary>
            <param name="Data">The data to send</param>
        </member>
        <member name="M:Goedel.Utilities.IStringToStream.Write(System.Char)">
            <summary>
            Write character to the stream
            </summary>
            <param name="Data">The data to send</param>
        </member>
        <member name="M:Goedel.Utilities.IStringToStream.Final">
            <summary>
            Complete input and reset converter for next session.
            </summary>
        </member>
        <member name="T:Goedel.Utilities.BaseConvert">
            <summary>
            Routines to convert binary data to various character representations.
            Supported representations include Base16, Base32 and Base64 and common
            variations thereof.
            </summary>
            <summary>
            Routines to convert binary data to various character representations.
            Supported representations include Base16, Base32 and Base64 and common
            variations thereof.
            </summary>
        </member>
        <member name="T:Goedel.Utilities.BaseConvert.StreamConvertString">
            <summary>
            Conversion from character streams to bytes is straighforward since there
            is no formatting required of the target.
            </summary>
        </member>
        <member name="T:Goedel.Utilities.BaseConvert.ByteStreamFormatter">
            <summary>
            Base class for byte streamed formatter
            </summary>
        </member>
        <member name="T:Goedel.Utilities.BaseConvert.StreamConvertBits">
            <summary>
            General purpose converter used for every conversion to a stream except for Base32UDF.
            </summary>
        </member>
        <member name="T:Goedel.Utilities.BaseConvert.StringBuilderConvertBits">
            <summary>
            General purpose converter used for every conversion to a string except for Base32UDF.
            </summary>
        </member>
        <member name="F:Goedel.Utilities.BaseConvert.BASE16">
            <summary></summary>
        </member>
        <member name="F:Goedel.Utilities.BaseConvert.BASE32">
            <summary></summary>
        </member>
        <member name="F:Goedel.Utilities.BaseConvert.BASE32HEX">
            <summary></summary>
        </member>
        <member name="F:Goedel.Utilities.BaseConvert.BASE64URL">
            <summary></summary>
        </member>
        <member name="F:Goedel.Utilities.BaseConvert.BASE64">
            <summary></summary>
        </member>
        <member name="F:Goedel.Utilities.BaseConvert.BASE16Value">
            <summary></summary>
        </member>
        <member name="F:Goedel.Utilities.BaseConvert.BASE32Value">
            <summary></summary>
        </member>
        <member name="F:Goedel.Utilities.BaseConvert.BASE64Value">
            <summary></summary>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToStreamBase16(System.IO.Stream,Goedel.Utilities.ConversionFormat)">
            <summary>
            Return reusable stream converter to convert data input to 
            base 16 (hexadecimal) with uppercase characters 
            and write characters to specified stream in ASCII/UTF8.
            </summary>
            <param name="Output">The stream to write the output to.</param>
            <param name="Format">Specifies the output format</param>
            <returns>The stream converter</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToStreamBase16(System.Text.StringBuilder,Goedel.Utilities.ConversionFormat)">
            <summary>
            Return reusable stream converter to convert data input to 
            base 16 (hexadecimal) with uppercase characters 
            and write characters to specified stream in ASCII/UTF8.
            </summary>
            <param name="Output">The stream to write the output to.</param>
            <param name="Format">Specifies the output format</param>
            <returns>The stream converter</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToStringBase16(System.Byte[],System.Int32,System.Int32,Goedel.Utilities.ConversionFormat)">
            <summary>
            Convert data to base32 encoded string
            </summary>
            <param name="Data">The data to convert</param>
            <param name="First">The index position of the first byte to convert.</param>
            <param name="Length">The number of bytes to convert</param>
            <param name="Format">Specifies the output format</param>
            <returns>The encoded data</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToStringBase16FormatHex(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert data to base32 encoded string
            </summary>
            <param name="Data">The data to convert</param>
            <param name="First">The index position of the first byte to convert.</param>
            <param name="Length">The number of bytes to convert</param>
            <returns>The encoded data</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToStringBase16(System.Text.StringBuilder,System.Byte[],System.Int32,System.Int32,Goedel.Utilities.ConversionFormat)">
            <summary>
            Convert data to Base16 (hexadecimal) and append to the specified stringbuilder.
            </summary>
            <param name="StringBuilder">String builder to append data to</param>
            <param name="First">Position of first byte to send.</param>
            <param name="Length">Position of last byte to send. If less than zero, read to end.</param>
            <param name="Data">The data to be encoded.</param>
            <param name="Format">Specifies the output format</param>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToStreamBase32(System.IO.Stream,Goedel.Utilities.ConversionFormat)">
            <summary>
            Return reusable stream converter to convert data input to 
            base 32 with prefered (disambiguated) characters 
            and write characters to specified stream in ASCII/UTF8.
            </summary>
            <param name="Output">The stream to write the output to.</param>
            <param name="Format">Specifies the output format</param>
            <returns>The stream converter</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToStreamBase32(System.Text.StringBuilder,Goedel.Utilities.ConversionFormat,System.Int32)">
            <summary>
            Return reusable stream converter to convert data input to 
            base 32 with prefered (disambiguated) characters 
            and write characters to specified stream in ASCII/UTF8.
            </summary>
            <param name="Output">The stream to write the output to.</param>
            <param name="Format">Specifies the output format</param>
            <param name="OutputMax">The maximum number of significant bits in the output.</param>
            <returns>The stream converter</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToStringBase32(System.Byte[],System.Int32,System.Int32,Goedel.Utilities.ConversionFormat,System.Int32)">
            <summary>
            Convert data to base32 encoded string
            </summary>
            <param name="Data">The data to convert</param>
            <param name="First">The index position of the first byte to convert.</param>
            <param name="Length">The number of bytes to convert</param>
            <param name="Format">Specifies the output format</param>
            <param name="OutputMax">The maximum number of significant bits in the output.</param>
            <returns>The encoded data</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToStringBase32(System.Text.StringBuilder,System.Byte[],System.Int32,System.Int32,Goedel.Utilities.ConversionFormat,System.Int32)">
            <summary>
            Convert data to Base32 and append to the specified stringbuilder.
            </summary>
            <param name="StringBuilder">String builder to append data to</param>
            <param name="First">Position of first byte to send.</param>
            <param name="Length">Position of last byte to send. If less than zero, read to end.</param>
            <param name="Data">The data to be encoded.</param>
            <param name="Format">Specifies the output format</param>
            <param name="OutputMax">The maximum number of significant bits in the output.</param>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToStreamBase32Hex(System.IO.Stream,Goedel.Utilities.ConversionFormat)">
            <summary>
            Return reusable stream converter to convert data input to 
            base 32 using the extended hexadecimal encoding
            and write characters to specified stream in ASCII/UTF8.
            </summary>
            <param name="Output">The stream to write the output to.</param>
            <param name="Format">Specifies the output format</param>
            <returns>The stream converter</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToStreamBase32Hex(System.Text.StringBuilder,Goedel.Utilities.ConversionFormat)">
            <summary>
            Return reusable stream converter to convert data input to 
            base 32 using the extended hexadecimal encoding
            and write characters to specified stream in ASCII/UTF8.
            </summary>
            <param name="Output">The stream to write the output to.</param>
            <param name="Format">Specifies the output format</param>
            <returns>The stream converter</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToStringBase32Hex(System.Byte[],System.Int32,System.Int32,Goedel.Utilities.ConversionFormat)">
            <summary>
            Convert data to base32Hex encoded string
            </summary>
            <param name="Data">The data to convert</param>
            <param name="First">The index position of the first byte to convert.</param>
            <param name="Length">The number of bytes to convert</param>
            <param name="Format">Specifies the output format</param>
            <returns>The encoded data</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToStringBase32Hex(System.Text.StringBuilder,System.Byte[],System.Int32,System.Int32,Goedel.Utilities.ConversionFormat)">
            <summary>
            Convert data to Base32 (with hexadecimal characters) and append to the specified stringbuilder.
            </summary>
            <param name="StringBuilder">String builder to append data to</param>
            <param name="First">Position of first byte to send.</param>
            <param name="Length">Position of last byte to send. If less than zero, read to end.</param>
            <param name="Data">The data to be encoded.</param>
            <param name="Format">Specifies the output format</param>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToStreamBase64(System.IO.Stream,Goedel.Utilities.ConversionFormat)">
            <summary>
            Return reusable stream converter to convert data input to 
            base 64 (original) characters
            and write characters to specified stream in ASCII/UTF8.
            </summary>
            <param name="Output">The stream to write the output to.</param>
            <param name="Format">Specifies the output format</param>
            <returns>The stream converter</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToStreamBase64(System.Text.StringBuilder,Goedel.Utilities.ConversionFormat)">
            <summary>
            Return reusable stream converter to convert data input to 
            base 64 (original) characters
            and write characters to specified stream in ASCII/UTF8.
            </summary>
            <param name="Output">The stream to write the output to.</param>
            <param name="Format">Specifies the output format</param>
            <returns>The stream converter</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToStringBase64(System.Byte[],System.Int32,System.Int32,Goedel.Utilities.ConversionFormat)">
            <summary>
            Convert data to base64 encoded string
            </summary>
            <param name="Data">The data to convert</param>
            <param name="First">The index position of the first byte to convert.</param>
            <param name="Length">The number of bytes to convert</param>
            <param name="Format">Specifies the output format</param>
            <returns>The encoded data</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToStringBase64(System.Text.StringBuilder,System.Byte[],System.Int32,System.Int32,Goedel.Utilities.ConversionFormat)">
            <summary>
            Convert data to Base64 and append to the specified stringbuilder.
            </summary>
            <param name="StringBuilder">String builder to append data to</param>
            <param name="First">Position of first byte to send.</param>
            <param name="Length">Position of last byte to send. If less than zero, read to end.</param>
            <param name="Data">The data to be encoded.</param>
            <param name="Format">Specifies the output format</param>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToStreamBase64Url(System.IO.Stream,Goedel.Utilities.ConversionFormat)">
            <summary>
            Return reusable stream converter to convert data input to 
            base 64 URL-safe characters 
            and write characters to specified stream in ASCII/UTF8.
            </summary>
            <param name="Output">The stream to write the output to.</param>
            <param name="Format">Specifies the output format</param>
            <returns>The stream converter</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToStreamBase64Url(System.Text.StringBuilder,Goedel.Utilities.ConversionFormat)">
            <summary>
            Return reusable stream converter to convert data input to 
            base 64 URL-safe characters 
            and write characters to specified stream in ASCII/UTF8.
            </summary>
            <param name="Output">The stream to write the output to.</param>
            <param name="Format">Specifies the output format</param>
            <returns>The stream converter</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToStringBase64url(System.Byte[],System.Int32,System.Int32,Goedel.Utilities.ConversionFormat,System.Int32,System.Int32)">
            <summary>
            Convert data to base64URL encoded string
            </summary>
            <param name="Data">The data to convert</param>
            <param name="First">The index position of the first byte to convert.</param>
            <param name="Length">The number of bytes to convert</param>
            <param name="Format">Specifies the output format</param>
            <param name="OutputCol">The initial ouput column</param>
            <param name="OutputMax">The maximum output width.</param>
            <returns>The encoded data</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToStringBase64URL(System.Text.StringBuilder,System.Byte[],System.Int32,System.Int32,Goedel.Utilities.ConversionFormat)">
            <summary>
            Convert data to Base64URL and append to the specified stringbuilder.
            </summary>
            <param name="StringBuilder">String builder to append data to</param>
            <param name="First">Position of first byte to send.</param>
            <param name="Length">Position of last byte to send. If less than zero, read to end.</param>
            <param name="Data">The data to be encoded.</param>
            <param name="Format">Specifies the output format</param>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.ToStringBase32hs(System.Byte[],System.Int32)">
            <summary>
            Convert data to Base32HS string. This is probably not necessary as 
            the ticket mechanism needs to be overhauled anyway.
            </summary>
            <param name="data">The data to convert</param>
            <param name="Length">The maximum number of characters in the output string</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.FromBase64">
            <summary>
            Return a streaming converter to 
            convert Base64/Base64URL character string data to binary data. Note
            that because the two character sets are unambiguous, a single conversion
            function converts both types of data.
            </summary>
            <returns>The resulting binary data.</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.FromBase64(System.String)">
            <summary>
            Convert Base64/Base64URL character string data to binary data. Note
            that because the two character sets are unambiguous, a single conversion
            function converts both types of data.
            </summary>
            <param name="Data">The string to convert</param>
            <returns>The resulting binary data.</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.FromBase32">
            <summary>
            Return a streaming converter to 
            convert Base32 character string data to binary data.
            </summary>
            <returns>The resulting binary data.</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.FromBase32(System.String)">
            <summary>
            Convert Base32 character string data to binary data.
            </summary>
            <param name="Data">The string to convert</param>
            <returns>The resulting binary data.</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.FromBase16">
            <summary>
            Return a streaming converter to 
            convert Base32 character string data to binary data.
            </summary>
            <returns>The resulting binary data.</returns>
        </member>
        <member name="M:Goedel.Utilities.BaseConvert.FromBase16(System.String)">
            <summary>
            Convert Base16 character string data to binary data.
            </summary>
            <param name="Data">The string to convert</param>
            <returns>The resulting binary data.</returns>
        </member>
        <member name="T:Goedel.Utilities.ConversionFormat">
            <summary>Specify formatting options fdor conversion</summary>
        </member>
        <member name="F:Goedel.Utilities.ConversionFormat.None">
            <summary>Apply no additional formatting</summary>
        </member>
        <member name="F:Goedel.Utilities.ConversionFormat.Draft">
            <summary>Perform linewrapping at 72 charcters and insert 
            leading spaces as per an Internet Draft.</summary>
        </member>
        <member name="F:Goedel.Utilities.ConversionFormat.Hex">
            <summary>Perform hexadecimal spacing</summary>
        </member>
        <member name="F:Goedel.Utilities.ConversionFormat.Dash4">
            <summary>Insert a dash every 4 output characters</summary>
        </member>
        <member name="F:Goedel.Utilities.ConversionFormat.Dash5">
            <summary>Insert a dash every 5 output characters</summary>
        </member>
        <member name="F:Goedel.Utilities.ConversionFormat.Terminal">
            <summary>Add trailing base64 equals characters if required.</summary>
        </member>
        <member name="T:Goedel.Utilities.Extension">
            <summary>
            
            </summary>
        </member>
        <member name="M:Goedel.Utilities.Extension.ToCommaSeparated(System.Collections.Generic.List{System.String})">
            <summary>
            Convert a list of strings to a comma separated string.
            </summary>
            <param name="Texts">The input strings.</param>
            <returns>If Texts is not null, the string values separated by commas, otherwise null.</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.ToUTF8(System.Byte[])">
            <summary>
            Convert UTF8 encoded bytes to string
            </summary>
            <param name="Data">The encoded bytes to convert.</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.ToBytes(System.String)">
            <summary>
            Convert Text to UTF8 encoded bytes
            </summary>
            <param name="Text">Text to convert</param>
            <returns>The encoded bytes</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.ToASCII(System.Int32)">
            <summary>
            Convert integer to ASCII character if in the range 1-127, otherwise
            return .
            </summary>
            <param name="In">The character to convert</param>
            <returns>ASCII character if 0 &lt; In &lt; 128, otherwise '.'</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.IsBase64(System.Int32)">
            <summary>Test to see if an input character is a Base64 character.
            </summary>
            <param name="c">The input character value</param>
            <returns>true if and only if the input corresponds to an ASCII 
            character used to encode Base64 in traditional or URL encoding
            format.</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.IsWhite(System.Int32)">
            <summary>Test to see if an input character is a Base64 character.
            </summary>
            <param name="c">The input character value</param>
            <returns>true if and only if the input corresponds to an ASCII 
            character used to encode Base64 in traditional or URL encoding
            format.</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.CountUTF8(System.String)">
            <summary>
            Count the number of bytes that are required to encode
            a string in UTF8.
            </summary>
            <param name="Text">Input string</param>
            <returns>Number of bytes required to encode the string.</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.ToUTF8(System.String)">
            <summary>
            Convert a string to a UTF byte array
            </summary>
            <param name="Text">Text to convert</param>
            <returns>UTF8 character data as array</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.ToUTF8(System.String,System.Byte[],System.Int32)">
            <summary>
            Convert a string to a UTF byte array
            </summary>
            <param name="Text">Text to convert</param>
            <param name="Buffer">Output buffer to write result to.</param>
            <param name="Position">Starting position to write data to.</param>
            <returns>Number of characters converted</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.XMLEscape(System.String)">
            <summary>
            Escape text using XML character entity sequences &amp;lt;, &amp;gt; and &amp;amp;
            </summary>
            <param name="In">String to be escaped</param>
            <returns>The escaped string</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.XMLAttributeEscape(System.String)">
            <summary>
            Escape text using XML acharacter entity sequences &amp;lt;, &amp;gt;, &amp;amp;
            &amp;quot; and &amp;nbsp;.
            </summary>
            <param name="In">String to be escaped</param>
            <returns>The escaped string</returns>
        </member>
        <member name="F:Goedel.Utilities.Extension.AlwaysTrue">
            <summary>
            You might think this code is unnecessary but it is actually very 
            important. Don't tamper with it unless you understand how the
            different storage classes affect the moves permitted by the optimizer.
            </summary>
        </member>
        <member name="M:Goedel.Utilities.Extension.True(System.Boolean)">
            <summary>
            Convert constant truth value to static. This allows the programmer 
            to prevent unreachable code being removed.
            </summary>
            <param name="Value">The test value</param>
            <returns>True if the test value is true, false otherwise.</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.False(System.Boolean)">
            <summary>
            Convert constant truth value to static. This allows the programmer 
            to prevent unreachable code being removed.
            </summary>
            <param name="Value">The test value</param>
            <returns>False if the test value is true, true otherwise.</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.UnixCanonicalPath(System.String)">
            <summary>
            Parse file path and return canonical unix path. Relative directory references will
            be consolidated if possible thus a\..\..\b will become ..\b.
            </summary>
            <param name="Path">The path to transform</param>
            <returns>The transformed path.</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.UnixPath(System.String,System.String)">
            <summary>
            Combine a base file path and sujbdirectory path and return a unix file path.
            </summary>
            <param name="File">The base file path.</param>
            <param name="Sub">The subdirectory</param>
            <returns>The combined file path</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.UnixPath(System.String)">
            <summary>
            Return the path for a file as a unix file path.
            </summary>
            <param name="File">The windows file path</param>
            <returns>The corresponding unix path.</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.UnixFile(System.String)">
            <summary>
            Convert Windows file path to Unix.
            </summary>
            <param name="File">Windows file path</param>
            <returns>Unix file path.</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.UnixFile(System.String,System.String)">
            <summary>
            Combine a base file path and sujbdirectory path and return a unix path for the file.
            </summary>
            <param name="File">The base file path.</param>
            <param name="Sub">The subdirectory</param>
            <returns>The combined file path</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.Left(System.String,System.Char)">
            <summary>
            If the input string contains the separator, return the string leading up 
            to the separator. Otherwise return null.
            </summary>
            <param name="Input">The string to split.</param>
            <param name="Separator">The separator character</param>
            <returns>If the separator is found, returns the input string up to but not 
            including the separator, otherwise null.</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.Right(System.String,System.Char)">
            <summary>
            If the input string contains the separator, return the string leading up 
            to the separator. Otherwise return null.
            </summary>
            <param name="Input">The string to split.</param>
            <param name="Separator">The separator character</param>
            <returns>If the separator is found, returns the input string up to but not 
            including the separator, otherwise null.</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.Separate(System.String,System.Char,System.String@,System.String@)">
            <summary>
            If the input string contains the separator, return the string leading up 
            to the separator. Otherwise return null.
            </summary>
            <param name="Input">The string to split.</param>
            <param name="Separator">The separator character</param>
            <param name="Right">The string to the right of the separator</param>
            <param name="Left">The string to the left of the separator</param>
            <returns>If the separator is found, returns the input string up to but not 
            including the separator, otherwise null.</returns>
        </member>
        <member name="M:Goedel.Utilities.Extension.SplitAccountID(System.String,System.String@,System.String@)">
            <summary>
            Extract the Account and Portal components from the specified AccountID.
            </summary>
            <param name="AccountID">The AccountID to split.</param>
            <param name="Service">The portal address.</param>
            <param name="Account">The account name.</param>
        </member>
        <member name="M:Goedel.Utilities.Extension.SplitAccountIDService(System.String,System.String@,System.String@)">
            <summary>
            Parse a string that may contain an account identifier to extract the service and 
            account components.
            </summary>
            <param name="Identifier">The AccountID to split.</param>
            <param name="Service">The portal address.</param>
            <param name="Account">The account name.</param>
        </member>
        <member name="M:Goedel.Utilities.Extension.Read(System.IO.Stream,System.Byte[],System.Int64,System.Int64)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position 
            within the stream by the number of bytes read using index pointers that
            are 64 bits.
            </summary>
            <param name="Stream">The stream to be read.</param>
            <param name="buffer">An array of bytes. A maximum of count bytes are read 
            from the current stream and stored in <paramref name="buffer"/>.</param>
            <param name="offset">The byte offset in <paramref name="buffer"/> at which 
            to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current 
            stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less 
            than the number of bytes requested if that many bytes are not currently available, 
            or zero if the end of the stream has been reached.</returns>
            <remarks>This routine does not currently implement 64 bit clean processing,
            it merely provides a single point through which such processing may introduced 
            should it prove necessary.</remarks>
        </member>
        <member name="M:Goedel.Utilities.Extension.Write(System.IO.Stream,System.Byte[],System.Int64,System.Int64)">
            <summary>
            Writes a sequence of bytes to the current CryptoStream and advances the 
            current position within the stream by the number of bytes written.
            </summary>
            <param name="Stream">The stream to be written to.</param>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <remarks>This routine does not currently implement 64 bit clean processing,
            it merely provides a single point through which such processing may introduced 
            should it prove necessary.</remarks>
        </member>
        <member name="M:Goedel.Utilities.Extension.Write(System.IO.Stream,System.Byte[])">
            <summary>
            Write the entire contents of <paramref name="buffer"/> to <paramref name="stream"/>
            </summary>
            <param name="stream">Stream to write to.</param>
            <param name="buffer">the data to be written.</param>
        </member>
        <member name="T:Goedel.Utilities.NYI">
            <summary>
            This feature has not been implemented
            </summary>
        </member>
        <member name="M:Goedel.Utilities.NYI.#ctor">
            <summary>
            Construct instance for exception "The feature has not been implemented"
            </summary>		
        </member>
        <member name="M:Goedel.Utilities.NYI.#ctor(System.String)">
            <summary>
            Construct instance for exception "The feature has not been implemented"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Utilities.NYI.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Utilities.NYI.UserData">
            <summary>
            User data associated with the exception.
            </summary>	
        </member>
        <member name="F:Goedel.Utilities.NYI.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Utilities.Internal">
            <summary>
            An internal assertion check failed.
            </summary>
        </member>
        <member name="M:Goedel.Utilities.Internal.#ctor">
            <summary>
            Construct instance for exception "An internal error occurred"
            </summary>		
        </member>
        <member name="M:Goedel.Utilities.Internal.#ctor(System.String)">
            <summary>
            Construct instance for exception "An internal error occurred"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Utilities.Internal.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Utilities.Internal.UserData">
            <summary>
            User data associated with the exception.
            </summary>	
        </member>
        <member name="F:Goedel.Utilities.Internal.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Utilities.FileReadError">
            <summary>
            The file could not be read.
            </summary>
        </member>
        <member name="M:Goedel.Utilities.FileReadError.#ctor">
            <summary>
            Construct instance for exception "The file could not be read"
            </summary>		
        </member>
        <member name="M:Goedel.Utilities.FileReadError.#ctor(System.String)">
            <summary>
            Construct instance for exception "The file could not be read"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Utilities.FileReadError.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Utilities.FileReadError.UserData">
            <summary>
            User data associated with the exception.
            </summary>	
        </member>
        <member name="M:Goedel.Utilities.FileReadError.#ctor(Goedel.Utilities.ExceptionData)">
            <summary>
            Construct instance for exception using a userdata parameter of
            type ExceptionData and the format string "The file {0} could not be read"
            </summary>		
            <param name="Object">User data</param>	
        </member>
        <member name="M:Goedel.Utilities.FileReadError.#ctor(Goedel.Utilities.ExceptionData,System.Exception)">
            <summary>
            Construct instance for exception using a userdata parameter of
            type ExceptionData and the format string "The file {0} could not be read"
            </summary>		
            <param name="Object">User data</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Utilities.FileReadError.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Utilities.Not64Bit">
            <summary>
            A call was made to a routine that has not yet been made
            64 bit clean with a value that exceeds the Int32 limits.
            </summary>
        </member>
        <member name="M:Goedel.Utilities.Not64Bit.#ctor">
            <summary>
            Construct instance for exception "Item too large"
            </summary>		
        </member>
        <member name="M:Goedel.Utilities.Not64Bit.#ctor(System.String)">
            <summary>
            Construct instance for exception "Item too large"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Utilities.Not64Bit.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Utilities.Not64Bit.UserData">
            <summary>
            User data associated with the exception.
            </summary>	
        </member>
        <member name="F:Goedel.Utilities.Not64Bit.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Utilities.EnvironmentVariableRequired">
            <summary>
            </summary>
        </member>
        <member name="M:Goedel.Utilities.EnvironmentVariableRequired.#ctor">
            <summary>
            Construct instance for exception "A required environment variable is undefined."
            </summary>		
        </member>
        <member name="M:Goedel.Utilities.EnvironmentVariableRequired.#ctor(System.String)">
            <summary>
            Construct instance for exception "A required environment variable is undefined."
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Utilities.EnvironmentVariableRequired.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Utilities.EnvironmentVariableRequired.UserData">
            <summary>
            User data associated with the exception.
            </summary>	
        </member>
        <member name="M:Goedel.Utilities.EnvironmentVariableRequired.#ctor(Goedel.Utilities.ExceptionData)">
            <summary>
            Construct instance for exception using a userdata parameter of
            type ExceptionData and the format string "The environment variable {0} must be defined"
            </summary>		
            <param name="Object">User data</param>	
        </member>
        <member name="M:Goedel.Utilities.EnvironmentVariableRequired.#ctor(Goedel.Utilities.ExceptionData,System.Exception)">
            <summary>
            Construct instance for exception using a userdata parameter of
            type ExceptionData and the format string "The environment variable {0} must be defined"
            </summary>		
            <param name="Object">User data</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Utilities.EnvironmentVariableRequired.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Utilities.ExpectedSuccess">
            <summary>
            </summary>
        </member>
        <member name="M:Goedel.Utilities.ExpectedSuccess.#ctor">
            <summary>
            Construct instance for exception "Service request failed when it should have succeded"
            </summary>		
        </member>
        <member name="M:Goedel.Utilities.ExpectedSuccess.#ctor(System.String)">
            <summary>
            Construct instance for exception "Service request failed when it should have succeded"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Utilities.ExpectedSuccess.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Utilities.ExpectedSuccess.UserData">
            <summary>
            User data associated with the exception.
            </summary>	
        </member>
        <member name="F:Goedel.Utilities.ExpectedSuccess.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Utilities.ExpectedError">
            <summary>
            </summary>
        </member>
        <member name="M:Goedel.Utilities.ExpectedError.#ctor">
            <summary>
            Construct instance for exception "Service request succeeded when it should have returned an error"
            </summary>		
        </member>
        <member name="M:Goedel.Utilities.ExpectedError.#ctor(System.String)">
            <summary>
            Construct instance for exception "Service request succeeded when it should have returned an error"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Utilities.ExpectedError.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Utilities.ExpectedError.UserData">
            <summary>
            User data associated with the exception.
            </summary>	
        </member>
        <member name="F:Goedel.Utilities.ExpectedError.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Utilities.Linewrap">
            <summary>
            Wrap xml output to fit within a line.
            </summary>
        </member>
        <member name="M:Goedel.Utilities.Linewrap.Wrap(System.String,System.Int32)">
            <summary>
            Wrap text to fit a line without breaking words.
            </summary>
            <param name="Input">The input string.</param>
            <param name="Length">Maximum line length</param>
            <returns>The wrapped string.</returns>
        </member>
        <member name="T:Goedel.Utilities.NumberSplit">
            <summary>
            Utilities to split an integer value to byte chunks
            </summary>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.GetLast(System.Array,System.Int32,System.Int32)">
            <summary>
            Calculate the upper bound for an array index given a specified first position and
            length.
            </summary>
            <param name="Array">The array for which the index value will be calculated.</param>
            <param name="First">The first element to be read.</param>
            <param name="Length">The maximum number of elements to be read. If less 
            than zero, defaults to the size of the array.</param>
            <returns>The upper bound, that is one higher than the last element to
            be read.</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte0(System.Int32)">
            <summary>
            Extract bits 0-7 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 0-7</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte1(System.Int32)">
            <summary>
            Extract bits 8-15 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 8-15</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte2(System.Int32)">
            <summary>
            Extract bits 16-23 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 16-23</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte3(System.Int32)">
            <summary>
            Extract bits 24-31 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 24-31</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte0(System.UInt32)">
            <summary>
            Extract bits 0-7 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 0-7</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte1(System.UInt32)">
            <summary>
            Extract bits 8-15 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 8-15</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte2(System.UInt32)">
            <summary>
            Extract bits 16-23 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 16-23</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte3(System.UInt32)">
            <summary>
            Extract bits 24-31 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 24-31</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.BigEndianInt(System.Byte[],System.Int32)">
            <summary>
            Convert an array of bytes in bigendian format to an unsigned integer value.
            </summary>
            <param name="Data">The data to convert</param>
            <param name="Count">The number of bytes to convert.</param>
            <returns>The integer value.</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.BigEndian(System.Int32)">
            <summary>
            Convert integer to bigendian array. That is with the most significant byte first.
            </summary>
            <param name="Data">Input</param>
            <returns>Output array</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.NetworkByte(System.Int32)">
            <summary>
            Convert integer to bigendian array. That is with the most significant byte first.
            This is a convenience alias for Bigendian.
            </summary>
            <param name="Data">Input</param>
            <returns>Output array</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.LittleEndian(System.Int32)">
            <summary>
            Convert integer to little endian array. That is with the most significant byte first.
            </summary>
            <param name="Data">Input</param>
            <returns>Output array</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.SetBigEndian(System.Byte[],System.Int32)">
            <summary>
            Set the values of a byte array from 32 bit integer in big endian order
            </summary>
            <param name="Array">Byte array to set, MUST be sufficiently large for input</param>
            <param name="Data">Data value to set</param>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.SetBigEndian(System.Byte[],System.UInt32)">
            <summary>
            Set the values of a byte array from 32 bit integer in big endian order
            </summary>
            <param name="Array">Byte array to set, MUST be sufficiently large for input</param>
            <param name="Data">Data value to set</param>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.SetBigEndian(System.Byte[],System.UInt64)">
            <summary>
            Set the values of a byte array from 64 bit integer in big endian order
            </summary>
            <param name="Array">Byte array to set, MUST be sufficiently large for input</param>
            <param name="Data">Data value to set</param>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.SetNetworkByte(System.Byte[],System.Int32)">
            <summary>
            Set the values of a byte array from 32 bit integer in big endian order
            </summary>
            <param name="Array">Byte array to set, MUST be sufficiently large for input</param>
            <param name="Data">Data value to set</param>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.SetLittleEndian(System.Byte[],System.Int32)">
            <summary>
            Set the values of a byte array from 32 bit integer in little endian order
            </summary>
            <param name="Array">Byte array to set, MUST be sufficiently large for input</param>
            <param name="Data">Data value to set</param>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte0(System.Int64)">
            <summary>
            Extract bits 0-7 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 0-7</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte1(System.Int64)">
            <summary>
            Extract bits 8-15 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 8-15</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte2(System.Int64)">
            <summary>
            Extract bits 16-23 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 16-23</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte3(System.Int64)">
            <summary>
            Extract bits 24-31 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 24-31</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte4(System.Int64)">
            <summary>
            Extract bits 32-39 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 32-39</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte5(System.Int64)">
            <summary>
            Extract bits 40-47 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 40-47</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte6(System.Int64)">
            <summary>
            Extract bits 48-55 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 48-55</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte7(System.Int64)">
            <summary>
            Extract bits 55-64 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 55-64</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte0(System.UInt64)">
            <summary>
            Extract bits 0-7 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 0-7</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte1(System.UInt64)">
            <summary>
            Extract bits 8-15 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 8-15</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte2(System.UInt64)">
            <summary>
            Extract bits 16-23 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 16-23</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte3(System.UInt64)">
            <summary>
            Extract bits 24-31 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 24-31</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte4(System.UInt64)">
            <summary>
            Extract bits 24-31 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 24-31</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte5(System.UInt64)">
            <summary>
            Extract bits 24-31 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 24-31</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte6(System.UInt64)">
            <summary>
            Extract bits 24-31 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 24-31</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.Byte7(System.UInt64)">
            <summary>
            Extract bits 24-31 from an integer value
            </summary>
            <param name="Data">Input</param>
            <returns>Bits 24-31</returns>
        </member>
        <member name="M:Goedel.Utilities.NumberSplit.BigEndian(System.UInt64)">
            <summary>
            Convert integer to bigendian array. That is with the most significant byte first.
            </summary>
            <param name="Data">Input</param>
            <returns>Output array</returns>
        </member>
        <member name="T:Goedel.Utilities.RFC3339">
            <summary>
            Conversion class to and from RFC3339 DateTime representation.
            </summary>
        </member>
        <member name="M:Goedel.Utilities.RFC3339.Digit(System.Char)">
            <summary>
            If C is a digit (0-9), return the numeric value. Otherwise return -1
            </summary>
            <param name="C">Character to convert</param>
            <returns>Integer value of character</returns>
        </member>
        <member name="M:Goedel.Utilities.RFC3339.ToRFC3339(System.DateTime)">
            <summary>
            Format a DateTime value in RFC3339 format.
            </summary>
            <param name="DateTime">The time to convert.</param>
            <returns>The converted date time</returns>
        </member>
        <member name="M:Goedel.Utilities.RFC3339.FromRFC3339(System.String)">
            <summary>
            Parse an RFC3339 format date time value.
            </summary>
            <param name="Text">The date to parse</param>
            <returns>The date value</returns>
        </member>
        <member name="T:Goedel.Utilities.Unique">
            <summary>
            Class that provides a number guaranteed to be unique for a particular run.
            </summary>
        </member>
        <member name="M:Goedel.Utilities.Unique.Next">
            <summary>
            Create a filename that is guaranteed to be unique for this particular run.
            </summary>
            <returns>A string containing successive integers 1, 2, 3,...</returns>
        </member>
    </members>
</doc>
