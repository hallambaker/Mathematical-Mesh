<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Goedel.Cryptography</name>
    </assembly>
    <members>
        <member name="T:Goedel.Cryptography.AlgorithmID">
            <summary>
            Extension class to manage OID and XML references.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.AlgorithmID.XMLToID">
            <summary>
            Mapping of XML DigSig entries to CryptoAlgorithmID
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.AlgorithmID.OIDToID">
            <summary>
            Mapping of OID entries to CryptoAlgorithmID. This is populated with values for 
            the common algorithms (SHA-2 / AES / RSA / HMAC. Additional values may be added
            by providers as they register additional algorithms.
            </summary>
            
        </member>
        <member name="M:Goedel.Cryptography.AlgorithmID.GetDigest(Goedel.Cryptography.CryptoAlgorithmID,System.Byte[])">
            <summary>
            Calculate the digest of <paramref name="Input"/> using digest <paramref name="CryptoAlgorithmID"/>.
            </summary>
            <param name="CryptoAlgorithmID">The digest algorithm to use.</param>
            <param name="Input">The data to be digested.</param>
            <returns>The digest value.</returns>
        </member>
        <member name="M:Goedel.Cryptography.AlgorithmID.Add(Goedel.Cryptography.CryptoAlgorithmID,System.String,System.String)">
            <summary>
            Add an algorithm entry. Note this is not thread safe and is only intended to be 
            called during class library initialization.
            </summary>
            <param name="ID">CryptoAlgorithmID Identifier</param>
            <param name="OID">OID</param>
            <param name="XML">XML Signature and Encryption algorithm identifier</param>
        </member>
        <member name="M:Goedel.Cryptography.AlgorithmID.FromXMLID(System.String)">
            <summary>
            Get the CryptoAlgorithmID corresponding to an XML DigSig URL
            </summary>
            <param name="URL">XML Signature and Encryption algorithm identifier</param>
            <returns>Algorithm Identifier</returns>
        </member>
        <member name="M:Goedel.Cryptography.AlgorithmID.ToXMLID(Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Get the XML DigSig URL corresponding to a CryptoAlgorithmID
            </summary>
            <param name="ID">Algorithm Identifier</param>
            <returns>XML Signature and Encryption algorithm identifier</returns>
        </member>
        <member name="M:Goedel.Cryptography.AlgorithmID.FromOID(System.String)">
            <summary>
            Get the CryptoAlgorithmID corresponding to an XML DigSig URL
            </summary>
            <param name="URL">XML Signature and Encryption algorithm identifier</param>
            <returns>Algorithm Identifier</returns>
        </member>
        <member name="M:Goedel.Cryptography.AlgorithmID.ToOID(Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Get the XML DigSig URL corresponding to a CryptoAlgorithmID
            </summary>
            <param name="ID">Algorithm Identifier</param>
            <returns>XML Signature and Encryption algorithm identifier</returns>
        </member>
        <member name="M:Goedel.Cryptography.AlgorithmID.ToHashAlgorithmName(Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Get the .Net Standard Hash algorithm name.
            </summary>
            <param name="ID">The Goedel Algorithm identifier.</param>
            <returns>The corresponding .Net algorithm name.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Algorithms.Curve">
            <summary>
            Base Class for Elliptic Curve implementations
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Algorithms.CurveMontgomery">
            <summary>
            Montgomery Curve [v^2 = u^3 + A*u^2 + u] for 2^255-19
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.CurveMontgomery.U">
            <summary>The U value (we never use the V value)</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveMontgomery.Z">
            <summary>The projected Z coordinate</summary>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.CurveMontgomery.Bits">
            <summary>Sixe of the modular field in bits.</summary>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.CurveMontgomery.P">
            <summary>The paameter p</summary>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.CurveMontgomery.A24">
            <summary>The parameter A24</summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveMontgomery.Factory(System.Numerics.BigInteger)">
            <summary>
            Create a point from the specified U value.
            </summary>
            <param name="U">U value to convert</param>
            <returns>Created point</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveMontgomery.Multiply(System.Numerics.BigInteger)">
            <summary>
            Multiply a point by a scalar
            </summary>
            <param name="S">Scalar factor</param>
            <returns>The result of the multiplication</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveMontgomery.Cswap(System.Boolean,System.Numerics.BigInteger@,System.Numerics.BigInteger@)">
            <summary>
            Conditional swap in constant time.
            </summary>
            <param name="Swap">If false A'=A and B'=B on exit, if true A'=B and B'=A on exit</param>
            <param name="A">First parameter</param>
            <param name="B">Second parameter</param>
        </member>
        <member name="T:Goedel.Cryptography.Algorithms.CurveMontgomery25519">
            <summary>
            Montgomery Curve [v^2 = u^3 + A*u^2 + u] for 2^255-19
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveMontgomery25519.Encode">
            <summary>
            Encode the code point.
            </summary>
            <returns>The encoded format of the point</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveMontgomery25519.Factory(System.Numerics.BigInteger)">
            <summary>
            Create a point from the specified U value.
            </summary>
            <param name="U">The U value</param>
            <returns>Created point</returns>
        </member>
        <member name="T:Goedel.Cryptography.Algorithms.CurveMontgomery448">
            <summary>
            Montgomery Curve [v^2 = u^3 + A*u^2 + u] for 2^448 - 2^224 -1
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveMontgomery448.Encode">
            <summary>
            Encode the code point.
            </summary>
            <returns>The encoded format of the point</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveMontgomery448.Factory(System.Numerics.BigInteger)">
            <summary>
            Create a point from the specified U value.
            </summary>
            <param name="U">The U value</param>
            <returns>Created point</returns>
        </member>
        <member name="T:Goedel.Cryptography.Algorithms.CurveEdwards">
            <summary>
            Edwards Curve [x^2 = (y^2 - 1) / (d y^2 + 1) (mod p)] for 2^255-19
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards.X">
            <summary>The X coordinate</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards.Y">
            <summary>The Y coordinate</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards.Z">
            <summary>The projected Z coordinate</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards.Prime">
            <summary>The modulus, q = 2^255 - 19</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards.CurveConstrantD">
            <summary>The modulus, q = 2^255 - 19</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards.SqrtMinus1">
            <summary>The modulus, q = 2^255 - 19</summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards.Add(Goedel.Cryptography.Algorithms.CurveEdwards)">
            <summary>
            Add this point to a second point
            </summary>
            <param name="P2">Second point</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards.Equal(Goedel.Cryptography.Algorithms.CurveEdwards)">
            <summary>Test to see if two points on a curve are equal</summary>
            <param name="Q">The Q parameter of the curve.</param>
            <returns>True if the points are equal, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards.RecoverX(System.Boolean)">
            <summary>
            Recover the X coordinate from the Y value and sign of X.
            </summary>
            <param name="X0">If true X is odd, otherwise, X is even.</param>
            <returns>The X coordinate.</returns>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards.ZInv">
            <summary>Modular multiplicative inverse of Z</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards.X0">
            <summary>X translated to fixed coordinates</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards.Y0">
            <summary>Y translated to fixed coordinates</summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards.Translate(System.Numerics.BigInteger@,System.Numerics.BigInteger@)">
            <summary>
            Convert back from 3D to 2D representation
            </summary>
            <param name="Xout">The X value</param>
            <param name="Yout">The Y value</param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards.Double">
            <summary>
            Replace the current point value with the current value added to itself
            (used to implement multiply)
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards.Accumulate(Goedel.Cryptography.Algorithms.CurveEdwards)">
            <summary>
            Add two points
            </summary>
            <param name="Point">Second point</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Algorithms.DomainParameters">
            <summary>
            Specifies the curve parameters for a Montgomery or Edwards Elliptic Curve
            v^2 = u^3 + A*u^2 + u
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.DomainParameters.P">
            <summary>The prime field</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.DomainParameters.Bits">
            <summary>The number of bits in the prime field</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.DomainParameters.A">
            <summary>The Montgomery curve coeffient A</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.DomainParameters.A24">
            <summary>The Montgomery curve coeffient constant = (A-2) / 4</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.DomainParameters.D">
            <summary>The Edwards curve coeffient D</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.DomainParameters.U">
            <summary>The Montgomery initial point U value</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.DomainParameters.By">
            <summary>The Edwards curve generator Y coordinate</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.DomainParameters.SqrtMinus1">
            <summary>Square root of -1 mod p.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.DomainParameters.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Int32)">
            <summary>
            Public constructor
            </summary>
            <param name="p">The prime.</param>
            <param name="A">The curve coefficient.</param>
            <param name="U">The Montgomery initial point U value.</param>
            <param name="d">The Edwards curve coeffient D</param>
            <param name="By">The Edwards curve base point Y value.</param>
            <param name="Bits">The number of bits in the prime.</param>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.DomainParameters.Curve25519">
            <summary>
            Montgomery curve parameters for Curve25519S
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.DomainParameters.Curve448">
            <summary>
            Montgomery parameters for Curve 448
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Algorithms.HMACSHA3">
            <summary>
            
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.HMACSHA3.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="hashBitLength"></param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.HMACSHA3.#ctor(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="hashBitLength"></param>
        </member>
        <member name="T:Goedel.Cryptography.Algorithms.DiffeHellmanPublic">
            <summary>
            Implement Diffie Hellman Key operations. Note that this is a standalone
            class and does not inherit from the KeyPair class to provide hooks for
            implementing a provider, etc. This is in DHKeyPair.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.DiffeHellmanPublic.DHDomain">
            <summary>
            The shared domain parameters
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.DiffeHellmanPublic.Modulus">
            <summary>Group modulus</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.DiffeHellmanPublic.Generator">
            <summary>Generator</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.DiffeHellmanPublic.Public">
            <summary>Public Key</summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.DiffeHellmanPublic.#ctor(System.Int32)">
            <summary>
            Create a new set of Diffie Hellman group parameters.
            </summary>
            <param name="Bits">The number of bits, this identifies the group modulus </param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.DiffeHellmanPublic.#ctor(Goedel.Cryptography.PKIX.DHDomain,System.Nullable{System.Numerics.BigInteger})">
            <summary>
            Create a new set of Diffie Hellman parameters using the shared modulus, 
            a newly constructed generator and public and private keys.
            </summary>
            <param name="DHDomain">The shared parameters</param>
            <param name="Public">Optional public value</param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.DiffeHellmanPublic.#ctor(Goedel.Cryptography.Algorithms.DiffeHellmanPublic)">
            <summary>
            Clone the public components of the key pair <paramref name="Base"/>.
            </summary>
            <param name="Base">The key pair to copy.</param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.DiffeHellmanPublic.#ctor(Goedel.Cryptography.PKIX.PKIXPublicKeyDH)">
            <summary>
            Construct from public key parameters
            </summary>
            <param name="PKIXParameters">The key parameters</param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.DiffeHellmanPublic.Verify(Goedel.Cryptography.Algorithms.DiffeHellmanPublic)">
            <summary>
            Check that the Diffie Hellman parameters presented match those of this Key.
            </summary>
            <param name="Key">The key to verify</param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.DiffeHellmanPublic.Agreement">
            <summary>
            Create a new ephemeral private key and use it to perform a key
            agreement.
            </summary>
            <returns>The key agreement parameters, the public key value and the
            key agreement.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.DiffeHellmanPublic.Agreement(System.Numerics.BigInteger[])">
            <summary>
            Perform final stage in a Diffie Hellman Agreement to reduce an 
            array of carry returns to a single agreement result.
            </summary>
            <param name="Carry">The partial recryption results.</param>
            <returns>The key agreement value ZZ</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.DiffeHellmanPublic.Combine(Goedel.Cryptography.Algorithms.DiffeHellmanPublic)">
            <summary>
            Combine the two public keys to create a composite public key.
            </summary>
            <param name="Contribution">The key contribution.</param>
            <returns>The composite key</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.DiffeHellmanPublic.Combine(Goedel.Cryptography.IKeyAdvancedPublic)">
            <summary>
            Combine the two public keys to create a composite public key.
            </summary>
            <param name="Contribution">The key contribution.</param>
            <returns>The composite key</returns>
        </member>
        <member name="T:Goedel.Cryptography.Algorithms.DiffeHellmanPrivate">
            <summary>
            Represents a set of Diffie Hellman parameters.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.DiffeHellmanPrivate.Private">
            <summary>Private Key</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.DiffeHellmanPrivate.IsRecryption">
            <summary>If true, this key is part of a recryption set.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.DiffeHellmanPrivate.DiffeHellmanPublic">
            <summary>
            Return the public key.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.DiffeHellmanPrivate.#ctor(System.Int32)">
            <summary>
            Create a new set of Diffie Hellman parameters using the shared modulus, 
            a newly constructed generator and public and private keys.
            </summary>
            <param name="Bits">The number of bits in the modulus to be created. Valid values
            are 2048 and 4096</param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.DiffeHellmanPrivate.#ctor(Goedel.Cryptography.Algorithms.DiffeHellmanPublic)">
            <summary>
            Create a new set of Diffie Hellman parameters using the shared modulus, 
            a newly constructed generator and public and private keys.
            </summary>
            <param name="DiffeHellmanPublic">Public key to use to specify the
            modulus and generator</param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.DiffeHellmanPrivate.#ctor(Goedel.Cryptography.PKIX.PKIXPrivateKeyDH)">
            <summary>
            Create a new set of Diffie Hellman parameters using the shared modulus, 
            a newly constructed generator and public and private keys.
            </summary>
            <param name="PKIXPrivateKeyDH">Key parameters</param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.DiffeHellmanPrivate.Agreement(Goedel.Cryptography.IKeyAdvancedPublic)">
            <summary>
            Perform a Diffie Hellman Key Agreement to this private key
            </summary>
            <param name="Public">Set of newly created DH parameters for Alice</param>
            <returns>The key agreement value ZZ</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.DiffeHellmanPrivate.Agreement(Goedel.Cryptography.IKeyAdvancedPublic,System.Numerics.BigInteger)">
            <summary>
            Perform a Diffie Hellman Key Agreement to this private key
            </summary>
            <param name="Public">Set of newly created DH parameters for Alice</param>
            <param name="Carry">Recryption carry over value, to be combined with the
            result of this key agreement.</param>
            <returns>The key agreement value ZZ</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.DiffeHellmanPrivate.MakeRecryptionKeySet(System.Int32)">
            <summary>
            Make a recryption keyset by splitting the private key.
            </summary>
            <param name="Shares">Number of shares to create</param>
            <returns>Array shares.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.DiffeHellmanPrivate.Combine(Goedel.Cryptography.Algorithms.DiffeHellmanPrivate)">
            <summary>
            Combine the two public keys to create a composite public key.
            </summary>
            <param name="Contribution">The key contribution.</param>
            <returns>The composite key</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.DiffeHellmanPrivate.Combine(Goedel.Cryptography.IKeyAdvancedPrivate)">
            <summary>
            Combine the two public keys to create a composite public key.
            </summary>
            <param name="Contribution">The key contribution.</param>
            <returns>The composite key</returns>
        </member>
        <member name="T:Goedel.Cryptography.Algorithms.ResultDiffieHellman">
            <summary>
            Represent the result of a Diffie Hellman Key exchange.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.ResultDiffieHellman.Agreement">
            <summary>The key agreement result</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.ResultDiffieHellman.ASNAgreement">
            <summary>Wrap as an ASN.1 Structure</summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.ResultDiffieHellman.DER">
            <summary>The agreement as ASN.1 DER encoding</summary>
            <returns>The DER encoded value.</returns>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.ResultDiffieHellman.IKM">
            <summary>The key agreement result as a byte array</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.ResultDiffieHellman.EphemeralKeyPair">
            <summary>
            The Ephemeral public key
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Algorithms.Extension">
            <summary>
            Extension class.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.Extension.Digest(System.Security.Cryptography.HashAlgorithm,System.Byte[])">
            <summary>
            If <paramref name="buffer"/> is not null, present the entire contents to
            the digest function <paramref name="hashAlgorithm"/>.
            </summary>
            <param name="hashAlgorithm">The digest function to use.</param>
            <param name="buffer">The data to be digested.</param>
        </member>
        <member name="T:Goedel.Cryptography.Algorithms.CurveEdwards25519">
            <summary>
            Edwards Curve [x^2 = (y^2 - 1) / (d y^2 + 1) (mod p)] for 2^255-19
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards25519.T">
            <summary>
            Additional parameter used in affine projection
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.CurveEdwards25519.P">
            <summary>The modulus, q = 2^255 - 19</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards25519.Prime">
            <summary>The modulus, q = 2^255 - 19</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards25519.CurveConstrantD">
            <summary>The Curve Constant d</summary>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.CurveEdwards25519.D">
            <summary>The Curve Constant d</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards25519.SqrtMinus1">
            <summary>The square root of -1.</summary>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.CurveEdwards25519.Q">
            <summary>The small order subgroup q</summary>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.CurveEdwards25519._Base">
            <summary>The base point for the subgroup</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards25519.Base">
            <summary>The base point for the subgroup</summary>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.CurveEdwards25519._Neutral">
            <summary>The point P such that P + Q = Q for all Q</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards25519.Neutral">
            <summary>The point P such that P + Q = Q for all Q</summary>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.CurveEdwards25519.Bits">
            <summary>The number of bits to multiply</summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519.#ctor(System.Numerics.BigInteger,System.Boolean)">
            <summary>
            Construct a point from a Y coordinate and sign.
            </summary>
            <param name="Y">The Y coordinate</param>
            <param name="X0">The sign of X</param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519.Copy">
            <summary>
            Crete a new point with the same parameters as this.
            </summary>
            <returns>The new point</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519.Multiply(System.Numerics.BigInteger,Goedel.Cryptography.Algorithms.CurveEdwards25519)">
            <summary>
            Multiply this point by a scalar
            </summary>
            <param name="S">Scalar factor</param>
            <param name="Neutral">The neutral point on the curve.</param>
            <returns>The result of the multiplication</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519.Multiply(System.Numerics.BigInteger)">
            <summary>
            Multiply this point by a scalar
            </summary>
            <param name="S">Scalar factor</param>
            <returns>The result of the multiplication</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519.Double">
            <summary>
            Replace the current point value with the current value added to itself
            (used to implement multiply)
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519.Add(Goedel.Cryptography.Algorithms.CurveEdwards25519,Goedel.Cryptography.Algorithms.CurveEdwards25519,System.Numerics.BigInteger@,System.Numerics.BigInteger@,System.Numerics.BigInteger@,System.Numerics.BigInteger@)">
            <summary>
            Add two points
            </summary>
            <param name="P1">First point</param>
            <param name="P2">Second point</param>
            <param name="X3"></param>
            <param name="Y3"></param>
            <param name="Z3"></param>
            <param name="T3"></param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519.Add(Goedel.Cryptography.Algorithms.CurveEdwards)">
            <summary>
            Add two points
            </summary>
            <param name="Point">Second point</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519.Accumulate(Goedel.Cryptography.Algorithms.CurveEdwards)">
            <summary>
            Add two points
            </summary>
            <param name="Point">Second point</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519.GetPublic(System.Numerics.BigInteger)">
            <summary>
            Generate the public parameter (a point on the curve)
            </summary>
            <param name="Private">The extended private key</param>
            <returns>The public key corresponding to Private (s.B)</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519.Encode">
            <summary>
            Encode this point in the compressed buffer representation
            </summary>
            <returns>The point encoded in the compressed buffer representation.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519.Decode(System.Byte[])">
            <summary>
            Construct a point on the curve from a buffer.
            </summary>
            <param name="Data">The encoded data</param>
            <returns>The point created</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519.HashModQ(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Calculate the SHA-2-512 hash of the inputs, convert to an integer and reduce
            modulo the subgroup.
            </summary>
            <param name="A0">First data input, ignored if null</param>
            <param name="A1">Second data input, ignored if null</param>
            <param name="A2">Third data input, ignored if null</param>
            <param name="A3">Fourth data input, ignored if null</param>
            <returns>The SHA-2-512 hash of the inputs as a big integer reduced modulo the sub group</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519.VerifySignature(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Verify a signature on a message according to RFC8032.
            </summary>
            <remarks>This method does not prehash the message data since if
            prehashing is desired, it is because the data needs to be hashed
            before being presented.</remarks>
            <param name="Public">The public key</param>
            <param name="Message">The message data.</param>
            <param name="Signature">The encoded signature data.</param>
            <param name="Context">Context value, if used.</param>
            <returns>True if signature verification succeeded, otherwise false.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Algorithms.CurveEdwards25519Public">
            <summary>
            Manages the public key
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards25519Public.Public">
            <summary>The public key, i.e. a point on the curve</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards25519Public.Encoding">
            <summary>Encoded form of the public key.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519Public.#ctor(Goedel.Cryptography.Algorithms.CurveEdwards25519)">
            <summary>
            Construct provider from public key parameters.
            </summary>
            <param name="public">The public key values.</param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519Public.#ctor(System.Byte[])">
            <summary>
            Construct provider from public key data.
            </summary>
            <param name="encoding">The encoded public key value.</param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519Public.Agreement">
            <summary>
            Create a new ephemeral private key and use it to perform a key
            agreement.
            </summary>
            <returns>The key agreement parameters, the public key value and the
            key agreement.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519Public.Verify(Goedel.Cryptography.Algorithms.CurveEdwards25519Public)">
            <summary>
            Check that the Diffie Hellman parameters presented match those of this Key.
            </summary>
            <param name="Key">The key to verify.</param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519Public.Agreement(Goedel.Cryptography.Algorithms.CurveEdwards25519[])">
            <summary>
            Perform final stage in a Diffie Hellman Agreement to reduce an 
            array of carry returns to a single agreement result.
            </summary>
            <param name="Carry">The partial recryption results.</param>
            <returns>The key agreement value ZZ</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519Public.Combine(Goedel.Cryptography.Algorithms.CurveEdwards25519Public)">
            <summary>
            Combine the two public keys to create a composite public key.
            </summary>
            <param name="contribution">The key contribution.</param>
            <returns>The composite key</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519Public.Combine(Goedel.Cryptography.IKeyAdvancedPublic)">
            <summary>
            Combine the two public keys to create a composite public key.
            </summary>
            <param name="Contribution">The key contribution.</param>
            <returns>The composite key</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519Public.Verify(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Verify a signature on a message according to RFC8032.
            </summary>
            <remarks>This method does not prehash the message data since if
            prehashing is desired, it is because the data needs to be hashed
            before being presented.</remarks>
            <param name="Public">The public key</param>
            <param name="Message">The message data.</param>
            <param name="Signature">The encoded signature data.</param>
            <param name="Context">Context value, if used.</param>
            <returns>True if signature verification succeeded, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519Public.Verify(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Verify a signature on a message according to RFC8032.
            </summary>
            <remarks>This method does not prehash the message data since if
            prehashing is desired, it is because the data needs to be hashed
            before being presented.</remarks>
            <param name="Message">The message data.</param>
            <param name="Signature">The encoded signature data.</param>
            <param name="Context">Context value, if used.</param>
            <returns>True if signature verification succeeded, otherwise false.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Algorithms.CurveEdwards25519Private">
            <summary>
            Manages the private key.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards25519Private.Secret">
            <summary>The random secret used to generate the private key</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards25519Private.Private">
            <summary>The private key, i.e. a scalar</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards25519Private.PreSecret">
            <summary>Hash of the secret value bytes [0:31]</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards25519Private.HashPrefix">
            <summary>Hash of the secret value bytes [31:63]</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards25519Private.PublicKey">
            <summary>The corresponding public key</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards25519Private.IsRecryption">
            <summary>If true, this is a recryption key.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519Private.#ctor">
            <summary>
            Generate a new private key
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519Private.#ctor(System.Byte[])">
            <summary>
            Construct a private key from the specified binary representation.
            </summary>
            <param name="Secret">The byte array used to generate the secret key</param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519Private.#ctor(System.Numerics.BigInteger)">
            <summary>
            Construct a private key from the specified input buffer.
            </summary>
            <param name="Private">The private key</param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519Private.#ctor(System.Byte[],Goedel.Cryptography.Algorithms.CurveEdwards25519@)">
            <summary>
            Generate a new private key using the specified Nonce value to generate
            a Witness value for the private key.
            </summary>
            <param name="Blind">The blinding value n.</param>
            <param name="Witness">The point [s-SHA512(n)]B where s is the secret key.</param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519Private.VerifyWitness(System.Byte[],Goedel.Cryptography.Algorithms.CurveEdwards25519,Goedel.Cryptography.Algorithms.CurveEdwards25519)">
            <summary>
            Verify that a witness value was used to construct a public key.
            </summary>
            <param name="Blind">The blinding value.</param>
            <param name="Witness">The witness value.</param>
            <param name="Public">The resulting private key.</param>
            <returns>True if the value was correctly constructed using the specified witness, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519Private.ExtractPrivate(System.Byte[])">
            <summary>
            Create the extended private key. The Private key is extended using the
            hash value.
            </summary>
            <param name="Hash">The hash value</param>
            <returns>The private key.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519Private.ValidatePrivateBytes(System.Byte[])">
            <summary>
            Create the extended private key. The Private key is extended using the
            hash value.
            </summary>
            <param name="Hash">The hash value</param>
            <returns>The private key.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519Private.Sign(System.Byte[],System.Byte[])">
            <summary>
            Sign a message using the public key according to RFC8032
            </summary>
            <remarks>This method does not prehash the message data since if
            prehashing is desired, it is because the data needs to be hashed
            before being presented.</remarks>
            <param name="Message">The message</param>
            <param name="Context">Context value, if used.</param>
            <returns>The encoded signature data</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519Private.Agreement(Goedel.Cryptography.Algorithms.CurveEdwards25519Public)">
            <summary>
            Perform a Diffie Hellman Key Agreement to a public key
            </summary>
            <param name="Public">Public key parameters</param>
            <returns>The key agreement value ZZ</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519Private.Agreement(Goedel.Cryptography.Algorithms.CurveEdwards25519Public,Goedel.Cryptography.Algorithms.CurveEdwards25519)">
            <summary>
            Perform a Diffie Hellman Key Agreement to a private key
            </summary>
            <param name="Public">Public key parameters</param>
            <param name="Carry">Recryption carry over value, to be combined with the
            result of this key agreement.</param>
            <returns>The key agreement value ZZ</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519Private.MakeRecryptionKeySet(System.Int32)">
            <summary>
            Split the private key into a number of recryption keys.
            <para>
            Since the
            typical use case for recryption requires both parts of the generated machine
            to be used on a machine that is not the machine on which they are created, the
            key security level is always to permit export.</para>
            </summary>
            <param name="shares">The number of keys to create.</param>
            <returns>The created keys</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519Private.Combine(Goedel.Cryptography.Algorithms.CurveEdwards25519Private)">
            <summary>
            Combine the two public keys to create a composite public key.
            </summary>
            <param name="Contribution">The key contribution.</param>
            <returns>The composite key</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519Private.Combine(Goedel.Cryptography.IKeyAdvancedPrivate)">
            <summary>
            Combine the two public keys to create a composite public key.
            </summary>
            <param name="Contribution">The key contribution.</param>
            <returns>The composite key</returns>
        </member>
        <member name="T:Goedel.Cryptography.Algorithms.CurveEdwards25519Result">
            <summary>
            Represent the result of a Diffie Hellman Key exchange.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.CurveEdwards25519Result.Agreement">
            <summary>The key agreement result</summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards25519Result.DER">
            <summary>The agreement as ASN.1 DER encoding</summary>
            <returns>The DER encoded value.</returns>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards25519Result.IKM">
            <summary>The key agreement result as a byte array</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards25519Result.EphemeralKeyPair">
            <summary>
            The Ephemeral public key
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.CurveEdwards25519Result.Carry">
            <summary>Carry from proxy recryption efforts</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards25519Result.Public">
            <summary>Public key generated by ephemeral key generation.</summary>
        </member>
        <member name="T:Goedel.Cryptography.Algorithms.CurveEdwards448">
            <summary>
            Edwards Curve [x^2 = (y^2 - 1) / (d y^2 + 1) (mod p)] for 2^448 - 2^224 - 1
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.CurveEdwards448.P">
            <summary>The modulus, p = 2^448 - 2^224 - 1</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards448.Prime">
            <summary>The modulus, p = 2^448 - 2^224 - 1</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards448.CurveConstrantD">
            <summary>The Curve Constant d</summary>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.CurveEdwards448.D">
            <summary>The Curve Constant d</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards448.SqrtMinus1">
            <summary>The square root of -1.</summary>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.CurveEdwards448.Q">
            <summary>The small order subgroup q</summary>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.CurveEdwards448._Base">
            <summary>The base point for the subgroup</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards448.Base">
            <summary>The base point for the subgroup</summary>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.CurveEdwards448._Neutral">
            <summary>The point P such that P + Q = Q for all Q</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards448.Neutral">
            <summary>The point P such that P + Q = Q for all Q</summary>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.CurveEdwards448.Bits">
            <summary>The number of bits to multiply</summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448.#ctor(System.Numerics.BigInteger,System.Boolean)">
            <summary>
            Construct a point from a Y coordinate and sign.
            </summary>
            <param name="Y">The Y coordinate</param>
            <param name="X0">The sign of X</param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448.RecoverX(System.Boolean)">
            <summary>
            Recover the X coordinate from the Y value and sign of X.
            </summary>
            <param name="X0">If true X is odd, otherwise, X is even.</param>
            <returns>The X coordinate value.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448.Copy">
            <summary>
            Crete a new point with the same parameters as this.
            </summary>
            <returns>The copied point.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448.Multiply(System.Numerics.BigInteger)">
            <summary>
            Multiply this point by a scalar
            </summary>
            <param name="S">Scalar factor</param>
            <returns>The result of the multiplication</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448.Double">
            <summary>
            Replace the current point value with the current value added to itself
            (used to implement multiply)
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448.Add(Goedel.Cryptography.Algorithms.CurveEdwards448,Goedel.Cryptography.Algorithms.CurveEdwards448,System.Numerics.BigInteger@,System.Numerics.BigInteger@,System.Numerics.BigInteger@)">
            <summary>
            Add two points
            </summary>
            <param name="P1">First point</param>
            <param name="P2">Second point</param>
            <param name="X3"></param>
            <param name="Y3"></param>
            <param name="Z3"></param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448.Add(Goedel.Cryptography.Algorithms.CurveEdwards)">
            <summary>
            Add two points
            </summary>
            <param name="Point">Second point</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448.Accumulate(Goedel.Cryptography.Algorithms.CurveEdwards)">
            <summary>
            Add two points
            </summary>
            <param name="Point">Second point</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448.GetPublic(System.Numerics.BigInteger)">
            <summary>
            Generate the public parameter (a point on the curve)
            </summary>
            <param name="Private">The extended private key</param>
            <returns>The public key corresponding to Private (s.B)</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448.Encode">
            <summary>
            Encode this point in the compressed buffer representation
            </summary>
            <returns>The encoded point.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448.Decode(System.Byte[])">
            <summary>
            Construct a point on the curve from a buffer.
            </summary>
            <param name="Data">The encoded data</param>
            <returns>The point created</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448.HashModQ(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Calculate the SHA-2-512 hash of the inputs, convert to an integer and reduce
            modulo the subgroup. This is completely wrong of course because the spec requires
            SHA-3 SHAKE-256
            </summary>
            <param name="A0">First data input, ignored if null</param>
            <param name="A1">Second data input, ignored if null</param>
            <param name="A2">Third data input, ignored if null</param>
            <param name="A3">Fourth data input, ignored if null</param>
            <returns>The hashed and reduced inputs.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448.VerifySignature(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Verify a signature on a message according to RFC8032.
            </summary>
            <remarks>This method does not prehash the message data since if
            prehashing is desired, it is because the data needs to be hashed
            before being presented.</remarks>
            <param name="Public">The public key</param>
            <param name="Message">The message data.</param>
            <param name="Signature">The encoded signature data.</param>
            <param name="Context">Context value, if used.</param>
            <returns>True if signature verification succeeded, otherwise false.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Algorithms.CurveEdwards448Public">
            <summary>
            Manages the public key
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards448Public.Public">
            <summary>The public key, i.e. a point on the curve</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards448Public.Encoding">
            <summary>Encoded form of the public key.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448Public.#ctor(Goedel.Cryptography.Algorithms.CurveEdwards448)">
            <summary>
            Construct from public key parameters.
            </summary>
            <param name="Public">The public key.</param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448Public.#ctor(System.Byte[])">
            <summary>
            Construct from binary encoded form.
            </summary>
            <param name="Encoding">The binary encoded public key.</param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448Public.Verify(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Verify a signature over the purported data digest.
            </summary>
            <param name="Signature">The signature blob value.</param>
            <param name="Context">Additional data added to the signature scope
            for protocol isolation.</param>
            <param name="Digest">The digest value to be verified.</param>
            <returns>True if the signature is valid, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448Public.Agreement">
            <summary>
            Create a new ephemeral private key and use it to perform a key
            agreement.
            </summary>
            <returns>The key agreement parameters, the public key value and the
            key agreement.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448Public.Agreement(Goedel.Cryptography.Algorithms.CurveEdwards448[])">
            <summary>
            Perform final stage in a Diffie Hellman Agreement to reduce an 
            array of carry returns to a single agreement result.
            </summary>
            <param name="Carry">The partial recryption results.</param>
            <returns>The key agreement value ZZ</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448Public.Combine(Goedel.Cryptography.Algorithms.CurveEdwards448Public)">
            <summary>
            Combine the two public keys to create a composite public key.
            </summary>
            <param name="Contribution">The key contribution.</param>
            <returns>The composite key</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448Public.Combine(Goedel.Cryptography.IKeyAdvancedPublic)">
            <summary>
            Combine the two public keys to create a composite public key.
            </summary>
            <param name="Contribution">The key contribution.</param>
            <returns>The composite key</returns>
        </member>
        <member name="T:Goedel.Cryptography.Algorithms.CurveEdwards448Private">
            <summary>
            Manages the private key.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards448Private.Secret">
            <summary>The random secret used to generate the private key</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards448Private.Private">
            <summary>The private key, i.e. a scalar</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards448Private.PreSecret">
            <summary>Hash of the secret value bytes [0:31]</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards448Private.HashPrefix">
            <summary>Hash of the secret value bytes [31:63]</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards448Private.Public">
            <summary>The corresponding public key</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards448Private.Encoding">
            <summary>The wire encoding. Null if the key is not exportable</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards448Private.IsRecryption">
            <summary>If true, this is a recryption key.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448Private.#ctor(System.Boolean)">
            <summary>
            Generate a new private key
            </summary>
            <param name="Exportable">If true, the private key is exportable</param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448Private.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Construct a private key from the specified binary representation.
            </summary>
            <param name="Secret">The byte array used to generate the secret key</param>
            <param name="Exportable">If true, the private key is exportable</param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448Private.#ctor(System.Numerics.BigInteger,System.Boolean)">
            <summary>
            Construct a private key from the specified input buffer.
            </summary>
            <param name="Private">The private key</param>
            <param name="Exportable">If true, the private key is exportable</param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448Private.#ctor(System.Byte[],Goedel.Cryptography.Algorithms.CurveEdwards448@,System.Boolean)">
            <summary>
            Generate a new private key using the specified Nonce value to generate
            a Witness value for the private key.
            </summary>
            <param name="Blind">The blinding value n.</param>
            <param name="Witness">The point [s-SHA512(n)]B where s is the secret key.</param>
            <param name="Exportable">If true, the private key is exportable</param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448Private.VerifyWitness(System.Byte[],Goedel.Cryptography.Algorithms.CurveEdwards448,Goedel.Cryptography.Algorithms.CurveEdwards448)">
            <summary>
            Verify that a witness value was used to construct a public key.
            </summary>
            <param name="Blind">The blinding value.</param>
            <param name="Witness">The witness value.</param>
            <param name="Public">The resulting private key.</param>
            <returns>True if the value was correctly constructed using the specified witness, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448Private.ExtractPrivate(System.Byte[])">
            <summary>
            Create the extended private key. The Private key is extended using the
            hash value.
            </summary>
            <param name="Hash">The hash value</param>
            <returns>The private key.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448Private.ValidatePrivateBytes(System.Byte[])">
            <summary>
            Create the extended private key. The Private key is extended using the
            hash value.
            </summary>
            <param name="Hash">The hash value</param>
            <returns>True if the private key is valid, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448Private.Sign(System.Byte[],System.Byte[])">
            <summary>
               Sign a message using the public key according to RFC8032
               
               The inputs to the signing procedure is the private key, a 57-octet
               string, a flag F, which is 0 for Ed448, 1 for Ed448ph, context C of
               at most 255 octets, and a message M of arbitrary size.
            
               1.  Hash the private key, 57 octets, using SHAKE256(x, 114).  Let h
                   denote the resulting digest.Construct the secret scalar s from
                   the first half of the digest, and the corresponding public key A,
                   as described in the previous section.Let prefix denote the
                   second half of the hash digest, h[57],..., h[113].
            
               2.  Compute SHAKE256(dom4(F, C) || prefix || PH(M), 114), where M is
                   the message to be signed, F is 1 for Ed448ph, 0 for Ed448, and C
                   is the context to use.Interpret the 114-octet digest as a
                   little-endian integer r.
            
               3.  Compute the point[r] B.  For efficiency, do this by first
                   reducing r modulo L, the group order of B.Let the string R be
                   the encoding of this point.
            
               4.  Compute SHAKE256(dom4(F, C) || R || A || PH(M), 114), and
                   interpret the 114-octet digest as a little-endian integer k.
            
               5.  Compute S = (r + k * s) mod L.For efficiency, again reduce k
                   modulo L first.
            
               6.  Form the signature of the concatenation of R (57 octets) and the
                   little-endian encoding of S(57 octets; the ten most significant
                  bits of the final octets are always zero).
            </summary>
            <remarks>This method does not prehash the message data since if
            prehashing is desired, it is because the data needs to be hashed
            before being presented.</remarks>
            <param name="Message">The message</param>
            <param name="Context">Context value, if used.</param>
            <returns>The encoded signature data</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448Private.Agreement(Goedel.Cryptography.Algorithms.CurveEdwards448Public)">
            <summary>
            Perform a Diffie Hellman Key Agreement to a public key
            </summary>
            <param name="Public">Public key parameters</param>
            <returns>The key agreement value ZZ</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448Private.Agreement(Goedel.Cryptography.Algorithms.CurveEdwards448Public,Goedel.Cryptography.Algorithms.CurveEdwards448)">
            <summary>
            Perform a Diffie Hellman Key Agreement to a private key
            </summary>
            <param name="Public">Public key parameters</param>
            <param name="Carry">Recryption carry over value, to be combined with the
            result of this key agreement.</param>
            <returns>The key agreement value ZZ</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448Private.MakeRecryptionKeySet(System.Int32)">
            <summary>
            Split the private key into a number of recryption keys.
            <para>
            Since the
            typical use case for recryption requires both parts of the generated machine
            to be used on a machine that is not the machine on which they are created, the
            key security level is always to permit export.</para>
            </summary>
            <param name="Shares">The number of keys to create.</param>
            <returns>The created keys</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448Private.Combine(Goedel.Cryptography.Algorithms.CurveEdwards448Private)">
            <summary>
            Combine the two public keys to create a composite public key.
            </summary>
            <param name="Contribution">The key contribution.</param>
            <returns>The composite key</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448Private.Combine(Goedel.Cryptography.IKeyAdvancedPrivate)">
            <summary>
            Combine the two public keys to create a composite public key.
            </summary>
            <param name="Contribution">The key contribution.</param>
            <returns>The composite key</returns>
        </member>
        <member name="T:Goedel.Cryptography.Algorithms.CurveEdwards448Result">
            <summary>
            Represent the result of a Diffie Hellman Key exchange.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.CurveEdwards448Result.Agreement">
            <summary>The key agreement result</summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveEdwards448Result.DER">
            <summary>
            The DER encoding of the data. This is the IKM octet sequence.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards448Result.IKM">
            <summary>The key agreement result as a byte array</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards448Result.EphemeralKeyPair">
            <summary>
            The Ephemeral public key
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveEdwards448Result.EphemeralKeyValue448">
            <summary>Public key generated by ephemeral key generation.</summary>
        </member>
        <member name="T:Goedel.Cryptography.Algorithms.CurveX25519Public">
            <summary>
            Manages the public key
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveX25519Public.Encoding">
            <summary>Encoded form of the public key.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveX25519Public.Combine(Goedel.Cryptography.IKeyAdvancedPublic)">
            <summary>
            Combine the two public keys to create a composite public key.
            </summary>
            <param name="contribution">The key contribution.</param>
            <returns>The composite key</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveX25519Public.#ctor(System.Byte[])">
            <summary>
            Construct provider from public key data.
            </summary>
            <param name="encoding">The encoded public key value.</param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveX25519Public.Agreement">
            <summary>
            Create a new ephemeral private key and use it to perform a key
            agreement.
            </summary>
            <returns>The key agreement parameters, the public key value and the
            key agreement.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Algorithms.CurveX25519Private">
            <summary>
            Manages the public key
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.CurveX25519Private.PublicKey">
            <summary>The public key, i.e. a point on the curve</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveX25519Private.Encoding">
            <summary>Encoded form of the public key.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveX25519Private.Combine(Goedel.Cryptography.IKeyAdvancedPrivate)">
            <summary>
            Combine the two private keys to create a composite public key.
            </summary>
            <param name="contribution">The key contribution.</param>
            <returns>The composite key</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveX25519Private.MakeRecryptionKeySet(System.Int32)">
            <summary>
            Split the private key into a number of recryption keys.
            <para>
            Since the
            typical use case for recryption requires both parts of the generated machine
            to be used on a machine that is not the machine on which they are created, the
            key security level is always to permit export.</para>
            </summary>
            <param name="shares">The number of keys to create.</param>
            <returns>The created keys</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveX25519Private.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Construct provider from private key data.
            </summary>
            <param name="encoding">The encoded private key value.</param>
            <param name="Exportable">If true, the private key is exportable</param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveX25519Private.#ctor(System.Boolean)">
            <summary>
            Generate a new private key
            </summary>
            <param name="exportable">If true, the private key is exportable</param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveX25519Private.Agreement(Goedel.Cryptography.Algorithms.CurveX25519Public)">
            <summary>
            Perform a Diffie Hellman Key Agreement to a public key
            </summary>
            <param name="Public">Public key parameters</param>
            <returns>The key agreement value ZZ</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveX25519Private.Agreement(Goedel.Cryptography.Algorithms.CurveX25519Public,Goedel.Cryptography.Algorithms.CurveMontgomery25519)">
            <summary>
            Perform a Diffie Hellman Key Agreement to a private key
            </summary>
            <param name="Public">Public key parameters</param>
            <param name="Carry">Recryption carry over value, to be combined with the
            result of this key agreement.</param>
            <returns>The key agreement value ZZ</returns>
        </member>
        <member name="T:Goedel.Cryptography.Algorithms.CurveX448Public">
            <summary>
            Manages the public key
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveX448Public.Encoding">
            <summary>Encoded form of the public key.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveX448Public.Combine(Goedel.Cryptography.IKeyAdvancedPublic)">
            <summary>
            Combine the two public keys to create a composite public key.
            </summary>
            <param name="contribution">The key contribution.</param>
            <returns>The composite key</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveX448Public.#ctor(System.Byte[])">
            <summary>
            Construct provider from public key data.
            </summary>
            <param name="encoding">The encoded public keyu value.</param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveX448Public.Agreement">
            <summary>
            Create a new ephemeral private key and use it to perform a key
            agreement.
            </summary>
            <returns>The key agreement parameters, the public key value and the
            key agreement.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Algorithms.CurveX448Private">
            <summary>
            Manages the public key
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.CurveX448Private.Public">
            <summary>The public key, i.e. a point on the curve</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveX448Private.Encoding">
            <summary>Encoded form of the public key.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveX448Private.Combine(Goedel.Cryptography.IKeyAdvancedPrivate)">
            <summary>
            Combine the two private keys to create a composite public key.
            <para>Since we are using a Montgomery curve with point compression, it is necessary to
            recover the v coordinate using the curve equation v^2 = u^3 + A*u^2 + u</para>
            https://en.wikipedia.org/wiki/Montgomery_curve
            </summary>
            <param name="contribution">The key contribution.</param>
            <returns>The composite key</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveX448Private.MakeRecryptionKeySet(System.Int32)">
            <summary>
            Split the private key into a number of recryption keys.
            <para>
            Since the
            typical use case for recryption requires both parts of the generated machine
            to be used on a machine that is not the machine on which they are created, the
            key security level is always to permit export.</para>
            </summary>
            <param name="shares">The number of keys to create.</param>
            <returns>The created keys</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveX448Private.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Construct provider from private key data.
            </summary>
            <param name="encoding">The encoded private key value.</param>
            <param name="exportable">If true, the private key is exportable</param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveX448Private.#ctor(System.Boolean)">
            <summary>
            Generate a new private key
            </summary>
            <param name="exportable">If true, the private key is exportable</param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveX448Private.Agreement(Goedel.Cryptography.Algorithms.CurveX448Public)">
            <summary>
            Perform a Diffie Hellman Key Agreement to a public key
            </summary>
            <param name="Public">Public key parameters</param>
            <returns>The key agreement value ZZ</returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveX448Private.Agreement(Goedel.Cryptography.Algorithms.CurveX448Public,Goedel.Cryptography.Algorithms.CurveMontgomery448)">
            <summary>
            Perform a Diffie Hellman Key Agreement to a private key
            </summary>
            <param name="Public">Public key parameters</param>
            <param name="Carry">Recryption carry over value, to be combined with the
            result of this key agreement.</param>
            <returns>The key agreement value ZZ</returns>
        </member>
        <member name="T:Goedel.Cryptography.Algorithms.CurveX25519Result">
            <summary>
            Represent the result of a Diffie Hellman Key exchange.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.CurveX25519Result.Agreement">
            <summary>The key agreement result</summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveX25519Result.DER">
            <summary>The agreement as ASN.1 DER encoding</summary>
            <returns>The DER encoded value.</returns>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveX25519Result.IKM">
            <summary>The key agreement result as a byte array</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveX25519Result.EphemeralKeyPair">
            <summary>
            The Ephemeral public key
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.CurveX25519Result.Carry">
            <summary>Carry from proxy recryption efforts</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveX25519Result.Public">
            <summary>Public key generated by ephemeral key generation.</summary>
        </member>
        <member name="T:Goedel.Cryptography.Algorithms.CurveX448Result">
            <summary>
            Represent the result of a Diffie Hellman Key exchange.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.CurveX448Result.Agreement">
            <summary>The key agreement result</summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.CurveX448Result.DER">
            <summary>The agreement as ASN.1 DER encoding</summary>
            <returns>The DER encoded value.</returns>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveX448Result.IKM">
            <summary>The key agreement result as a byte array</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveX448Result.EphemeralKeyPair">
            <summary>
            The Ephemeral public key
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.CurveX448Result.Carry">
            <summary>Carry from proxy recryption efforts</summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.CurveX448Result.Public">
            <summary>Public key generated by ephemeral key generation.</summary>
        </member>
        <member name="T:Goedel.Cryptography.Algorithms.SHA3">
            <summary>
            Computes the <see cref="T:System.Security.Cryptography.SHA3" /> hash for the input data.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.SHA3.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Security.Cryptography.SHA3" />.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.SHA3.PaddingValueStart">
            <summary>
            The Padding value
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.SHA3.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="hashBitLength"></param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.SHA3.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.SHA3.SizeInBytes">
            <summary>
            
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.SHA3.HashByteLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.SHA3.CanReuseTransform">
            <summary>
            
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.SHA3.ROL(System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.SHA3.AddToBuffer(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.SHA3.Hash">
            <summary>
            
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Algorithms.SHA3.HashSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.SHA3.KeccakF(System.UInt64[],System.Int32)">
            <summary>
            The core Keccak sponge function.
            </summary>
            <param name="inb">The input bytes</param>
            <param name="laneCount">The lane count</param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.SHA3.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="ibStart"></param>
            <param name="cbSize"></param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.SHA3.HashFinal">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Goedel.Cryptography.Algorithms.SHA3Managed">
            <summary>
            Computes the <see cref="T:System.Security.Cryptography.SHA3" /> hash algorithm for the input data using the managed library.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.SHA3Managed.#ctor(System.Int32)">
            <summary>
            SHA-3 implementation supporting 224, 256, 384 and 512 bits
            </summary>
            <param name="hashBitLength"></param>
        </member>
        <member name="T:Goedel.Cryptography.Algorithms.SHAKE128">
            <summary>
            SHAKE128 provider. This digest class supports varying bit size outputs
            in 64 bit increments with a work factor of 2^128
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.SHAKE128.#ctor(System.Int32)">
            <summary>
            SHAKE128 provider. This digest class supports varying bit size outputs
            in 64 bit increments with a work factor of 2^128
            </summary>
            <param name="hashBitLength">The number of output bits</param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.SHAKE128.Process(System.Byte[],System.Int32)">
            <summary>
            Convenience routine to preform one stop processing.
            </summary>
            <param name="Input">The input data</param>
            <param name="hashBitLength">The number of output bits</param>
            <returns>The digest value</returns>
        </member>
        <member name="T:Goedel.Cryptography.Algorithms.SHAKE256">
            <summary>
            SHAKE128 provider. This digest class supports varying bit size outputs
            in 64 bit increments with a work factor of 2^256
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.SHAKE256.#ctor(System.Int32)">
            <summary>
            SHAKE128 provider. This digest class supports varying bit size outputs
            in 64 bit increments with a work factor of 2^256
            </summary>
            <param name="hashBitLength">The number of output bits</param>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.SHAKE256.Process(System.Byte[],System.Int32)">
            <summary>
            Convenience routine to preform one stop processing.
            </summary>
            <param name="Input">The input data</param>
            <param name="hashBitLength">The number of output bits</param>
            <returns>The digest value</returns>
        </member>
        <member name="T:Goedel.Cryptography.Algorithms.XMSS">
            <summary>
            rfc8391
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.XMSS.MasterSecret">
            <summary>The master secret value</summary>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.XMSS.Private">
            <summary>The private key as a set of values</summary>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.XMSS.Public">
            <summary>The public key in canonical form</summary>
        </member>
        <member name="F:Goedel.Cryptography.Algorithms.XMSS.UDF">
            <summary>The public key fingerprint</summary>
        </member>
        <member name="M:Goedel.Cryptography.Algorithms.XMSS.#ctor">
            <summary>
            Default constructor, not yet implemented
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.BitIndex">
            <summary>
            Convert a BigInteger to a Bitfield and return successive bits
            beginning with the most significant and ending with the least.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.BitIndex.GoingDown">
            <summary>
            Returns true if there is further work to be completed, otherwise false.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.BitIndex.GoingUp">
            <summary>
            Returns true if there is further work to be completed, otherwise false.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.BitIndex.#ctor(System.Numerics.BigInteger,System.Int32,System.Boolean)">
            <summary>
            Construct from a big integte
            </summary>
            <param name="Value">The bit field value</param>
            <param name="Bits">The number of bits to process</param>
            <param name="Up">If true, count is performed in ascending order</param>
        </member>
        <member name="M:Goedel.Cryptography.BitIndex.Down">
            <summary>
            Return the value of the next bit as boolean value and advance the indicies
            </summary>
            <returns>True iff the next bit to be read is 1.</returns>
        </member>
        <member name="M:Goedel.Cryptography.BitIndex.Up">
            <summary>
            Return the value of the next bit as boolean value and advance the indicies
            </summary>
            <returns>True iff the next bit to be read is 1.</returns>
        </member>
        <member name="T:Goedel.Cryptography.BigNumber">
            <summary>
            Extension methods for manipulating BigIntegers
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.BigNumber.Duplicate(System.Byte[])">
            <summary>
            Duplicate the values in the array
            </summary>
            <param name="Source">The source array</param>
            <returns>A new array containing a copy of the elements in the source.</returns>
        </member>
        <member name="M:Goedel.Cryptography.BigNumber.Duplicate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Duplicate the values in the array
            </summary>
            <param name="Source">The source array</param>
            <param name="Index">The starting index for the copy</param>
            <param name="Length">The number of items to copy</param>
            <returns>A new array containing a copy of a selected range of the elements in the source.</returns>
        </member>
        <member name="M:Goedel.Cryptography.BigNumber.Random(System.Int32)">
            <summary>
            Return a positive random BigInteger that is strictly less than 2^bits.
            </summary>
            <param name="Bits">The number of bits in the output</param>
            <returns>The random value.</returns>
        </member>
        <member name="M:Goedel.Cryptography.BigNumber.BigIntegerLittleEndian(System.Byte[])">
            <summary>
            Convert an array of bytes in little endian format to a Big Integer
            </summary>
            <param name="Data">The data in little endian format.</param>
            <returns>The constructed integer</returns>
        </member>
        <member name="M:Goedel.Cryptography.BigNumber.BigIntegerBigEndian(System.Byte[])">
            <summary>
            Convert an array of bytes in big endian format to a Big Integer
            </summary>
            <param name="Data">The data in big endian format.</param>
            <returns>The constructed integer</returns>
        </member>
        <member name="M:Goedel.Cryptography.BigNumber.HexToBigInteger(System.String)">
            <summary>
            Create a Big Integer from a hexadecimal string constant. This is not optimized for
            speed since it is unlikely this will be called very often and may well 
            be optimized away. Note that the caller is responsible for making sure
            that the input is positive
            </summary>
            <param name="Text">The hexadecimal string to convert</param>
            <returns>The resulting integer</returns>
        </member>
        <member name="M:Goedel.Cryptography.BigNumber.DecimalToBigInteger(System.String)">
            <summary>
            Create a Big Integer from a decimal string constant. This is not optimized for
            speed since it is unlikely this will be called very often and may well 
            be optimized away. Note that the caller is responsible for making sure
            that the input is positive
            </summary>
            <param name="Text">The decimal value</param>
            <returns>The resulting integer</returns>
        </member>
        <member name="M:Goedel.Cryptography.BigNumber.ModularInverse(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Calculate the modular inverse of a number using the x(p-2) approach
            </summary>
            <param name="x">Value</param>
            <param name="p">Modulus</param>
            <returns>The modular inverse, i.e. the number y such that 
            (x * y) mod p = 1.</returns>
        </member>
        <member name="M:Goedel.Cryptography.BigNumber.ModularInverse(System.Int32,System.Numerics.BigInteger)">
            <summary>
            Calculate the modular inverse of a number using the x(p-2) approach
            </summary>
            <param name="x">Value</param>
            <param name="p">Modulus</param>
            <returns>The modular inverse, i.e. the number y such that 
            (x * y) mod p = 1.</returns>
        </member>
        <member name="M:Goedel.Cryptography.BigNumber.Mod(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Calculate the modulus of a number with correct handling for negative numbers.
            </summary>
            <param name="x">Value</param>
            <param name="p">Modulus</param>
            <returns>x mod p</returns>
        </member>
        <member name="M:Goedel.Cryptography.BigNumber.SqrtMinus1(System.Numerics.BigInteger)">
            <summary>
            Calculate the square root of -1 modulo p
            </summary>
            <param name="p">The modulus</param>
            <returns>A value x such that x*x mod p = -1 mod p</returns>
        </member>
        <member name="M:Goedel.Cryptography.BigNumber.Sqrt(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Nullable{System.Numerics.BigInteger},System.Nullable{System.Boolean})">
            <summary>
            Return a Square root of a number modulo a prime. 
            </summary>
            <param name="x2">The value</param>
            <param name="p">The modulus</param>
            <param name="SqrtMinus1">The value of the square root -1 mod p.</param>
            <param name="Odd">If specified, specifies whether X is odd (true) or even (false).</param>
            <returns>A value x such that x*x = x2.</returns>
            <exception cref="T:Goedel.Cryptography.InvalidOperation">Thrown if the value does not have a root.</exception>
        </member>
        <member name="M:Goedel.Cryptography.BigNumber.Sqrt8k5(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Nullable{System.Numerics.BigInteger},System.Nullable{System.Boolean})">
            <summary>
            Return a Square root of a number modulo the prime for the
            special case x2 % 8 == 5.
            </summary>
            <param name="x2">The value</param>
            <param name="p">The modulus</param>
            <param name="SqrtMinus1">The value of the square root -1 mod p.</param>
            <param name="Odd">If specified, specifies whether X is odd (true) or even (false).</param>
            <returns>A value x such that x*x = x2.</returns>
            <exception cref="T:Goedel.Cryptography.InvalidOperation">Thrown if the value does not have a root.</exception>
        </member>
        <member name="M:Goedel.Cryptography.BigNumber.Mod(System.Int32,System.Numerics.BigInteger)">
            <summary>
            Calculate the modulus of a number with correct handling for negative numbers.
            </summary>
            <param name="x">Value</param>
            <param name="p">Modulus</param>
            <returns>x mod p</returns>
        </member>
        <member name="M:Goedel.Cryptography.BigNumber.ToByteArrayLittleEndian(System.Numerics.BigInteger)">
            <summary>
            Convert <paramref name="bigInteger"/> to a byte array in little endian format.
            </summary>
            <param name="bigInteger">The integer to be converted.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:Goedel.Cryptography.BigNumber.ToByteArrayLittleEndian(System.Numerics.BigInteger,System.Int32)">
            <summary>
            Convert <paramref name="bigInteger"/> to a byte array in little endian format,
            padding the resulting array so that it is at least <paramref name="length"/>
            bytes in length.
            </summary>
            <param name="bigInteger">The integer to be converted.</param>
            <param name="length">The exact length of the result.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:Goedel.Cryptography.BigNumber.ToByteArrayBigEndian(System.Numerics.BigInteger,System.Int32)">
            <summary>
            Convert <paramref name="bigInteger"/> to a byte array in big endian format,
            padding the resulting array so that it is at least <paramref name="length"/>
            bytes in length.
            </summary>
            <param name="bigInteger">The integer to be converted.</param>
            <param name="length">The exact length of the result.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:Goedel.Cryptography.BigNumber.IsProbablePrime(System.Numerics.BigInteger,System.Int32)">
            <summary>
            Miller-Rabin probabalistic primality test.
            https://rosettacode.org/wiki/Miller%E2%80%93Rabin_primality_test#C.23
            </summary>
            <param name="source">The integer to test</param>
            <param name="certainty">The degree of certainty.</param>
            <returns>If the value <paramref name="source"/> is found to not be prime,
            returns false. Otherwise, returns true.</returns>
        </member>
        <member name="T:Goedel.Cryptography.CryptoProviderBulk">
            <summary>
            Base class for providers of bulk cryptographic algorithms, e.g. encryption,
            digest, authentication
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.CryptoProviderBulk.BindEncoder(Goedel.Cryptography.CryptoDataEncoder)">
            <summary>
            Create a crypto stream from this provider.
            </summary>
            <param name="Encoder">The encoder to bind.</param>
        </member>
        <member name="T:Goedel.Cryptography.CryptoProviderDigest">
            <summary>
            Base class for cryptographic digest providers.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.CryptoProviderDigest.Process(System.Byte[],System.Byte[])">
            <summary>
            Processes the specified byte array
            </summary>
            <param name="Data">The input to process</param>
            <param name="Key">The key</param>
            <returns>The result of the cryptographic operation.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoProviderDigest.ProcessData(System.Byte[],System.Byte[])">
            <summary>
            Processes the specified byte array
            </summary>
            <param name="Data">The input to process</param>
            <param name="Key">The key</param>
            <returns>The result of the cryptographic operation.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoProviderDigest.ProcessData(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Processes the specified byte array
            </summary>
            <param name="Data">The input to process</param>
            <param name="Offset">Offset within array</param>
            <param name="Count">Number of bytes to process</param>
            <param name="Key">The key</param>
            <returns>The result of the cryptographic operation.</returns>
        </member>
        <member name="F:Goedel.Cryptography.CryptoProviderDigest._AlgorithmClass">
            <summary>The crypto algorithm class.</summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoProviderDigest.AlgorithmClass">
            <summary>Return the crypto algorithm class.</summary>
        </member>
        <member name="T:Goedel.Cryptography.CryptoProviderAuthentication">
            <summary>
            Base class for cryptographic MAC providers.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoProviderAuthentication._AlgorithmClass">
            <summary>The crypto algorithm class.</summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoProviderAuthentication.AlgorithmClass">
            <summary>Return the crypto algorithm class.</summary>
        </member>
        <member name="M:Goedel.Cryptography.CryptoProviderAuthentication.MakeAuthenticator(System.Byte[],Goedel.Cryptography.CryptoAlgorithmID,System.IO.Stream)">
            <summary>
            Create an encoder for a bulk algorithm and optional key wrap or exchange.
            </summary>
            <param name="Algorithm">The key wrap algorithm</param>
            <param name="OutputStream">Output stream</param>
            <param name="Key">Encryption Key</param>
            <returns>Instance describing the key agreement parameters.</returns>
        </member>
        <member name="T:Goedel.Cryptography.CryptoProviderEncryption">
            <summary>
            Base class for cryptographic encryption providers.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.CryptoProviderEncryption.BindDecoder(Goedel.Cryptography.CryptoDataDecoder)">
            <summary>
            Create a crypto stream from this provider.
            </summary>
            <param name="Decoder">The decoder to bind.</param>
        </member>
        <member name="P:Goedel.Cryptography.CryptoProviderEncryption.KeySize">
            <summary>
            The size of the required key in bits
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoProviderEncryption.IVSize">
            <summary>
            The size of the required IV in bits. If zero, no IV is required.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoProviderEncryption.BlockSize">
            <summary>
            The data block size in bits (1 for a stream cipher)
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.CryptoProviderEncryption.OutputLength(System.Int64)">
            <summary>
            Return the padded output length for a specified input length.
            </summary>
            <param name="Input"></param>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoProviderEncryption.GetEncryptionStream(System.IO.Stream,System.Byte[],System.Byte[],System.Security.Cryptography.CryptoStreamMode)">
            <summary>
            Creates a new instance of the CryptoStream class to encrypt data under the specified
            <paramref name="Key"/> and <paramref name="IV"/>.
            </summary>
            <param name="Output">The stream on which to perform the cryptographic transformation.</param>
            <param name="Key">The encryption key.</param>
            <param name="IV">The initialization vector. Must be of a legal size for the algorithm</param>
            <param name="mode">One of the CryptoStreamMode values.</param>
            <returns>The CryptoStream with the specified parameters.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoProviderEncryption.GetDecryptionStream(System.IO.Stream,System.Byte[],System.Byte[],System.Security.Cryptography.CryptoStreamMode)">
            <summary>
            Creates a new instance of the CryptoStream class to encrypt data under the specified
            <paramref name="Key"/> and <paramref name="IV"/>.
            </summary>
            <param name="Output">The stream on which to perform the cryptographic transformation.</param>
            <param name="Key">The encryption key.</param>
            <param name="IV">The initialization vector. Must be of a legal size for the algorithm</param>
            <param name="mode">One of the CryptoStreamMode values.</param>
            <returns>The CryptoStream with the specified parameters.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoProviderEncryption.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Return a block Encryptor for the specified key and IV. This is required for
            constructing certain types of streaming encoder on block algorithms.
            </summary>
            <param name="Key">The encryption key.</param>
            <param name="IV">The initialization vector. Must be of a legal size for the algorithm</param>
            <returns>The transformation object instance.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoProviderEncryption.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Return a block decryptor for the specified key and IV. This is required for
            constructing certain types of streaming encoder on block algorithms.
            </summary>
            <param name="Key">The encryption key.</param>
            <param name="IV">The initialization vector. Must be of a legal size for the algorithm</param>
            <returns>The transformation object instance.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoProviderEncryption.Encrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Encrypts the specified byte array
            </summary>
            <param name="Data">The input to process</param>
            <param name="IV">The Initialization Vector</param>
            <param name="Key">The key</param>
            <returns>The result of the cryptographic operation.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoProviderEncryption.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Decrypts the specified byte array
            </summary>
            <param name="Data">The input to process</param>
            <param name="IV">The Initialization Vector</param>
            <param name="Key">The key</param>
            <returns>The result of the cryptographic operation.</returns>
        </member>
        <member name="P:Goedel.Cryptography.CryptoProviderEncryption.AlgorithmClass">
            <summary>Return the crypto algorithm class.</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoProviderEncryption._AlgorithmClass">
            <summary>The crypto algorithm class.</summary>
        </member>
        <member name="M:Goedel.Cryptography.CryptoProviderEncryption.MakeEncryptor(System.Byte[],System.Byte[],Goedel.Cryptography.CryptoAlgorithmID,System.IO.Stream)">
            <summary>
            Create an encoder for a bulk algorithm and optional key wrap or exchange.
            </summary>
            <param name="Algorithm">The key wrap algorithm</param>
            <param name="OutputStream">Output stream</param>
            <param name="IV">Initialization vector for symmetric encryption</param>
            <param name="Key">Encryption Key</param>
            <returns>Instance describing the key agreement parameters.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoProviderEncryption.MakeDecryptor(System.Byte[],System.Byte[],Goedel.Cryptography.CryptoAlgorithmID,System.IO.Stream)">
            <summary>
            Create an encoder for a bulk algorithm and optional key wrap or exchange.
            </summary>
            <param name="Algorithm">The key wrap algorithm</param>
            <param name="OutputStream">Output stream</param>
            <param name="IV">Initialization vector for symmetric encryption</param>
            <param name="Key">Encryption Key</param>
            <returns>Instance describing the key agreement parameters.</returns>
        </member>
        <member name="T:Goedel.Cryptography.CryptoCatalog">
            <summary>
            Manages a cryptographic catalog and associated key management functions.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoCatalog.Default">
            <summary>
            Returns the default catalog of suites.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoCatalog.AlgorithmDigest">
            <summary>The default digest algorithm.</summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoCatalog.AlgorithmEncryption">
            <summary>The default symmetric encryption algorithm.</summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoCatalog.AlgorithmMAC">
            <summary>The default message authentication code algorithm.</summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoCatalog.AlgorithmExchange">
            <summary>The default asymmetric encryption algorithm.</summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoCatalog.AlgorithmSignature">
            <summary>The default signature algorithm.</summary>
        </member>
        <member name="M:Goedel.Cryptography.CryptoCatalog.SignatureDefaults(Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Set undefined identifier components to default signature and digest.
            </summary>
            <param name="Base">The base id</param>
            <returns>The defaulted algorithm relative to the base.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoCatalog.EncryptionDefaults(Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Set undefined identifier components to default exchange and encryption.
            </summary>
            <param name="Base">The base id</param>
            <returns>The defaulted algorithm relative to the base.</returns>
        </member>
        <member name="F:Goedel.Cryptography.CryptoCatalog.Dictionary">
            <summary>Map crypto identifier to crypto algorithm.</summary>
        </member>
        <member name="M:Goedel.Cryptography.CryptoCatalog.Add(Goedel.Cryptography.CryptoAlgorithm)">
            <summary>
            Add a cryptographic algorithm provider to the catalog
            </summary>
            <param name="CryptoAlgorithm">Algorithm description</param>
            <returns>The catalog entry.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoCatalog.Add(Goedel.Cryptography.CryptoAlgorithmID,System.Int32,Goedel.Cryptography.CryptoAlgorithmClass,Goedel.Cryptography.CryptoProviderFactoryDelegate)">
            <summary>
            Add a cryptographic algorithm provider to the catalog
            </summary>
            <param name="CryptoAlgorithmID">CryptoAlgorithmID Identifier.</param>
            <param name="KeySize">Default algorithm key size.</param>
            <param name="AlgorithmClass">Algorithm type.</param>
            <param name="CryptoProviderFactory">Delegate returning the default crypto provider.</param>
            <returns>The catalog entry.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoCatalog.ResultInBytes(Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Return the length of the output data for the algorithm <paramref name="ID"/> in bytes.
            </summary>
            <param name="ID">The algorithm to return the output data length for.</param>
            <returns>The output data length in bytes.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoCatalog.Get(Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Get a cryptographic provider by combined algorithm identifier
            </summary>
            <param name="ID">Combined algorithm identifier.</param>
            <returns>Cryptographic provider if found or null otherwise.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoCatalog.GetDigest(Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Get a cryptographic provider by algorithm identifier
            </summary>
            <param name="ID">Algorithm identifier</param>
            <returns>Cryptographic provider if found or null otherwise.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoCatalog.GetAuthentication(Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Get a cryptographic provider  by algorithm identifier
            </summary>
            <param name="ID">Algorithm identifier</param>
            <returns>Cryptographic provider if found or null otherwise.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoCatalog.GetEncryption(Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Get a cryptographic provider  by algorithm identifier
            </summary>
            <param name="ID">Algorithm identifier</param>
            <returns>Cryptographic provider if found or null otherwise.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoCatalog.GetBits(System.Int32)">
            <summary>
            Returns a byte array with the specified number of random bits.
            </summary>
            <param name="Bits">Number of bits</param>
            <returns>A byte array with the specified number of bits.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoCatalog.GetBytes(System.Int32)">
            <summary>
            Returns a byte array with the specified number of random bytes.
            </summary>
            <param name="Bytes">Number of bytes</param>
            <returns>A byte array with the specified number of bytes.</returns>        
        </member>
        <member name="T:Goedel.Cryptography.GetCryptoProviderGenerateDelegate">
            <summary>
            Delegate to create a cryptographic provider with optional key size and/or
            bulk algorithm variants where needed.
            </summary>
            <param name="KeySize">Key size parameter (if needed).</param>
            <param name="BulkAlgorithmID">Algorithm identifier of bulk algorithm (if needed).</param>
            <returns></returns>
        </member>
        <member name="T:Goedel.Cryptography.CryptoProvider">
            <summary>
            Base class for cryptography providers.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoProvider.CryptoAlgorithm">
            <summary>
            Return a CryptoAlgorithm structure with properties describing this provider.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoProvider.AlgorithmClass">
            <summary>
            The type of algorithm
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoProvider.CryptoAlgorithmID">
            <summary>
            The CryptoAlgorithmID Identifier.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoProvider.Size">
            <summary>
            Default algorithm key or output size.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoProvider.UDF">
            <summary>
            The UDF fingerprint of the key.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoProvider.KeyPair">
            <summary>
            Return the provider key.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.CryptoProvider.MakeEncoder(Goedel.Cryptography.CryptoProviderBulk,Goedel.Cryptography.CryptoAlgorithmID,System.IO.Stream)">
            <summary>
            Create an encoder for a bulk algorithm and optional key wrap or exchange.
            This may be used to implement an encoder for signature or encryption but
            not both. To create a double encoder it is necessary to wrap one inside the
            other.
            </summary>
            <param name="Algorithm">The key wrap algorithm</param>
            <param name="Bulk">The bulk provider to use. If specified, the parameters from
            the specified provider will be used. Otherwise a new bulk provider will 
            be created and returned as part of the result.</param>
            <param name="OutputStream">Output stream</param>
            <returns>Instance describing the key agreement parameters.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoProvider.Complete(Goedel.Cryptography.CryptoData)">
            <summary>
            Complete processing at the end of an encoding or decoding operation
            </summary>
            <param name="CryptoData">The completion data.</param>
        </member>
        <member name="M:Goedel.Cryptography.CryptoProvider.Encode(System.Byte[],Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Convenience method to create a bulk encoder and apply it to
            the specified data. The data will be signed and/or encrypted
            according to the provider type.
            </summary>
            <param name="Data">Data to process</param>
            <param name="Algorithm">Bulk processing algorithm</param>
            <returns>The processed data.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoProvider.Encode(System.String,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Convenience method to create a bulk encoder and apply it to
            the specified data. The data will be signed and/or encrypted
            according to the provider type.
            </summary>
            <param name="Text">Data to process</param>
            <param name="Algorithm">Bulk processing algorithm</param>
            <returns>The processed data.</returns>
        </member>
        <member name="T:Goedel.Cryptography.CryptoProviderFactoryDelegate">
            <summary>
            Factory method for creating crypto providers
            </summary>
            <param name="KeySize">Key size. If zero, the default key size for the
            algorithm is used.</param>
            <param name="Bulk">Bulk cipher, if required.</param>
            
            <returns>The cryptographic provider created.</returns>
        </member>
        <member name="T:Goedel.Cryptography.CryptoAlgorithm">
            <summary>
            A cryptographic algorithm.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoAlgorithm.CryptoAlgorithmID">
            <summary>
            The enumerated cryptographic algorithm identifier.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoAlgorithm.Name">
            <summary>
            .NET Framework name
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoAlgorithm.AlgorithmClass">
            <summary>
            Return the type of algorithm.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoAlgorithm.OID">
            <summary>
            ASN.1 Object Identifier
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoAlgorithm.KeySize">
            <summary>Default algorithm key  or output size.</summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoAlgorithm.CryptoProviderFactory">
            <summary>Factory method to create providers</summary>
        </member>
        <member name="M:Goedel.Cryptography.CryptoAlgorithm.#ctor(Goedel.Cryptography.CryptoAlgorithmID,Goedel.Cryptography.CryptoAlgorithmClass,Goedel.Cryptography.CryptoProviderFactoryDelegate,System.Int32)">
            <summary>
            Create an instance with the specified property values.
            </summary>
            <param name="CryptoAlgorithmID">CryptoAlgorithmID Identifier.</param>
            <param name="AlgorithmClass">Algorithm type.</param>
            <param name="CryptoProviderFactory">Delegate returning the default crypto provider.</param>
            <param name="KeySize">Default algorithm key size.</param>
        </member>
        <member name="M:Goedel.Cryptography.CryptoAlgorithm.CryptoProviderEncryption(System.Int32)">
            <summary>
            Return an encryption provider.
            </summary>
            <param name="KeySize">Key size. If zero, the default key size for the
            algorithm is used.</param>
            <returns>An encryption provider.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoAlgorithm.CryptoProviderAuthentication(System.Int32)">
            <summary>
            Return an authentication provider.
            </summary>
            <param name="KeySize">Key size. If zero, the default key size for the
            algorithm is used.</param>
            <returns>An authentication provider.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoAlgorithm.CryptoProviderDigest(System.Int32)">
            <summary>
            Return an authentication provider.
            </summary>
            <param name="OutputSize">Digest algorithm output size</param>
            <returns>An authentication provider.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoAlgorithm.Process(System.Byte[],System.Byte[])">
            <summary>
            Convenience function, create bulk provider and apply to data.
            </summary>
            <param name="Buffer">Data to apply digest to.</param>
            /// <param name="Key">The key to apply</param>
            <returns>Result of digest operation.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoAlgorithm.Process(System.String,System.Byte[])">
            <summary>
            Convenience function, create bulk provider and apply to data.
            </summary>
            <param name="Text">Text to apply digest to.</param>
            <param name="Key">The key to apply</param>
            <returns>Result of digest operation.</returns>
        </member>
        <member name="T:Goedel.Cryptography.CryptoAlgorithmID">
            <summary>
            <para>
            Numeric identifiers for Cryptographic Algorithms and suites. The identifier 
            space is divided up into bulk and key exchange identifiers as follows:</para>
            <para>0x00000000-0x0000FFFF: Bulk algorithms (digest, encryption, etc)</para>
            <para>0x00010000-0x7FFF0000: Asymmetric algorithms and Key Wrap.</para>
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.Unknown">
            <summary>Unknown/unsupported</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.NULL">
            <summary>Null algorithm</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.Default">
            <summary>Default algorithm</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.Bulk">
            <summary>Multiplier for Bulk algorithms</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.BulkMask">
            <summary>Mask for Bulk Algorithms</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.BulkTagMask">
            <summary>Mask for Algorithm Type</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.Digest">
            <summary>Flag multiplier</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.MAC">
            <summary>Flag multiplier</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.Encryption">
            <summary>Flag multiplier</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.MaxDigest">
            <summary>Flag multiplier</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.MaxMAC">
            <summary>Flag multiplier</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.MaxEncryption">
            <summary>Flag multiplier</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.BaseMask">
            <summary>Extract the base algorithm version</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.Meta">
            <summary>Multiplier for key management operations</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.MetaMask">
            <summary>Mask for key management operations</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.MetaTagMask">
            <summary>Mask for Algorithm Type</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.Signature">
            <summary>Index for signature operations</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.Exchange">
            <summary>Index for key exchange operations</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.Wrap">
            <summary>Index for key wrap operations</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.MaxSignature">
            <summary>Max index for signature operations</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.MaxExchange">
            <summary>Max index for key exchange operations</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.MaxWrap">
            <summary>Max index for key wrap operations</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.SHA_1_DEPRECATED">
            <summary>SHA1 (Highly deprecated but often necessary)</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.SHA_2_256">
            <summary>SHA2 256 bit</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.SHA_2_512">
            <summary>SHA2 512 bit</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.SHA_2_512T128">
            <summary>SHA2 512 bit</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.SHA_3_256">
            <summary>SHA3 256 bit</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.SHA_3_512">
            <summary>SHA3 512 bit</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.SHAKE_128">
            <summary>SHA3 512 bit</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.SHAKE_256">
            <summary>SHA3 512 bit</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.ModeCBC">
            <summary>Flag for CBC mode with PKCS#7 padding</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.ModeCTS">
            <summary>Flag for Cipher Text Stealing Mode</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.ModeGCM">
            <summary>Flag for Galois Counter Mode</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.ModeHMAC">
            <summary>Flag for HMAC SHA-2 Mode</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.ModeCBCNone">
            <summary>Flag for CBC mode with no padding</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.ModeECB">
            <summary>Flag for Electronic Code Book Mode</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.AES128">
            <summary>AES 128 bit key</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.AES256">
            <summary>AES 256 bit key</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.AES128CBC">
            <summary>AES 128 bit in CBC mode</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.AES128GCM">
            <summary>AES 128 bit in GCM Mode</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.AES128CTS">
            <summary>AES 128 bit in Cipher Text Stealing (CTS) mode</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.AES128HMAC">
            <summary>AES 128 bit with HMAC</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.AES128CBCNone">
            <summary>AES 128 bit CBC mode with no padding</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.AES128ECB">
            <summary>AES 128 bit ECB mode with zeros padding</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.AES256CBC">
            <summary>AES 256 bit in CBC mode</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.AES256GCM">
            <summary>AES 256 bit in GCM mode</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.AES256CTS">
            <summary>AES 256 bit in Cipher Text Stealing (CTS) mode</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.AES256HMAC">
            <summary>AES 256 Bit with HMAC</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.AES256CBCNone">
            <summary>AES 256 bit CBC mode with no padding</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.AES256ECB">
            <summary>AES 128 bit ECB mode with zeros padding</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.HMAC_SHA_2_256">
            <summary>HMAC SHA 2 with 256 bit key.</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.HMAC_SHA_2_512">
            <summary>HMAC SHA 2 with 512 bit key.</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.HMAC_SHA_2_512T128">
            <summary>HMAC SHA 2 with 512 bit key.</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.Level_Any">
            <summary>Flag for CBC mode</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.Level_Low">
            <summary>Flag for Cipher Text Stealing Mode</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.Level_High">
            <summary>Flag for Galois Counter Mode</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.RSASign">
            <summary>RSA Signature using PKCS#1.5 padding.</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.RSASign_PSS">
            <summary>RSA Signature using PSS padding.</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.EdDSA">
            <summary>Elliptic Curve DSA with curve 25519x</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.Ed25519">
            <summary>Elliptic Curve DSA with curve 25519x</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.Ed25519ctx">
            <summary>Elliptic Curve DSA with curve 25519x</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.Ed25519ph">
            <summary>Elliptic Curve DSA with curve 25519x</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.Ed448">
            <summary>Elliptic Curve DSA with curve Ed448</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.Ed448ph">
            <summary>Elliptic Curve DSA with curve Ed448</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.RSASign_SHA_2_256">
            <summary>RSA Signature using PKCS#1.5 padding and SHA-2 256 digest</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.RSASign_SHA_2_512">
            <summary>RSA Signature using PKCS#1.5 padding and SHA-2 512 digest</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.RSASign_PSS_SHA_2_256">
            <summary>RSA Signature using PSS padding and SHA-2 256 digest</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.RSASign_PSS_SHA_2_512">
            <summary>RSA Signature using PSS padding and SHA-2 512 digest</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.RSAExch">
            <summary>RSA Encryption using OAEP padding.</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.RSAExch_P15">
            <summary>RSA Encryption using PKCS#1.5 padding</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.DH">
            <summary>Diffie Hellman 2048 bit</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.ECDH">
            <summary>Elliptic Curve DH with curve P256</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.X25519">
            <summary>Elliptic Curve DH with curve X25519 (Montgomery)</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.X448">
            <summary>Elliptic Curve DH with curve X448 (Montgomery)</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.XEd25519">
            <summary>Elliptic Curve DH with curve Ed25519 (Edwards)</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.XEd448">
            <summary>Elliptic Curve DH with curve Ed448 (Edwards)</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.Direct">
            <summary>Direct (no wrap)</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.KW3394_AES128">
            <summary>RFC 3394 / NIST with AES and 128 bit key</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.KW3394_AES256">
            <summary>RFC 3394 / NIST with AES and 192 bit key</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.AES128_GCM_KW">
            <summary>RFC 3394 / NIST with AES and 128 bit key</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmID.AES256_GCM_KW">
            <summary>RFC 3394 / NIST with AES and 192 bit key</summary>
        </member>
        <member name="T:Goedel.Cryptography.KeySecurity">
            <summary>Enumeration specifying whether the key is public or private and if private,
            the storage model.</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeySecurity.Null">
            <summary>Null Flags.</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeySecurity.Persisted">
            <summary>Flag indicating that the private key has been persisted to the local machine</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeySecurity.Persistable">
            <summary>Flag indicating that the private key may be persisted to the local machine.</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeySecurity.Exportable">
            <summary>Flag indicating that the private key may be exported.</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeySecurity.Ephemeral">
            <summary>Private key that cannot be exported or persisted.</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeySecurity.Bound">
            <summary>Private key that is stored on the local machine and cannot be exported.</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeySecurity.ExportableStored">
            <summary>Flag indicating that the private key has been store and may be exported.</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeySecurity.Public">
            <summary>Key is public only.</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeySecurity.Master">
            <summary>
            Key is a Mesh master key and will be stored in a key container marked 
            as archivable and user protected. Master keys SHOULD be deleted after 
            being escrowed and recovery verified.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.KeySecurity.Admin">
            <summary>
            Key is a Mesh administration key and will be  stored in a key container marked as non 
            exportable and user protected.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.KeySecurity.Device">
            <summary>
            Key is Mesh a device key and will be  stored in a key container bound to 
            the current machine that cannot be exported or archived.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.KeyUses">
            <summary>Enumeration specifying permitted key uses</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyUses.Sign">
            <summary>Signature Use</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyUses.Encrypt">
            <summary>Encryption Use</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyUses.Any">
            <summary>Sign or Encrypt</summary>
        </member>
        <member name="T:Goedel.Cryptography.CryptoAlgorithmClass">
            <summary>
            Algorithm classes.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmClass.NULL">
            <summary>Unspecified.</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmClass.Digest">
            <summary>Digest algorithm.</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmClass.MAC">
            <summary>Message Authentication Code</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmClass.Encryption">
            <summary>Symmetric Encryption.</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmClass.Signature">
            <summary>Digital Signature</summary>
        </member>
        <member name="F:Goedel.Cryptography.CryptoAlgorithmClass.Exchange">
            <summary>Asymmetric Encryption.</summary>
        </member>
        <member name="T:Goedel.Cryptography.CryptoID">
            <summary>
            Extension methods to extract algorithm sub types
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.CryptoID.ExtractMAC(Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Return the MAC algorithm from a possibly composite ID
            </summary>
            <param name="ID"></param>
            <returns>The digest algorithm</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoID.ExtractEncryption(Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Return the encryption algorithm from a possibly composite ID
            </summary>
            <param name="ID"></param>
            <returns>The encryption algorithm</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoID.Bulk(Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Get the bulk algorithm
            </summary>
            <param name="ID">Composite identifier</param>
            <returns>The bulk component.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoID.Meta(Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Get the Meta algorithm
            </summary>
            <param name="ID">Composite identifier</param>
            <returns>The meta component.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoID.Default(Goedel.Cryptography.CryptoAlgorithmID,Goedel.Cryptography.CryptoAlgorithmID,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Set algorithm defaults
            </summary>
            <param name="ID">The specified algorithm</param>
            <param name="BulkDefault">The default bulk algorithm to apply</param>
            <param name="MetaDefault">The default meta algorithm to apply</param>
            <returns>The defaulted algorithm</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoID.DefaultMeta(Goedel.Cryptography.CryptoAlgorithmID,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Set algorithm defaults for key exchange / public algorithm.
            </summary>
            <param name="ID">The specified algorithm</param>
            <param name="Default">The default to apply</param>
            <returns>The defaulted algorithm</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoID.DefaultBulk(Goedel.Cryptography.CryptoAlgorithmID,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Set algorithm defaults for bulk algorithm
            </summary>
            <param name="ID">The specified algorithm</param>
            <param name="Default">The default to apply</param>
            <returns>The defaulted algorithm</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoID.Base(Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Get the base part of an algorithm
            </summary>
            <param name="ID">The identifier to process.</param>
            <returns>The base part.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoID.Digest(Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Get the bulk algorithm
            </summary>
            <param name="ID">Composite identifier</param>
            <returns>The bulk component.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoID.MAC(Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Get the bulk algorithm
            </summary>
            <param name="ID">Composite identifier</param>
            <returns>The bulk component.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoID.Encryption(Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Get the bulk algorithm
            </summary>
            <param name="ID">Composite identifier</param>
            <returns>The bulk component.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoID.Mode(Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Get the bulk algorithm
            </summary>
            <param name="ID">Composite identifier</param>
            <returns>The bulk component.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoID.Signature(Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Get the bulk algorithm
            </summary>
            <param name="ID">Composite identifier</param>
            <returns>The bulk component.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoID.Exchange(Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Get the bulk algorithm
            </summary>
            <param name="ID">Composite identifier</param>
            <returns>The bulk component.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoID.Wrap(Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Get the bulk algorithm
            </summary>
            <param name="ID">Composite identifier</param>
            <returns>The bulk component.</returns>
        </member>
        <member name="T:Goedel.Cryptography.CryptoData">
            <summary>
            Container for data generated by a cryptographic operation
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoData.InputStream">
            <summary>
            The Input stream
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoData.OutputStream">
            <summary>
            The Output stream
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoData.IV">
            <summary>Initialization vector for block modes that require one.</summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoData.Key">
            <summary>The encryption key</summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoData.OutputData">
            <summary>
            The output data value as a byte array. This is only available if the 
            OutputStream is a MemoryStream.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoData.BaseAlgorithmIdentifier">
            <summary>
            The Algorithm identifier used to construct this instance.
            This may contain entries for CryptoAlgorithmID.Default
            as the bulk or meta algorithm.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoData.AlgorithmIdentifier">
            <summary>
            The Algorithm identifier that was inferred from the 
            BaseAlgorithmIdentifier
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoData.MetaID">
            <summary>Return the meta algorithm identifier (for debugging)</summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoData.BulkID">
            <summary>Return the bulk algorithm identifier (for debugging)</summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoData.OID">
            <summary>
            OID of algorithm that produced the result.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.CryptoData.#ctor(Goedel.Cryptography.CryptoAlgorithmID,Goedel.Cryptography.CryptoProviderBulk)">
            <summary>
            Create and populate a result.
            </summary>
            <param name="Identifier">The Goedel Cryptography identifier.</param>
            <param name="Bulk">Provider to use to process the bulk data</param>
        </member>
        <member name="P:Goedel.Cryptography.CryptoData.ProviderBulk">
            <summary>
            CryptoProvider for performing operations on the bulk data under
            the wrapped key.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoData.Integrity">
            <summary>
            Integrity value
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoData.ProcessedData">
            <summary>
            The result of the cryptographic transform on the data
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoData.UDF">
            <summary>
            Fingerprint of the key used to wrap the inner key
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.CryptoData.Complete">
            <summary>
            Terminate the encoding operation and perform the signature.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.CryptoData.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write the binary data to the input stream.
            </summary>
            <param name="Data">The data to write</param>
            <param name="Count">Number of bytes to process</param>
            <param name="Offset">Offset to begin processing at.</param>
        </member>
        <member name="P:Goedel.Cryptography.CryptoData.Ephemeral">
            <summary>
            Ephemeral key pair used in wrap operation.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.CryptoDataMeta">
            <summary>
            Represent the result of a Signature or Exchange operation
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoDataMeta.Meta">
            <summary>
            Crypto provider for keying operations (may be null)
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoDataMeta.BulkData">
            <summary>
            The bulk provider
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoDataMeta.BulkID">
            <summary>
            The Bulk Identifier
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.CryptoDataMeta.#ctor(Goedel.Cryptography.CryptoAlgorithmID,Goedel.Cryptography.CryptoData)">
            <summary>
            Create and populate a result.
            </summary>
            <param name="Identifier">The Goedel Cryptography identifier.</param>
            <param name="BulkData">Provider to use to process the bulk data</param>
        </member>
        <member name="T:Goedel.Cryptography.CryptoDataEncoder">
            <summary>
            Wrapped Crypto Data
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.CryptoDataEncoder.#ctor(Goedel.Cryptography.CryptoAlgorithmID,Goedel.Cryptography.CryptoProviderBulk)">
            <summary>
            Default constructor
            </summary>
            <param name="Identifier">The Goedel Cryptography identifier.</param>
            <param name="Bulk">Provider to use to process the bulk data
            signature operations where the asymmetric operation is performed after the
            bulk operation completes.</param> 
        </member>
        <member name="T:Goedel.Cryptography.CryptoDataDecoder">
            <summary>
            Wrapped Crypto Data
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoDataDecoder.Verified">
            <summary>
            Result of verification operation. If true, verification
            succeeded. If false verification failed. If null, no
            verification operation was performed.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.CryptoDataDecoder.#ctor(Goedel.Cryptography.CryptoAlgorithmID,Goedel.Cryptography.CryptoProviderBulk)">
            <summary>
            Default constructor
            </summary>
            <param name="Identifier">The Goedel Cryptography identifier.</param>
            <param name="Bulk">Provider to use to process the bulk data
            signature operations where the asymmetric operation is performed after the
            bulk operation completes.</param>
        </member>
        <member name="T:Goedel.Cryptography.CryptoStreamFix">
            <summary>
            This is a dummy stream that simply passes all calls to the underlying
            stream set when it is initialized except for Close() and Dispose(). 
            Its function is simply to prevent the underlying stream being closed
            when a CryptoStream is closed.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoStreamFix.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading (is always false).
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoStreamFix.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking(is always false).
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoStreamFix.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing(is always true).
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoStreamFix.Length">
            <summary>
            Gets the stream length in bytes. 
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoStreamFix.Position">
            <summary>
            Gets the position within the current stream. The set operation is not supported.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.CryptoStreamFix.#ctor(System.IO.Stream)">
            <summary>
            Create a dummy stream whose sole purpose is to stop the idiot
            implementation of CryptoStream closing the underlying stream
            when it is closed.
            </summary>
            <param name="Output">The output stream.</param>
        </member>
        <member name="M:Goedel.Cryptography.CryptoStreamFix.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written 
            to the underlying device.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.CryptoStreamFix.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies bytes from the current buffered stream to an array (not supported).
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the 
            specified byte array with the values between <paramref name="offset"/> and 
            (<paramref name="offset"/> + <paramref name="count"/> - 1) 
            replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing 
            the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes 
            requested if that many bytes are not currently available, or zero (0) if the end of the stream 
            has been reached.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoStreamFix.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current buffered stream (not supported).
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoStreamFix.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:Goedel.Cryptography.CryptoStreamFix.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write data to the output stream.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from 
            <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/>
            at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:Goedel.Cryptography.CryptoStreamFix.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and 
            file handles) associated with the current stream. Instead of calling this method, 
            ensure that the stream is properly disposed.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.CryptoStreamFromID">
            <summary>
            Extension methods to return .NET Standard cryptographic providers from
            CryptoAlgorithmID identifiers.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.CryptoStreamFromID.GetKeySize(Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Return the key size and block size for the algorithm specified by <paramref name="cryptoAlgorithmID"/>.
            </summary>
            <param name="cryptoAlgorithmID">The algorithm to report the sizes of.</param>
            <returns>Tuple consisting (int KeySize, int BlockSize).</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoStreamFromID.CreateEncryptor(Goedel.Cryptography.CryptoAlgorithmID,System.Byte[],System.Byte[])">
            <summary>
            Return an encryption transform the algorithm specified by <paramref name="cryptoAlgorithmID"/>.
            </summary>
            <param name="cryptoAlgorithmID">The algorithm.</param>
            <param name="key">The key to use.</param>
            <param name="iv">The initialization vector (if required).</param>
            <returns>The encryption transform.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoStreamFromID.CreateDecryptor(Goedel.Cryptography.CryptoAlgorithmID,System.Byte[],System.Byte[])">
            <summary>
            Return a decryption transform the algorithm specified by <paramref name="cryptoAlgorithmID"/>.
            </summary>
            <param name="cryptoAlgorithmID">The algorithm.</param>
            <param name="key">The key to use.</param>
            <param name="iV">The initialization vector (if required).</param>
            <returns>The decryption transform.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoStreamFromID.CreateMac(Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Return a Message Authentication Code provider for the algorithm 
            specified by <paramref name="cryptoAlgorithmID"/>.
            </summary>
            <param name="cryptoAlgorithmID">The algorithm.</param>
            <returns>The Message Authentication Code provider.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoStreamFromID.CreateMac(Goedel.Cryptography.CryptoAlgorithmID,System.Byte[])">
            <summary>
            Return a Message Authentication Code provider for the algorithm 
            specified by <paramref name="cryptoAlgorithmID"/>.
            </summary>
            <param name="cryptoAlgorithmID">The algorithm.</param>
            <param name="key">The key to use.</param>
            <returns>The Message Authentication Code provider.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoStreamFromID.CreateDigest(Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Return a digest provider for the algorithm 
            specified by <paramref name="cryptoAlgorithmID"/>.
            </summary>
            <param name="cryptoAlgorithmID">The algorithm.</param>
            <returns>The digest provider.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoStreamFromID.CreateShake(Goedel.Cryptography.CryptoAlgorithmID,System.Int32)">
            <summary>
            Return a shake provider for the algorithm 
            specified by <paramref name="cryptoAlgorithmID"/>.
            </summary>
            <param name="cryptoAlgorithmID">The algorithm.</param>
            <param name="hashBitLength">The number of output bits to generate.</param>
            <returns>The digest provider.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoStreamFromID.GetDigestOfFile(System.String,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Calculate the digest value of the contents of <paramref name="fileName"/> using the algorithm
            specified by <paramref name="cryptoAlgorithmID"/>.
            </summary>
            <param name="fileName">The file containing the data to digest.</param>
            <param name="cryptoAlgorithmID">The digest algorithm.</param>
            <returns>The digest value.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoStreamFromID.GetDigest(System.String,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Calculate the digest value of <paramref name="utf8"/> using the algorithm
            specified by <paramref name="cryptoAlgorithmID"/>.
            </summary>
            <param name="utf8">String to be converted to UTF8 to provide the digest input.</param>
            <param name="cryptoAlgorithmID">The digest algorithm.</param>
            <returns>The digest value.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoStreamFromID.GetDigest(System.Byte[],Goedel.Cryptography.CryptoAlgorithmID,System.Int32,System.Int32)">
            <summary>
            Calculate the digest of the portion of <paramref name="data"/> specified by
            <paramref name="offset"/> and <paramref name="count"/> with the digest algorithm specified
            by <paramref name="cryptoAlgorithmID"/>.
            </summary>
            <param name="data">The input to compute the hash code for.</param>
            <param name="cryptoAlgorithmID"></param>
            <param name="offset">The offset into the byte array from which to begin using data.</param>
            <param name="count">The number of bytes in the array to use as data. If less than 0,
            defaults to the remaining bytes <paramref name="data"/> after <paramref name="offset"/>.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Goedel.Cryptography.CryptoStreamFromID.GetMAC(System.Byte[],System.Byte[],Goedel.Cryptography.CryptoAlgorithmID,System.Int32,System.Int32)">
            <summary>
            Calculate the digest of the portion of <paramref name="data"/> specified by
            <paramref name="offset"/> and <paramref name="count"/> with the digest algorithm specified
            by <paramref name="cryptoAlgorithmID"/>.
            </summary>
            <param name="data">The input to compute the hash code for.</param>
            <param name="offset">The offset into the byte array from which to begin using data.</param>
            <param name="count">The number of bytes in the array to use as data. If less than 0,
            defaults to the remaining bytes <paramref name="data"/> after <paramref name="offset"/>.</param>
            <param name="cryptoAlgorithmID"></param>
            <param name="key">The secret key for the MAC operation.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Goedel.Cryptography.CryptographicException">
            <summary>
            Base class for cryptographic exceptions.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.CryptographicException.#ctor">
            <summary>
            Construct instance for exception "A cryptographic exception occurred.."
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.CryptographicException.#ctor(System.String)">
            <summary>
            Construct instance for exception "A cryptographic exception occurred.."
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.CryptographicException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.CryptographicException.UserData">
            <summary>
            User data associated with the exception.
            </summary>	
        </member>
        <member name="F:Goedel.Cryptography.CryptographicException.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.CatalogNotInitialized">
            <summary>
            The operation requires cryptographic catalog initialization"
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.CatalogNotInitialized.#ctor">
            <summary>
            Construct instance for exception "The operation requires cryptographic catalog initialization"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.CatalogNotInitialized.#ctor(System.String)">
            <summary>
            Construct instance for exception "The operation requires cryptographic catalog initialization"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.CatalogNotInitialized.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.CatalogNotInitialized.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.PlatformNotInitialized">
            <summary>
            The operation requires platform initialization
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PlatformNotInitialized.#ctor">
            <summary>
            Construct instance for exception "The operation requires platform initialization"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.PlatformNotInitialized.#ctor(System.String)">
            <summary>
            Construct instance for exception "The operation requires platform initialization"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.PlatformNotInitialized.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.PlatformNotInitialized.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.NoAvailableDecryptionKey">
            <summary>
            No decryption key is available
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.NoAvailableDecryptionKey.#ctor">
            <summary>
            Construct instance for exception "No decryption key is available"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.NoAvailableDecryptionKey.#ctor(System.String)">
            <summary>
            Construct instance for exception "No decryption key is available"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.NoAvailableDecryptionKey.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.NoAvailableDecryptionKey.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.ImplementationLimit">
            <summary>
            Placeholder exception to be thrown as a placeholder to mark
            code needing improvement.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.ImplementationLimit.#ctor">
            <summary>
            Construct instance for exception "Some implementation limit hit"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.ImplementationLimit.#ctor(System.String)">
            <summary>
            Construct instance for exception "Some implementation limit hit"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.ImplementationLimit.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.ImplementationLimit.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.InvalidQuorum">
            <summary>
            Some or all of the quorum parameters are incorrect.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.InvalidQuorum.#ctor">
            <summary>
            Construct instance for exception "Quorum parameters invalid"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.InvalidQuorum.#ctor(System.String)">
            <summary>
            Construct instance for exception "Quorum parameters invalid"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.InvalidQuorum.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.InvalidQuorum.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.InsufficientShares">
            <summary>
            The recovery attempt failed because there weren't enough shares
            to recover the key.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.InsufficientShares.#ctor">
            <summary>
            Construct instance for exception "Not enough shares to recover key"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.InsufficientShares.#ctor(System.String)">
            <summary>
            Construct instance for exception "Not enough shares to recover key"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.InsufficientShares.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.InsufficientShares.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.QuorumExceedsShares">
            <summary>
            The number of shares required to create a quorum must be 
            equal to or smaller than the number of shares
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.QuorumExceedsShares.#ctor">
            <summary>
            Construct instance for exception "Quorum can\'t exceed shares"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.QuorumExceedsShares.#ctor(System.String)">
            <summary>
            Construct instance for exception "Quorum can\'t exceed shares"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.QuorumExceedsShares.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.QuorumExceedsShares.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.QuorumInsufficient">
            <summary>
            The quorum must require at least 2 shares.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.QuorumInsufficient.#ctor">
            <summary>
            Construct instance for exception "Quorum must be at least 2"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.QuorumInsufficient.#ctor(System.String)">
            <summary>
            Construct instance for exception "Quorum must be at least 2"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.QuorumInsufficient.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.QuorumInsufficient.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.SharesInsufficient">
            <summary>
            There must be at least two key shares.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.SharesInsufficient.#ctor">
            <summary>
            Construct instance for exception "Shares must be at least 2"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.SharesInsufficient.#ctor(System.String)">
            <summary>
            Construct instance for exception "Shares must be at least 2"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.SharesInsufficient.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.SharesInsufficient.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.QuorumExceeded">
            <summary>
            This implementation does not support the number of shares
            that were requested.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.QuorumExceeded.#ctor">
            <summary>
            Construct instance for exception "Too many shares specified"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.QuorumExceeded.#ctor(System.String)">
            <summary>
            Construct instance for exception "Too many shares specified"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.QuorumExceeded.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.QuorumExceeded.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.QuorumDegreeExceeded">
            <summary>
            The number of shares required to create a quorum exceeds the maximum
            permitted polynomial degree.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.QuorumDegreeExceeded.#ctor">
            <summary>
            Construct instance for exception "Degree too high"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.QuorumDegreeExceeded.#ctor(System.String)">
            <summary>
            Construct instance for exception "Degree too high"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.QuorumDegreeExceeded.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.QuorumDegreeExceeded.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.MismatchedShares">
            <summary>
            The shares presented are not from the same set of shares.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.MismatchedShares.#ctor">
            <summary>
            Construct instance for exception "Keys must have same threshold"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.MismatchedShares.#ctor(System.String)">
            <summary>
            Construct instance for exception "Keys must have same threshold"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.MismatchedShares.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.MismatchedShares.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.InsufficientResults">
            <summary>
            A recryption attempt failed because there were no result values to combine.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.InsufficientResults.#ctor">
            <summary>
            Construct instance for exception "There must be at least one result"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.InsufficientResults.#ctor(System.String)">
            <summary>
            Construct instance for exception "There must be at least one result"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.InsufficientResults.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.InsufficientResults.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.FingerprintMatchFailed">
            <summary>
            Thje data presented did not match the expected fingerprint
            value.			
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.FingerprintMatchFailed.#ctor">
            <summary>
            Construct instance for exception "Data did not match expected fingerprint value"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.FingerprintMatchFailed.#ctor(System.String)">
            <summary>
            Construct instance for exception "Data did not match expected fingerprint value"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.FingerprintMatchFailed.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.FingerprintMatchFailed.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.CipherModeNotSupported">
            <summary>
            A request was made for a cipher mode that the registered provider 
            does not support.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.CipherModeNotSupported.#ctor">
            <summary>
            Construct instance for exception "The requested cipher mode is not supported by the provider"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.CipherModeNotSupported.#ctor(System.String)">
            <summary>
            Construct instance for exception "The requested cipher mode is not supported by the provider"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.CipherModeNotSupported.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.CipherModeNotSupported.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.CryptographicOperationNotSupported">
            <summary>
            A request was made for a cipher mode that the registered provider 
            does not support.			
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.CryptographicOperationNotSupported.#ctor">
            <summary>
            Construct instance for exception "The requested cryptographic operation is not supported by the provider"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.CryptographicOperationNotSupported.#ctor(System.String)">
            <summary>
            Construct instance for exception "The requested cryptographic operation is not supported by the provider"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.CryptographicOperationNotSupported.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.CryptographicOperationNotSupported.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.KeyTypeMismatch">
            <summary>
            The encryption key type does not match the recryption key type
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyTypeMismatch.#ctor">
            <summary>
            Construct instance for exception "The encryption key type does not match the recryption key type"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.KeyTypeMismatch.#ctor(System.String)">
            <summary>
            Construct instance for exception "The encryption key type does not match the recryption key type"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.KeyTypeMismatch.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.KeyTypeMismatch.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.NoProviderSpecified">
            <summary>
            The specified key did not have a valid cryptographic
            provider. This may be because the key algorithm is 
            not supported or the key parameters were found to be invalid.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.NoProviderSpecified.#ctor">
            <summary>
            Construct instance for exception "No provider specified"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.NoProviderSpecified.#ctor(System.String)">
            <summary>
            Construct instance for exception "No provider specified"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.NoProviderSpecified.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.NoProviderSpecified.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.KeySizeNotSupported">
            <summary>
            The implementation does not support the requested key size
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.KeySizeNotSupported.#ctor">
            <summary>
            Construct instance for exception "The requested key size is not supported"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.KeySizeNotSupported.#ctor(System.String)">
            <summary>
            Construct instance for exception "The requested key size is not supported"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.KeySizeNotSupported.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.KeySizeNotSupported.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.InitializationFailed">
            <summary>
            Initialization of the cryptographic support library failed.
            This is a fatal error that cannot be recovered from.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.InitializationFailed.#ctor">
            <summary>
            Construct instance for exception "Initialization of the cryptographic support library failed."
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.InitializationFailed.#ctor(System.String)">
            <summary>
            Construct instance for exception "Initialization of the cryptographic support library failed."
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.InitializationFailed.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.InitializationFailed.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.InvalidKeyPairType">
            <summary>
            The keypair presented was not of the expected type.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.InvalidKeyPairType.#ctor">
            <summary>
            Construct instance for exception "The keypair presented was not of the expected type"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.InvalidKeyPairType.#ctor(System.String)">
            <summary>
            Construct instance for exception "The keypair presented was not of the expected type"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.InvalidKeyPairType.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.InvalidKeyPairType.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.RecryptionShareLimitExceeded">
            <summary>
            An attempt was made to create more recryption shares than the implementation supports.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.RecryptionShareLimitExceeded.#ctor">
            <summary>
            Construct instance for exception "The number of recryption shares requested exceeds the implementation limit"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.RecryptionShareLimitExceeded.#ctor(System.String)">
            <summary>
            Construct instance for exception "The number of recryption shares requested exceeds the implementation limit"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.RecryptionShareLimitExceeded.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.RecryptionShareLimitExceeded.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.InvalidOperation">
            <summary>
            The cryptographic provider does not support the requested operation
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.InvalidOperation.#ctor">
            <summary>
            Construct instance for exception "The cryptographic provider does not support the requested operation"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.InvalidOperation.#ctor(System.String)">
            <summary>
            Construct instance for exception "The cryptographic provider does not support the requested operation"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.InvalidOperation.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.InvalidOperation.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.InvalidAlgorithm">
            <summary>
            The specified algorithm is not valid for the operation attempted
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.InvalidAlgorithm.#ctor">
            <summary>
            Construct instance for exception "The specified algorithm is not valid for the operation attempted"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.InvalidAlgorithm.#ctor(System.String)">
            <summary>
            Construct instance for exception "The specified algorithm is not valid for the operation attempted"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.InvalidAlgorithm.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.InvalidAlgorithm.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.PrivateKeyNotFound">
            <summary>
            The operation requested requires a private key that could not be found
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PrivateKeyNotFound.#ctor">
            <summary>
            Construct instance for exception "The operation requested requires a private key that could not be found"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.PrivateKeyNotFound.#ctor(System.String)">
            <summary>
            Construct instance for exception "The operation requested requires a private key that could not be found"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.PrivateKeyNotFound.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.PrivateKeyNotFound.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.UnwrapFailed">
            <summary>
            The key unwrap operation returned an invalid value.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.UnwrapFailed.#ctor">
            <summary>
            Construct instance for exception "The key unwrap operation returned an invalid value."
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.UnwrapFailed.#ctor(System.String)">
            <summary>
            Construct instance for exception "The key unwrap operation returned an invalid value."
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.UnwrapFailed.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.UnwrapFailed.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.UnknownNamedParameters">
            <summary>
            The named parameters specified in an operation are not known
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.UnknownNamedParameters.#ctor">
            <summary>
            Construct instance for exception "The named parameters specified in an operation are not known"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.UnknownNamedParameters.#ctor(System.String)">
            <summary>
            Construct instance for exception "The named parameters specified in an operation are not known"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.UnknownNamedParameters.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.UnknownNamedParameters.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.NotExportable">
            <summary>
            The cryptographic provider does not permit export of the private key parameters
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.NotExportable.#ctor">
            <summary>
            Construct instance for exception "The cryptographic provider does not permit export of the private key parameters"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.NotExportable.#ctor(System.String)">
            <summary>
            Construct instance for exception "The cryptographic provider does not permit export of the private key parameters"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.NotExportable.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.NotExportable.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.ExtensionMethods">
            <summary>
            A general parking ground for methods converting from platform to
            portable structures.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.ExtensionMethods.RSAPrivateKey(System.Security.Cryptography.RSAParameters)">
            <summary>
            Create PKIX RSAPrivateKey from RSAParameters structure.
            </summary>
            <param name="RSAParameters">The RSA Parameters in .NET format.</param>
            <returns>The private key in Goedel format.</returns> 
        </member>
        <member name="M:Goedel.Cryptography.ExtensionMethods.RSAParameters(Goedel.Cryptography.PKIX.PKIXPrivateKeyRSA)">
            <summary>
            Convert PKIX RSAPrivateKey to RSAParameters structure.
            </summary>
            <param name="RSAPrivateKey">RSA key  in System.Security.Cryptography form</param>
            <returns>The RSA parameters in PKIX format.</returns>
        </member>
        <member name="M:Goedel.Cryptography.ExtensionMethods.RSAPublicKey(System.Security.Cryptography.RSAParameters)">
            <summary>
            Create PKIX RSAPublicKey from RSAParameters structure.
            </summary>
            <param name="RSAParameters">Input parameters  in System.Security.Cryptography form</param>
            <returns>The public key in Goedel format.</returns>
        </member>
        <member name="M:Goedel.Cryptography.ExtensionMethods.RSAParameters(Goedel.Cryptography.PKIX.PKIXPublicKeyRSA)">
            <summary>
            Convert PKIX RSAPublicKey to RSAParameters structure.
            </summary>
            <param name="RSAPublicKey">The RSA public key</param>
            <returns>The RSA parameters in System.Security.Cryotography. format.</returns>
        </member>
        <member name="M:Goedel.Cryptography.ExtensionMethods.Certificate(System.Byte[])">
            <summary>
            Convert binary data to portable certificate.
            </summary>
            <param name="Data">Input data</param>
            <returns>The certificate</returns>
        </member>
        <member name="M:Goedel.Cryptography.ExtensionMethods.TBSCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Create a TBSCertificate item from a X509Certificate2 object.
            </summary>
            <param name="X509Cert">The X509 certificate to form TBS certificate from</param>
            <returns>The TBS certificate structure</returns>
        </member>
        <member name="M:Goedel.Cryptography.ExtensionMethods.AlgorithmIdentifier(System.Security.Cryptography.Oid)">
            <summary>
            Convert .NET OID to portable OID
            </summary>
            <param name="Oid">OID structure in System.Security.Cryptography form</param>
            <returns>Portable OID structure</returns>
        </member>
        <member name="M:Goedel.Cryptography.ExtensionMethods.Names(System.Security.Cryptography.X509Certificates.X500DistinguishedName)">
            <summary>
            Convert .NET Distinguished Name to portable list of names.
            </summary>
            <remarks>NOT IMPLEMENTED STUB</remarks>
            <param name="DN">Distinguished Name in System.Security.Cryptography form</param>
            <returns>Portable list of Names.</returns>
        </member>
        <member name="M:Goedel.Cryptography.ExtensionMethods.Extension(System.Security.Cryptography.X509Certificates.X509Extension)">
            <summary>
            Convert .NET extension to portable extensions 
            </summary>
            <remarks>NOT IMPLEMENTED STUB</remarks>
            <param name="X509Extension">The X509 extension in System.Security.Cryptography form</param>
            <returns>Portable extension representation.</returns>
        </member>
        <member name="T:Goedel.Cryptography.IKeyAdvancedPublic">
            <summary>
            Key handle for an implementation level public key.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.IKeyAdvancedPublic.Combine(Goedel.Cryptography.IKeyAdvancedPublic)">
            <summary>
            Combine two public keys to obtain a new public key.
            </summary>
            <param name="Contribution">The public key contribution.</param>
            <returns>The new public key.</returns>
        </member>
        <member name="T:Goedel.Cryptography.IKeyAdvancedPrivate">
            <summary>
            Key handle for an implementation level private key.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.IKeyAdvancedPrivate.MakeRecryptionKeySet(System.Int32)">
            <summary>
            Make a recryption keyset by splitting the private key.
            </summary>
            <param name="Shares">Number of shares to create</param>
            <returns>Array shares.</returns>
        </member>
        <member name="M:Goedel.Cryptography.IKeyAdvancedPrivate.Combine(Goedel.Cryptography.IKeyAdvancedPrivate)">
            <summary>
            Combine two private keys to obtain a new public key.
            </summary>
            <param name="Contribution">The private key contribution.</param>
            <returns>The new public key.</returns>
        </member>
        <member name="T:Goedel.Cryptography.KeyPairAdvanced">
            <summary>
            Base class for public key pairs that support the additional properties
            required for advanced operations such as distributed key generation and
            proxy re-encryption.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairAdvanced.IKeyAdvancedPublic">
            <summary>The internal public key parameters.</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairAdvanced.IKeyAdvancedPrivate">
            <summary>The external public key parameters.</summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairAdvanced.KeyPair(Goedel.Cryptography.IKeyAdvancedPrivate)">
            <summary>
            Factory method to construct a KeyPair for the private key <paramref name="PrivateKey"/>.
            The created key pair will have the same security model as the key from which the
            method is invoked.
            </summary>
            <param name="PrivateKey">The private key to construct parameters for.</param>
            <returns>The KeyPair that was constructed</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairAdvanced.KeyPair(Goedel.Cryptography.IKeyAdvancedPublic)">
            <summary>
            Factory method to construct a KeyPair for the public key <paramref name="PublicKey"/>.
            </summary>
            <param name="PublicKey">The private key to construct parameters for.</param>
            <returns>The KeyPair that was constructed</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairAdvanced.FindLocalAdvanced(System.String)">
            <summary>
            Search all the local machine stores to find a key pair with the specified
            fingerprint
            </summary>
            <param name="UDF">Fingerprint of key</param>
            <returns>The key pair found</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairAdvanced.GenerateRecryptionSet(System.Int32)">
            <summary>
            Split the private key into a number of recryption keys.
            <para>
            Since the
            typical use case for recryption requires both parts of the generated machine
            to be used on a machine that is not the machine on which they are created, the
            key security level is always to permit export.</para>
            </summary>
            <param name="Shares">The number of keys to create.</param>
            <returns>The created keys</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairAdvanced.GenerateRecryptionPair(Goedel.Cryptography.KeyPair@,Goedel.Cryptography.KeyPair@)">
            <summary>
            Split the private key into a recryption pair. This is a convenience function
            to support the most common use case in an implementation.
            <para>
            Since the
            typical use case for recryption requires both parts of the generated machine
            to be used on a machine that is not the machine on which they are created, the
            key security level is always to permit export.</para>
            </summary>
            <param name="Recryption">The private key for use by the recryption provider.</param>
            <param name="Completion">The private key to be used to complete the decryption
            operation.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairAdvanced.CombinePublic(Goedel.Cryptography.KeyPairAdvanced)">
            <summary>
            Combine the public parameters with another public key to create the composite public key pair
            </summary>
            <param name="Contribution">The public key parameters to combine</param>
            <returns>The generated public key pair.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairAdvanced.Combine(Goedel.Cryptography.KeyPairAdvanced)">
            <summary>
            Combine the private parameters with another private key to create the composite private key pair
            </summary>
            <param name="Contribution"></param>
            <returns></returns>
        </member>
        <member name="T:Goedel.Cryptography.KeyAgreementResult">
            <summary>Base class for representation of a key agreement result.</summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyAgreementResult.DER">
            <summary>
            Return the DER encoding of this structure
            </summary>
            <returns>The DER encoded value.</returns>
        </member>
        <member name="P:Goedel.Cryptography.KeyAgreementResult.OID">
            <summary>The OID value for the key agreement result structure. Currently
            unused.</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyAgreementResult.Salt">
            <summary>Salt to use in HKDF key derivation. If set will set the 
            Key derivation function to HKDF with the specified salt.</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyAgreementResult.KeyDerive">
            <summary>Key derivation function. May be overridden, defaults to KDF.</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyAgreementResult.IKM">
            <summary>The key agreement result as a byte array</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyAgreementResult.EphemeralPublicValue">
            <summary>Public key generated by ephemeral key generation.</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyAgreementResult.EphemeralKeyPair">
            <summary>The public key portion of the ephemeral key</summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyAgreementResult.Encrypt(System.Byte[],System.Byte[]@,Goedel.Cryptography.KeyPair@,System.Byte[])">
            <summary>
            Encrypt the bulk key.
            </summary>
            <returns>The encoder</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyAgreementResult.Decrypt(System.Byte[],Goedel.Cryptography.KeyPair,Goedel.Cryptography.KeyAgreementResult,System.Byte[])">
            <summary>
            Perform a key exchange to decrypt a bulk or wrapped key under this one.
            </summary>
            <param name="EncryptedKey">The encrypted session key</param>
            <param name="Ephemeral">Ephemeral key input (required for DH)</param>
            <param name="Partial">Partial key agreement value (for recryption)</param>
            <param name="Salt">Optional salt value for use in key derivation. If specified
            must match the salt used to encrypt.</param>
            <returns>The decoded data instance</returns>
        </member>
        <member name="T:Goedel.Cryptography.ResultECDH">
            <summary>
            Base clase for elliptic curve key agreement results (may be eliminated at a future date).
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.KeyCollectionDelegate">
            <summary>
            Return a new KeyCollection
            </summary>
            <returns></returns>
        </member>
        <member name="T:Goedel.Cryptography.KeyCollection">
            <summary>
            Track a collection of keys from various sources allowing recall when required for recryption use.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyCollection.Default">
            <summary>
            The default collection.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyCollection.NewKeyCollection">
            <summary>Delegate returning a new KeyCollection</summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyCollection.Add(Goedel.Cryptography.KeyPair)">
            <summary>
            Add a keypair to the collection.
            </summary>
            <param name="keyPair">The key pair to add.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyCollection.Add(System.String)">
            <summary>
            Add a recryption group account to the group.
            </summary>
            <param name="recryptionGroup"></param>
        </member>
        <member name="M:Goedel.Cryptography.KeyCollection.TryMatchRecipient(System.String)">
            <summary>
            Attempt to find a private key for the specified recipient entry.
            </summary>
            <param name="keyID">The key identifier to match</param>
            <returns>True if a match is found, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyCollection.LocatePrivate(System.String)">
            <summary>
            Locate a private key
            </summary>
            <param name="UDF">fingerprint of key to locate.</param>
            <returns>A KeyPair instance bound to the private key.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyCollection.Persist(Goedel.Cryptography.KeyPair)">
            <summary>
            Persist a private key if permitted by the KeySecurity model of the key.
            </summary>
            <param name="keyPair">The key to persist.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyCollection.Persist(System.String,Goedel.Cryptography.PKIX.IPKIXPrivateKey,System.Boolean)">
            <summary>
            Persist the key pair specified by <paramref name="privateKey"/> and mark as exportable
            or non-exportable according to the value of <paramref name="Exportable"/>.
            </summary>
            <param name="udf">The UDF of the key</param>
            <param name="privateKey">The private key parameters.</param>
            <param name="Exportable">If true, the key is exportable.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyCollection.GetByAccountEncrypt(System.String)">
            <summary>
            Resolve a public key by identifier. This may be a UDF fingerprint of the key,
            an account identifier or strong account identifier.
            </summary>
            <param name="keyID">The identifier to resolve.</param>
            <returns>The identifier.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyCollection.GetByAccountSign(System.String)">
            <summary>
            Resolve a private key by identifier. This may be a UDF fingerprint of the key,
            an account identifier or strong account identifier.
            </summary>
            <param name="keyID">The identifier to resolve.</param>
            <returns>The identifier.</returns>
        </member>
        <member name="T:Goedel.Cryptography.KeyDerive">
            <summary>
            Base class for key derivation functions
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyDerive.KeyedUDFMaster">
            <summary>Salt used to derive keys to authenticate messages send by the client, i.e. the initiator
            to the server.</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyDerive.KeyedUDFExpand">
            <summary>Salt used to derive keys to authenticate messages send by the client, i.e. the initiator
            to the server.</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyDerive.SaltClientToServerAuthenticate">
            <summary>Salt used to derive keys to authenticate messages send by the client, i.e. the initiator
            to the server.</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyDerive.SaltServerToClientAuthenticate">
            <summary>Salt used to derive keys to authenticate messages send by the server, i.e. the responder
            to the client.</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyDerive.SaltClientToServerEncrypt">
            <summary>Salt used to derive keys to encrypt messages send by the client, i.e. the initiator
            to the server.</summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyDerive.SaltServerToClientEncrypt">
            <summary>Salt used to derive keys to encrypt messages send by the server, i.e. the responder
            to the client.</summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyDerive.ClientToServerAuthenticate(System.Int32)">
            <summary>Key used to authenticate messages send by the client, i.e. the initiator
            to the server.</summary>
            <param name="Length">The key length in bits</param>
            <returns>The key value</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyDerive.ClientToServerToClientAuthenticate(System.Int32)">
            <summary>Key used to authenticate messages send by the server, i.e. the responder
            to the client.</summary>
            <param name="Length">The key length in bits</param>
            <returns>The key value</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyDerive.ClientToServerEncrypt(System.Int32)">
            <summary>Key used to encrypt messages send by the client, i.e. the initiator
            to the server.</summary>
            <param name="Length">The key length in bits</param>
            <returns>The key value</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyDerive.ServerToClientEncrypt(System.Int32)">
            <summary>Key used to encrypt messages send by the server, i.e. the responder
            to the client.</summary>
            <param name="Length">The key length in bits</param>
            <returns>The key value</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyDerive.Derive(System.Byte[],System.Int32)">
            <summary>
            Key Derivation function
            </summary>
            <param name="Info">The information to be used to vary this key</param>
            <param name="Length">The length of the key to extract in bits</param>
            <returns>The key agreement result.</returns>
        </member>
        <member name="T:Goedel.Cryptography.KeyDeriveHKDF">
            <summary>
            The HKDF function described in RFC 5869
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyDeriveHKDF.PRK">
            <summary>The Pseudorandom key constructed from the IKM and salt</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyDeriveHKDF.DefaultLength">
            <summary>The Pseudorandom key constructed from the IKM and salt</summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyDeriveHKDF.#ctor(System.Byte[],System.String,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Construct a KDF instance for the specified keying material
            </summary>
            <param name="ikm">The input Keying material</param>
            <param name="salt">A salt to vary the key derivation by application</param>
            <param name="algorithm">The MAC algorithm to use</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyDeriveHKDF.#ctor(System.Byte[],System.Byte[],Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Construct a KDF instance for the specified keying material
            </summary>
            <param name="ikm">The input Keying material</param>
            <param name="salt">A salt to vary the key derivation by application</param>
            <param name="algorithm">The MAC algorithm to use</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyDeriveHKDF.Derive(System.Byte[],System.Int32)">
            <summary>
            Key Derivation function
            </summary>
            <param name="Info">The information to be used to vary this key</param>
            <param name="Length">The length of the key to extract</param>
            <returns>The derrived key.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyDeriveHKDF.Extract(Goedel.Cryptography.CryptoAlgorithmID,System.Byte[],System.Byte[])">
            <summary>
            The extraction function
            </summary>
            <param name="algorithm">The MAC algorithm to use</param>
            <param name="IKM">The initial keying material</param>
            <param name="Salt">Salt to be used to vary the derived key across domains.</param>
            <returns>The extracted value.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyDeriveHKDF.Expand(Goedel.Cryptography.CryptoAlgorithmID,System.Byte[],System.Int32,System.Byte[])">
            <summary>
            The expansion function
            </summary>
            <param name="algorithm">The MAC algorithm to use</param>
            <param name="prk">The pseudo-random key.</param>
            <param name="length">Length of output key in bits</param>
            <param name="info">Information data</param>
            <returns>The expanded value.</returns>
        </member>
        <member name="T:Goedel.Cryptography.KeyExtensions">
            <summary>
            Extensions class for deriving UDF from key parameters
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyExtensions.UDFBytes(Goedel.Cryptography.PKIX.IPKIXPublicKey,System.Int32)">
            <summary>
            Calculate UDF data value for public key parameters
            </summary>
            <param name="key">The key to calculate the fingerprint of</param>
            <param name="bits">Precision, must be a multiple of 25 bits.</param>
            <returns>The binary fingerprint value</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyExtensions.UDF(Goedel.Cryptography.PKIX.IPKIXPublicKey)">
            <summary>
            Calculate UDF fingerprint presentation for public key parameters
            </summary>
            <param name="key">The key to calculate the fingerprint of</param>
            <returns>The fingerprint presentation</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyExtensions.IsExportable(Goedel.Cryptography.KeySecurity)">
            <summary>
            Returns true if the key is exportable, otherwise false.
            </summary>
            <param name="keyStorage">The key security specifier.</param>
            <returns>true if the key is exportable, otherwise false</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyExtensions.IsPersisted(Goedel.Cryptography.KeySecurity)">
            <summary>
            Returns true if the key is persisted, otherwise false.
            </summary>
            <param name="keyStorage">The key security specifier.</param>
            <returns>true if the key is persisted, otherwise false</returns>
        </member>
        <member name="T:Goedel.Cryptography.PlatformInformation">
            <summary>Enumeration used to specify information requested from the platform
            to enable use of platform specific features.</summary>
        </member>
        <member name="F:Goedel.Cryptography.PlatformInformation.DirectoryPersonalHome">
            <summary>Current user's home directory</summary>
        </member>
        <member name="F:Goedel.Cryptography.PlatformInformation.DirectoryApplicationHome">
            <summary>Current user's home directory</summary>
        </member>
        <member name="F:Goedel.Cryptography.PlatformInformation.DirectoryPersonalKeys">
            <summary>Directory used to store  personal cryptographic keys.</summary>
        </member>
        <member name="F:Goedel.Cryptography.PlatformInformation.DirectoryMeshContainer">
            <summary>Directory used to store Mesh container logs.</summary>
        </member>
        <member name="T:Goedel.Cryptography.GetPlatformInformationDelegate">
            <summary>Returns information used to configure the platform.</summary>
        </member>
        <member name="T:Goedel.Cryptography.KeyPair">
            <summary>
            Base class for all cryptographic key pairs.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPair.Locator">
            <summary>
            The key locator, an Internet name in username@domain format. This is used as the basis 
            for constructing the Strong Internet Name.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPair.StrongInternetName">
            <summary>
            The strong internet name for the key.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPair.KeyUses">
            <summary>The supported key uses (e.g. signing, encryption)</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPair.KeySecurity">
            <summary>The key security model</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPair.TestMode">
            <summary>
            If true, keys will be created in containers prefixed with the name
            "test:" to allow them to be easily identified and cleaned up.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyPair.IsPersisted">
            <summary>
            If true, the key has been written to persistent storage and will be 
            locatable by UDF after the application instance has terminated.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPair.PersistPending">
            <summary>
            If true, the KeySecurity model marks the key to be persisted but the key has not
            (yet) been stored.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyPair.SignatureAlgorithmID(Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Return the CryptoAlgorithmID that would be used with the specified base parameters.
            </summary>
            <param name="base">The base identifier.</param>
            <returns>The computed CryptoAlgorithmID</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPair.Encrypt(System.Byte[],System.Byte[]@,Goedel.Cryptography.KeyPair@,System.Byte[])">
            <summary>
            Encrypt a bulk key.
            </summary>
            <returns>The encoder</returns>
            <param name="key">The key to encrypt.</param>
            <param name="ephemeral">The ephemeral key to use for the exchange (if used)</param>
            <param name="exchange">The private key to use for the exchange.</param>
            <param name="salt">Optional salt value for use in key derivation.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPair.Decrypt(System.Byte[],Goedel.Cryptography.KeyPair,Goedel.Cryptography.CryptoAlgorithmID,Goedel.Cryptography.KeyAgreementResult,System.Byte[])">
            <summary>
            Perform a key exchange to encrypt a bulk or wrapped key under this one.
            </summary>
            <param name="encryptedKey">The encrypted session</param>
            <param name="ephemeral">Ephemeral key input (required for DH)</param>
            <param name="algorithmID">The algorithm to use.</param>
            <param name="partial">Partial key agreement carry in (for recryption)</param>
            <param name="salt">Optional salt value for use in key derivation. If specified
            must match the salt used to encrypt.</param>        
            <returns>The decoded data instance</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPair.Sign(System.Byte[],Goedel.Cryptography.CryptoAlgorithmID,System.Byte[])">
            <summary>
            Sign a precomputed digest
            </summary>
            <param name="data">The data to sign.</param>
            <param name="algorithmID">The algorithm to use.</param>
            <param name="context">Additional data added to the signature scope
            for protocol isolation.</param>
            <returns>The signature data</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPair.SignHash(System.Byte[],Goedel.Cryptography.CryptoAlgorithmID,System.Byte[])">
            <summary>
            Sign a precomputed digest
            </summary>
            <param name="data">The data to sign.</param>
            <param name="algorithmID">The algorithm to use.</param>
            <param name="context">Additional data added to the signature scope
            for protocol isolation.</param>
            <returns>The signature data</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPair.Verify(System.Byte[],System.Byte[],Goedel.Cryptography.CryptoAlgorithmID,System.Byte[])">
            <summary>
            Verify a signature over the purported data.
            </summary>
            <param name="signature">The signature blob value.</param>
            <param name="algorithmID">The signature and hash algorithm to use.</param>
            <param name="context">Additional data added to the signature scope
            for protocol isolation.</param>
            <param name="data">The data to be digested and verified.</param>
            <returns>True if the signature is valid, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPair.VerifyHash(System.Byte[],System.Byte[],Goedel.Cryptography.CryptoAlgorithmID,System.Byte[])">
            <summary>
            Verify a signature over the purported data digest.
            </summary>
            <param name="signature">The signature blob value.</param>
            <param name="algorithmID">The signature and hash algorithm to use.</param>
            <param name="context">Additional data added to the signature scope
            for protocol isolation.</param>
            <param name="digest">The digest value to be verified.</param>
            <returns>True if the signature is valid, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPair.Factory(Goedel.Cryptography.CryptoAlgorithmID,Goedel.Cryptography.KeySecurity,Goedel.Cryptography.KeyCollection,System.Int32,Goedel.Cryptography.KeyUses)">
            <summary>
            Factory method to generate a keypair of a type specified by <paramref name="algorithmID"/>
            and the specified parameters using the default implementation registered with the
            KeyPair type.
            </summary>
            <param name="algorithmID">The type of keypair to create.</param>
            <param name="keySize">The key size (ignored if the algorithm supports only one key size)</param>
            <param name="keySecurity">The key security model</param>
            <param name="keyCollection">The key collection that keys are to be persisted to (dependent on 
            the value of <paramref name="keySecurity"/></param>
            <param name="keyUses">The permitted uses (signing, exchange) for the key.</param>
            <returns>The created key pair</returns>
        </member>
        <member name="F:Goedel.Cryptography.KeyPair.KeyPairFactoryRSA">
            <summary>
            Generate a new keypair. Initialized by the cryptographic
            platform provider.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyPair.KeyPairFactoryDH">
            <summary>
            Generate a new keypair. Initialized by the cryptographic
            platform provider.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyPair.KeyPairFactoryECDH">
            <summary>
            Generate a new keypair. Initialized by the cryptographic
            platform provider.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPair.KeyInfoData">
            <summary>
            The public key data formatted as a PKIX KeyInfo data blob.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPair.PrivateKeyInfoData">
            <summary>
            The private key data formatted as a PKIX KeyInfo data blob.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPair.PKIXPrivateKey">
            <summary>
            The private key data formatted as a PKIX KeyInfo data blob.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPair.PKIXPublicKey">
            <summary>
            The private key data formatted as a PKIX KeyInfo data blob.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPair.UDFBytes">
            <summary>The raw UDF fingerprint.</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPair.UDF">
            <summary>
            Returns the UDF fingerprint of the current key as a string.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyPair.KeyPairPublic">
            <summary>
            Returns a new KeyPair instance which only has the public values.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Goedel.Cryptography.KeyPair.PublicOnly">
            <summary>
            If true, the provider only provides the public key values.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyPair.Persist(Goedel.Cryptography.KeyCollection)">
            <summary>
            Persist key to the key collection <paramref name="keyCollection"/>.
            </summary>
            <param name="keyCollection"></param>
        </member>
        <member name="T:Goedel.Cryptography.KeyPairBaseDH">
            <summary>
            Base class for DH key exchange. Algorithm identifier, factory and conversion methods are
            defined in this class. To make use of a different cryptographic implementation, implement
            a new subclass and override the default key factories.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyPairBaseDH.KeyOIDDomain">
            <summary>
            ASN.1 Object Identifier for the domain parameters (1.3.6.1.4.1.35405.1.22.0).
            </summary>
            <remarks>
            Since this is not standard DH, the OID is in 
            PHB's OID space.
            </remarks>
        </member>
        <member name="F:Goedel.Cryptography.KeyPairBaseDH.KeyOIDPublic">
            <summary>
            ASN.1 Object Identifier for the public key parameters (1.3.6.1.4.1.35405.1.22.1).
            </summary>
            <remarks>
            Since this is not standard DH, the OID is in 
            PHB's OID space.
            </remarks>
        </member>
        <member name="F:Goedel.Cryptography.KeyPairBaseDH.KeyOIDPrivate">
            <summary>
            ASN.1 Object Identifier for the private key parameters (1.3.6.1.4.1.35405.1.22.2).
            </summary>
            <remarks>
            Since this is not standard DH, the OID is in 
            PHB's OID space.
            </remarks>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairBaseDH.DHDomain">
            <summary>
            Return private key parameters in PKIX structure
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairBaseDH.PKIXPrivateKeyDH">
            <summary>
            Return private key parameters in PKIX structure
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairBaseDH.PKIXPublicKeyDH">
            <summary>
            Return public key parameters in PKIX structure
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyPairBaseDH.KeyPairPublicFactory">
            <summary>
            Construct a KeyPair entry from PKIX parameters. Initialized by the cryptographic
            platform provider.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyPairBaseDH.KeyPairPrivateFactory">
            <summary>
            Construct a KeyPair entry from PKIX parameters. Initialized by the cryptographic
            platform provider.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairBaseDH.KeyUses">
            <summary>The supported key uses (e.g. signing, encryption)</summary>
        </member>
        <member name="T:Goedel.Cryptography.KeyPairDH">
            <summary>
            Description of a Diffie Hellman Key Pair. This class exposes methods and properties
            that allow conversion of the public key (and private key if known) values to various
            formats.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyPairDH.PublicKey">
            <summary>
            The internal Public DH parameters
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyPairDH.PrivateKey">
            <summary>
            The internal Private DH parameters
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairDH.IKeyAdvancedPublic">
            <summary>The implementation public key value</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairDH.IKeyAdvancedPrivate">
            <summary>The implementation private key value (if exportable)</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairDH.PKIXPrivateKey">
            <summary>
            The private key data formatted as a PKIX KeyInfo data blob.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairDH.PKIXPublicKey">
            <summary>
            The private key data formatted as a PKIX KeyInfo data blob.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairDH.KeyUses">
            <summary>The supported key uses (e.g. signing, encryption)</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairDH.PublicOnly">
            <summary>If true, the key only has access to public key values.</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairDH.DHDomain">
            <summary>
            Return private key parameters in PKIX structure
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairDH.PKIXPrivateKeyDH">
            <summary>
            Return private key parameters in PKIX structure
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairDH.PKIXPublicKeyDH">
            <summary>
            Return public key parameters in PKIX structure
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairDH.KeyInfoData">
            <summary>
            The public key data formatted as a PKIX KeyInfo data blob.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairDH.PrivateKeyInfoData">
            <summary>
            The private key data formatted as a PKIX KeyInfo data blob.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairDH.#ctor(System.Int32,Goedel.Cryptography.KeySecurity)">
            <summary>
            Create a new DH keypair.
            </summary>
            <param name="KeySize">The key size</param>
            <param name="keySecurity">The key security model</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairDH.#ctor(Goedel.Cryptography.Algorithms.DiffeHellmanPublic,Goedel.Cryptography.KeySecurity)">
            <summary>
            Create a new DH keypair.
            </summary>
            <param name="publicKey">The public key to create a provider for</param>
            <param name="keySecurity">The key security model</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairDH.Persist(Goedel.Cryptography.KeyCollection)">
            <summary>Persist the private key to the specified collection.</summary>
             <param name="keyCollection">The key collection that key are to be persisted to </param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairDH.Generate(System.Int32,Goedel.Cryptography.KeySecurity,Goedel.Cryptography.KeyUses,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Generate a key pair for the specified algorithm and key size.
            </summary>
            <param name="keySize">The Key size, must be 255 or 448</param>
            <param name="keyUses">The permitted uses (signing, exchange) for the key.</param>
            <param name="keySecurity">The key security model</param>
            <param name="algorithmID">The cryptographic algorithm identifier</param>
            <returns>The generated key pair</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairDH.KeyPairPublicFactory(Goedel.Cryptography.PKIX.PKIXPublicKeyDH)">
            <summary>
            Delegate to create a key pair base
            </summary>
            <param name="pkixParameters">The key parameters</param>
            <returns>The created key pair</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairDH.KeyPairPrivateFactory(Goedel.Cryptography.PKIX.PKIXPrivateKeyDH,Goedel.Cryptography.KeySecurity)">
            <summary>
            Delegate to create a key pair base
            </summary>
            <param name="pkixParameters">The key parameters</param>
            <param name="keySecurity">The key security model</param>
            <returns>The created key pair</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairDH.KeyPair(Goedel.Cryptography.IKeyAdvancedPrivate)">
            <summary>
            Factory method to produce a key pair from key parameters.
            </summary>
            <param name="privateKey">The private key</param>
            <returns>The key pair created.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairDH.KeyPair(Goedel.Cryptography.IKeyAdvancedPublic)">
            <summary>
            Factory method to produce a key pair from implementation public key parameters
            </summary>
            <param name="publicKey">The public key</param>
            <returns>The key pair created.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairDH.KeyPairPublic">
            <summary>
            Returns a new KeyPair instance which only has the public values.
            </summary>
            <returns>The new keypair that contains only the public values.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairDH.Agreement(Goedel.Cryptography.KeyPairDH,Goedel.Cryptography.Algorithms.ResultDiffieHellman)">
            <summary>
            Perform a Diffie Hellman Key Agreement to a private key
            </summary>
            <param name="public">Public key parameters</param>
            <param name="carry">Carried result to add in to the agreement (for recryption)</param>
            <returns>The key agreement value ZZ</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairDH.Encrypt(System.Byte[],System.Byte[]@,Goedel.Cryptography.KeyPair@,System.Byte[])">
            <summary>
            Encrypt the specified exchange key.
            </summary>
            <param name="key"></param>
            <param name="exchange"></param>
            <param name="ephemeral"></param>
            <param name="salt"></param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairDH.Decrypt(System.Byte[],Goedel.Cryptography.KeyPair,Goedel.Cryptography.CryptoAlgorithmID,Goedel.Cryptography.KeyAgreementResult,System.Byte[])">
            <summary>
            Perform a key exchange to decrypt a bulk or wrapped key under this one.
            </summary>
            <param name="EncryptedKey">The encrypted session key</param>
            <param name="Ephemeral">Ephemeral key input (required for DH)</param>
            <param name="AlgorithmID">The algorithm to use.</param>
            <param name="Partial">Partial key agreement value (for recryption)</param>
            <param name="Salt">Optional salt value for use in key derivation. If specified
            must match the salt used to encrypt.</param>
            <returns>The decoded data instance</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairDH.SignHash(System.Byte[],Goedel.Cryptography.CryptoAlgorithmID,System.Byte[])">
            <summary>
            Sign a precomputed digest
            </summary>
            <param name="Data">The data to sign.</param>
            <param name="AlgorithmID">The algorithm to use.</param>
            <param name="Context">Additional data added to the signature scope
            for protocol isolation.</param>
            <returns>The signature data</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairDH.VerifyHash(System.Byte[],System.Byte[],Goedel.Cryptography.CryptoAlgorithmID,System.Byte[])">
            <summary>
            Verify a signature over the purported data digest.
            </summary>
            <param name="Signature">The signature blob value.</param>
            <param name="AlgorithmID">The signature and hash algorithm to use.</param>
            <param name="Context">Additional data added to the signature scope
            for protocol isolation.</param>
            <param name="Digest">The digest value to be verified.</param>
            <returns>True if the signature is valid, otherwise false.</returns>
        </member>
        <member name="T:Goedel.Cryptography.KeyPairBaseECDH">
            <summary>
            DH Key Pair
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairBaseECDH.PKIXPrivateKeyECDH">
            <summary>
            Return private key parameters in PKIX structure
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairBaseECDH.PKIXPublicKeyECDH">
            <summary>
            Return public key parameters in PKIX structure
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairBaseECDH.PKIXPrivateKey">
            <summary>
            The private key data formatted as a PKIX KeyInfo data blob.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairBaseECDH.PKIXPublicKey">
            <summary>
            The private key data formatted as a PKIX KeyInfo data blob.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.KeyPairECDH">
            <summary>
            Description of a Diffie Hellman Key Pair. This class exposes methods and properties
            that allow conversion of the public key (and private key if known) values to various
            formats.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairECDH.KeyUses">
            <summary>The supported key uses (e.g. signing, encryption)</summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairECDH.Agreement">
            <summary>
            Create a new ephemeral private key and use it to perform a key
            agreement.
            </summary>
            <returns>The key agreement parameters, the public key value and the
            key agreement.</returns>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairECDH.PublicData">
            <summary>
            The byte encoding of the public key
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairECDH.KeyInfoData">
            <summary>
            The public key data formatted as a PKIX KeyInfo data blob.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairECDH.PrivateKeyInfoData">
            <summary>
            The private key data formatted as a PKIX KeyInfo data blob.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairECDH.Agreement(Goedel.Cryptography.KeyPairECDH,Goedel.Cryptography.Algorithms.ResultDiffieHellman)">
            <summary>
            Perform an ECDH Key Agreement to a private key
            </summary>
            <param name="Public">Public key parameters</param>
            <param name="Carry">Carried result to add in to the agreement (for recryption)</param>
            <returns>The key agreement value ZZ</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairECDH.KeyPairFactory(System.Int32,Goedel.Cryptography.KeySecurity,Goedel.Cryptography.KeyUses,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Generate a key pair for the specified algorithm and key size.
            </summary>
            <param name="keySize">The Key size, must be 255 or 448</param>
            <param name="keyType">The key security model</param>
            <param name="cryptoAlgorithmID">The cryptographic algorithm identifier</param>
            <param name="keyUses">The permitted uses (signing, exchange) for the key.</param>
            <returns>The generated key pair</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairECDH.KeyPairFactory(System.Byte[],Goedel.Cryptography.KeySecurity,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Create a KeyPairECDH instance for the algorithm <paramref name="CryptoAlgorithmID"/> 
            from the key data <paramref name="key"/>. 
            </summary>
            <param name="key">The key data in RFC8032 format.</param>
            <param name="keyType">The key security model</param>
            <param name="CryptoAlgorithmID">The cryptographic algorithm represented by the key.</param>
            <returns>The created key pair.</returns>
        </member>
        <member name="T:Goedel.Cryptography.KeyPairEd25519">
            <summary>
            Ed25519 public / private keypair.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairEd25519.IKeyAdvancedPublic">
            <summary>The implementation public key value</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairEd25519.IKeyAdvancedPrivate">
            <summary>The implementation private key value (if exportable)</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairEd25519.PKIXPrivateKeyECDH">
            <summary>The private key parameters represented in PKIX form</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairEd25519.PKIXPublicKeyECDH">
            <summary>The public key parameters represented in PKIX form</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairEd25519.KeyUses">
            <summary>The supported key uses (e.g. signing, encryption)</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairEd25519.PublicOnly">
            <summary>If true, the key only has access to public key values.</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairEd25519.PublicData">
            <summary>
            The byte encoding of the public key
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairEd25519.#ctor(System.Byte[],Goedel.Cryptography.KeySecurity,Goedel.Cryptography.KeyUses,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Construct a KeyPairEd25519 instance for the specified key data in interchange 
            format. 
            </summary>
            <param name="key">The key data as specified in RFC8032.</param>
            <param name="keyType">The key type.</param>
            <param name="keyUses">The permitted key uses.</param>
            <param name="cryptoAlgorithmID">Specifies the default algorithm variation for use
            in signature operations.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairEd25519.#ctor(Goedel.Cryptography.Algorithms.CurveEdwards25519Private,Goedel.Cryptography.KeyUses,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Construct a KeyPairEd25519 instance for a secret scalar. This is used to create
            private keys using cogeneration.
            </summary>
            <param name="privateKey">The secret scalar value.</param>
            <param name="keyUses">The permitted key uses.</param>
            <param name="cryptoAlgorithmID">Specifies the default algorithm variation for use
            in signature operations.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairEd25519.Generate(Goedel.Cryptography.KeySecurity,Goedel.Cryptography.KeyUses,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Generate a new private key.
            </summary>
            <param name="keyType">The key storage class.</param>
            <param name="keyUses">The permitted key uses</param>
            <param name="cryptoAlgorithmID">Cryptoraphic algorithm</param>
            <returns>The created key pair.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairEd25519.#ctor(Goedel.Cryptography.IKeyAdvancedPublic,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Construct class from a public key value
            </summary>
            <param name="Public">The public key value</param>
            <param name="cryptoAlgorithmID">Specifies the default algorithm variation for use
            in signature operations.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairEd25519.KeyPair(Goedel.Cryptography.IKeyAdvancedPrivate)">
            <summary>
            Factory method to produce a key pair from key parameters.
            </summary>
            <param name="PrivateKey">The private key</param>
            <returns>The key pair created.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairEd25519.KeyPair(Goedel.Cryptography.IKeyAdvancedPublic)">
            <summary>
            Factory method to produce a key pair from implementation public key parameters
            </summary>
            <param name="PublicKey">The public key</param>
            <returns>The key pair created.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairEd25519.KeyPairPublic">
            <summary>
            Returns a new KeyPair instance which only has the public values.
            </summary>
            <returns>The new keypair that contains only the public values.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairEd25519.Persist(Goedel.Cryptography.KeyCollection)">
            <summary>
            Persist the key to a key collection. Note that it is only possible to store a 
            </summary>
            <param name="keyCollection"></param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairEd25519.Agreement(Goedel.Cryptography.KeyPairEd25519,Goedel.Cryptography.Algorithms.CurveEdwards25519Result)">
            <summary>
            Perform a Diffie Hellman Key Agreement to a private key
            </summary>
            <param name="Public">Public key parameters</param>
            <param name="Carry">Carried result to add in to the agreement (for recryption)</param>
            <returns>The key agreement value ZZ</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairEd25519.Encrypt(System.Byte[],System.Byte[]@,Goedel.Cryptography.KeyPair@,System.Byte[])">
            <summary>
            Encrypt a bulk key.
            </summary>
            <returns>The encoder</returns>
            <param name="Key">The key to encrypt.</param>
            <param name="Ephemeral">The ephemeral key to use for the exchange (if used)</param>
            <param name="Exchange">The private key to use for the exchange.</param>
            <param name="Salt">Optional salt value for use in key derivation.</param> 
        </member>
        <member name="M:Goedel.Cryptography.KeyPairEd25519.Decrypt(System.Byte[],Goedel.Cryptography.KeyPair,Goedel.Cryptography.CryptoAlgorithmID,Goedel.Cryptography.KeyAgreementResult,System.Byte[])">
            <summary>
            Perform a key exchange to encrypt a bulk or wrapped key under this one.
            </summary>
            <param name="EncryptedKey">The encrypted session</param>
            <param name="Ephemeral">Ephemeral key input (required for DH)</param>
            <param name="AlgorithmID">The algorithm to use.</param>
            <param name="Partial">Partial key agreement carry in (for recryption)</param>
            <param name="Salt">Optional salt value for use in key derivation. If specified
            must match the salt used to encrypt.</param>        
            <returns>The decoded data instance</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairEd25519.SignHash(System.Byte[],Goedel.Cryptography.CryptoAlgorithmID,System.Byte[])">
            <summary>
            Sign a precomputed digest
            </summary>
            <param name="Data">The data to sign.</param>
            <param name="AlgorithmID">The algorithm to use.</param>
            <param name="Context">Additional data added to the signature scope
            for protocol isolation.</param>
            <returns>The signature data</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairEd25519.VerifyHash(System.Byte[],System.Byte[],Goedel.Cryptography.CryptoAlgorithmID,System.Byte[])">
            <summary>
            Verify a signature over the purported data digest.
            </summary>
            <param name="Signature">The signature blob value.</param>
            <param name="AlgorithmID">The signature and hash algorithm to use.</param>
            <param name="Context">Additional data added to the signature scope
            for protocol isolation.</param>
            <param name="Data">The digest value to be verified.</param>
            <returns>True if the signature is valid, otherwise false.</returns>
        </member>
        <member name="T:Goedel.Cryptography.KeyPairEd448">
            <summary>
            KeyPair binding for Ed448 signature and exchange.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairEd448.IKeyAdvancedPublic">
            <summary>The implementation public key value</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairEd448.IKeyAdvancedPrivate">
            <summary>The implementation private key value (if exportable)</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairEd448.PKIXPrivateKeyECDH">
            <summary>The private key parameters represented in PKIX form</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairEd448.PKIXPublicKeyECDH">
            <summary>The public key parameters represented in PKIX form</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairEd448.PublicOnly">
            <summary>If true, the key only has access to public key values.</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairEd448.KeyUses">
            <summary>The supported key uses (e.g. signing, encryption)</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairEd448.PublicData">
            <summary>
            The byte encoding of the public key
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairEd448.#ctor(System.Byte[],Goedel.Cryptography.KeySecurity,Goedel.Cryptography.KeyUses,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Construct a KeyPairEd25519 instance for the specified key data in interchange 
            format. 
            </summary>
            <param name="key">The key data as specified in RFC8032.</param>
            <param name="keyType">The key type.</param>
            <param name="keyUses">The permitted key uses.</param>
            <param name="cryptoAlgorithmID">Specifies the default algorithm variation for use
            in signature operations.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairEd448.#ctor(Goedel.Cryptography.Algorithms.CurveEdwards448Private,Goedel.Cryptography.KeyUses,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Construct a KeyPairEd25519 instance for a secret scalar. This is used to create
            private keys using cogeneration.
            </summary>
            <param name="privateKey">The secret scalar value.</param>
            <param name="keyUses">The permitted key uses.</param>
            <param name="cryptoAlgorithmID">Specifies the default algorithm variation for use
            in signature operations.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairEd448.Generate(Goedel.Cryptography.KeySecurity,Goedel.Cryptography.KeyUses,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Generate a new private key.
            </summary>
            <param name="keyType">The key storage class.</param>
            <param name="keyUses">The permitted key uses</param>
            <param name="cryptoAlgorithmID">Cryptoraphic algorithm</param>
            <returns>The created key pair.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairEd448.#ctor(Goedel.Cryptography.IKeyAdvancedPublic,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Construct class from a public key value
            </summary>
            <param name="Public">The public key value</param>
            <param name="cryptoAlgorithmID">Specifies the default algorithm variation for use
            in signature operations.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairEd448.KeyPair(Goedel.Cryptography.IKeyAdvancedPrivate)">
            <summary>
            Factory method to produce a key pair from key parameters.
            </summary>
            <param name="PrivateKey">The private key</param>
            <returns>The key pair created.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairEd448.KeyPair(Goedel.Cryptography.IKeyAdvancedPublic)">
            <summary>
            Factory method to produce a key pair from implementation public key parameters
            </summary>
            <param name="PublicKey">The public key</param>
            <returns>The key pair created.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairEd448.KeyPairPublic">
            <summary>
            Returns a new KeyPair instance which only has the public values.
            </summary>
            <returns>The new keypair that contains only the public values.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairEd448.Persist(Goedel.Cryptography.KeyCollection)">
            <summary>
            Persist the key to a key collection. Note that it is only possible to store a 
            </summary>
            <param name="keyCollection"></param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairEd448.Agreement(Goedel.Cryptography.KeyPairEd448,Goedel.Cryptography.Algorithms.CurveEdwards448Result)">
            <summary>
            Perform a Diffie Hellman Key Agreement to a private key
            </summary>
            <param name="Public">Public key parameters</param>
            <param name="Carry">Carried result to add in to the agreement (for recryption)</param>
            <returns>The key agreement value ZZ</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairEd448.Encrypt(System.Byte[],System.Byte[]@,Goedel.Cryptography.KeyPair@,System.Byte[])">
            <summary>
            Encrypt a bulk key.
            </summary>
            <returns>The encoder</returns>
            <param name="Key">The key to encrypt.</param>
            <param name="Ephemeral">The ephemeral key to use for the exchange (if used)</param>
            <param name="Exchange">The private key to use for the exchange.</param>
            <param name="Salt">Optional salt value for use in key derivation.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairEd448.Decrypt(System.Byte[],Goedel.Cryptography.KeyPair,Goedel.Cryptography.CryptoAlgorithmID,Goedel.Cryptography.KeyAgreementResult,System.Byte[])">
            <summary>
            Perform a key exchange to encrypt a bulk or wrapped key under this one.
            </summary>
            <param name="EncryptedKey">The encrypted session</param>
            <param name="Ephemeral">Ephemeral key input (required for DH)</param>
            <param name="AlgorithmID">The algorithm to use.</param>
            <param name="Partial">Partial key agreement carry in (for recryption)</param>
            <param name="Salt">Optional salt value for use in key derivation. If specified
            must match the salt used to encrypt.</param>        
            <returns>The decoded data instance</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairEd448.SignHash(System.Byte[],Goedel.Cryptography.CryptoAlgorithmID,System.Byte[])">
            <summary>
            Sign a precomputed digest
            </summary>
            <param name="Data">The data to sign.</param>
            <param name="AlgorithmID">The algorithm to use.</param>
            <param name="Context">Additional data added to the signature scope
            for protocol isolation.</param>
            <returns>The signature data</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairEd448.VerifyHash(System.Byte[],System.Byte[],Goedel.Cryptography.CryptoAlgorithmID,System.Byte[])">
            <summary>
            Verify a signature over the purported data digest.
            </summary>
            <param name="Signature">The signature blob value.</param>
            <param name="AlgorithmID">The signature and hash algorithm to use.</param>
            <param name="Context">Additional data added to the signature scope
            for protocol isolation.</param>
            <param name="Data">The digest value to be verified.</param>
            <returns>True if the signature is valid, otherwise false.</returns>
        </member>
        <member name="T:Goedel.Cryptography.KeyPairX25519">
            <summary>
            Ed25519 public / private keypair.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyPairX25519.PublicKey">
            <summary>The public key value.</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairX25519.IKeyAdvancedPublic">
            <summary>The implementation public key value</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairX25519.IKeyAdvancedPrivate">
            <summary>The implementation private key value (if exportable)</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairX25519.PKIXPrivateKeyECDH">
            <summary>The private key parameters represented in PKIX form</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairX25519.PKIXPublicKeyECDH">
            <summary>The public key parameters represented in PKIX form</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairX25519.KeyUses">
            <summary>The supported key uses (e.g. signing, encryption)</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairX25519.PublicOnly">
            <summary>If true, the key only has access to public key values.</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairX25519.PublicData">
            <summary>
            The byte encoding of the public key
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairX25519.#ctor(System.Byte[],Goedel.Cryptography.KeySecurity,Goedel.Cryptography.KeyUses,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Construct a KeyPairEd25519 instance for the specified key data in interchange 
            format. 
            </summary>
            <param name="key">The key data as specified in RFC8032.</param>
            <param name="keyType">The key type.</param>
            <param name="keyUses">The permitted key uses.</param>
            <param name="cryptoAlgorithmID">Specifies the default algorithm variation for use
            in signature operations.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairX25519.#ctor(Goedel.Cryptography.Algorithms.CurveX25519Private,Goedel.Cryptography.KeyUses,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Construct a KeyPairEd25519 instance for a secret scalar. This is used to create
            private keys using cogeneration.
            </summary>
            <param name="privateKey">The secret scalar value.</param>
            <param name="keyUses">The permitted key uses.</param>
            <param name="cryptoAlgorithmID">Specifies the default algorithm variation for use
            in signature operations.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairX25519.Generate(Goedel.Cryptography.KeySecurity,Goedel.Cryptography.KeyUses,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Generate a new private key.
            </summary>
            <param name="keyType">The key storage class.</param>
            <param name="keyUses">The permitted key uses</param>
            <param name="cryptoAlgorithmID">Cryptoraphic algorithm</param>
            <returns>The created key pair.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairX25519.#ctor(Goedel.Cryptography.IKeyAdvancedPublic,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Construct class from a public key value
            </summary>
            <param name="Public">The public key value</param>
            <param name="cryptoAlgorithmID">Specifies the default algorithm variation for use
            in signature operations.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairX25519.KeyPair(Goedel.Cryptography.IKeyAdvancedPrivate)">
            <summary>
            Factory method to produce a key pair from key parameters.
            </summary>
            <param name="PrivateKey">The private key</param>
            <returns>The key pair created.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairX25519.KeyPair(Goedel.Cryptography.IKeyAdvancedPublic)">
            <summary>
            Factory method to produce a key pair from implementation public key parameters
            </summary>
            <param name="PublicKey">The public key</param>
            <returns>The key pair created.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairX25519.KeyPairPublic">
            <summary>
            Returns a new KeyPair instance which only has the public values.
            </summary>
            <returns>The new keypair that contains only the public values.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairX25519.Persist(Goedel.Cryptography.KeyCollection)">
            <summary>
            Persist the key to a key collection. Note that it is only possible to store a 
            </summary>
            <param name="keyCollection"></param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairX25519.Agreement(Goedel.Cryptography.KeyPairX25519,Goedel.Cryptography.Algorithms.CurveX25519Result)">
            <summary>
            Perform a Diffie Hellman Key Agreement to a private key
            </summary>
            <param name="Public">Public key parameters</param>
            <param name="Carry">Carried result to add in to the agreement (for recryption)</param>
            <returns>The key agreement value ZZ</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairX25519.Encrypt(System.Byte[],System.Byte[]@,Goedel.Cryptography.KeyPair@,System.Byte[])">
            <summary>
            Encrypt a bulk key.
            </summary>
            <returns>The encoder</returns>
            <param name="Key">The key to encrypt.</param>
            <param name="Ephemeral">The ephemeral key to use for the exchange (if used)</param>
            <param name="Exchange">The private key to use for the exchange.</param>
            <param name="Salt">Optional salt value for use in key derivation.</param> 
        </member>
        <member name="M:Goedel.Cryptography.KeyPairX25519.Decrypt(System.Byte[],Goedel.Cryptography.KeyPair,Goedel.Cryptography.CryptoAlgorithmID,Goedel.Cryptography.KeyAgreementResult,System.Byte[])">
            <summary>
            Perform a key exchange to encrypt a bulk or wrapped key under this one.
            </summary>
            <param name="EncryptedKey">The encrypted session</param>
            <param name="Ephemeral">Ephemeral key input (required for DH)</param>
            <param name="AlgorithmID">The algorithm to use.</param>
            <param name="Partial">Partial key agreement carry in (for recryption)</param>
            <param name="Salt">Optional salt value for use in key derivation. If specified
            must match the salt used to encrypt.</param>        
            <returns>The decoded data instance</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairX25519.SignHash(System.Byte[],Goedel.Cryptography.CryptoAlgorithmID,System.Byte[])">
            <summary>
            Sign a precomputed digest
            </summary>
            <param name="Data">The data to sign.</param>
            <param name="AlgorithmID">The algorithm to use.</param>
            <param name="Context">Additional data added to the signature scope
            for protocol isolation.</param>
            <returns>The signature data</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairX25519.VerifyHash(System.Byte[],System.Byte[],Goedel.Cryptography.CryptoAlgorithmID,System.Byte[])">
            <summary>
            Verify a signature over the purported data digest.
            </summary>
            <param name="Signature">The signature blob value.</param>
            <param name="AlgorithmID">The signature and hash algorithm to use.</param>
            <param name="Context">Additional data added to the signature scope
            for protocol isolation.</param>
            <param name="Data">The digest value to be verified.</param>
            <returns>True if the signature is valid, otherwise false.</returns>
        </member>
        <member name="T:Goedel.Cryptography.KeyPairX448">
            <summary>
            KeyPair binding for Ed448 signature and exchange.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairX448.IKeyAdvancedPublic">
            <summary>The implementation public key value</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairX448.IKeyAdvancedPrivate">
            <summary>The implementation private key value (if exportable)</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairX448.PKIXPrivateKeyECDH">
            <summary>The private key parameters represented in PKIX form</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairX448.PKIXPublicKeyECDH">
            <summary>The public key parameters represented in PKIX form</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairX448.KeyUses">
            <summary>The supported key uses (e.g. signing, encryption)</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairX448.PublicOnly">
            <summary>If true, the key only has access to public key values.</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairX448.PublicData">
            <summary>
            The byte encoding of the public key
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairX448.#ctor(System.Byte[],Goedel.Cryptography.KeySecurity,Goedel.Cryptography.KeyUses,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Construct a KeyPairEd25519 instance for the specified key data in interchange 
            format. 
            </summary>
            <param name="key">The key data as specified in RFC8032.</param>
            <param name="keyType">The key type.</param>
            <param name="keyUses">The permitted key uses.</param>
            <param name="cryptoAlgorithmID">Specifies the default algorithm variation for use
            in signature operations.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairX448.#ctor(Goedel.Cryptography.Algorithms.CurveX448Private,Goedel.Cryptography.KeyUses,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Construct a KeyPairEd25519 instance for a secret scalar. This is used to create
            private keys using cogeneration.
            </summary>
            <param name="privateKey">The secret scalar value.</param>
            <param name="keyUses">The permitted key uses.</param>
            <param name="cryptoAlgorithmID">Specifies the default algorithm variation for use
            in signature operations.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairX448.Generate(Goedel.Cryptography.KeySecurity,Goedel.Cryptography.KeyUses,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Generate a new private key.
            </summary>
            <param name="keyType">The key storage class.</param>
            <param name="keyUses">The permitted key uses</param>
            <param name="cryptoAlgorithmID">Cryptoraphic algorithm</param>
            <returns>The created key pair.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairX448.#ctor(Goedel.Cryptography.IKeyAdvancedPublic,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Construct class from a public key value
            </summary>
            <param name="Public">The public key value</param>
            <param name="cryptoAlgorithmID">Specifies the default algorithm variation for use
            in signature operations.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairX448.KeyPair(Goedel.Cryptography.IKeyAdvancedPrivate)">
            <summary>
            Factory method to produce a key pair from key parameters.
            </summary>
            <param name="PrivateKey">The private key</param>
            <returns>The key pair created.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairX448.KeyPair(Goedel.Cryptography.IKeyAdvancedPublic)">
            <summary>
            Factory method to produce a key pair from implementation public key parameters
            </summary>
            <param name="PublicKey">The public key</param>
            <returns>The key pair created.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairX448.KeyPairPublic">
            <summary>
            Returns a new KeyPair instance which only has the public values.
            </summary>
            <returns>The new keypair that contains only the public values.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairX448.Persist(Goedel.Cryptography.KeyCollection)">
            <summary>
            Persist the key to a key collection. Note that it is only possible to store a 
            </summary>
            <param name="keyCollection"></param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairX448.Agreement(Goedel.Cryptography.KeyPairX448,Goedel.Cryptography.Algorithms.CurveX448Result)">
            <summary>
            Perform a Diffie Hellman Key Agreement to a private key
            </summary>
            <param name="Public">Public key parameters</param>
            <param name="Carry">Carried result to add in to the agreement (for recryption)</param>
            <returns>The key agreement value ZZ</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairX448.Encrypt(System.Byte[],System.Byte[]@,Goedel.Cryptography.KeyPair@,System.Byte[])">
            <summary>
            Encrypt a bulk key.
            </summary>
            <returns>The encoder</returns>
            <param name="Key">The key to encrypt.</param>
            <param name="Ephemeral">The ephemeral key to use for the exchange (if used)</param>
            <param name="Exchange">The private key to use for the exchange.</param>
            <param name="Salt">Optional salt value for use in key derivation.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairX448.Decrypt(System.Byte[],Goedel.Cryptography.KeyPair,Goedel.Cryptography.CryptoAlgorithmID,Goedel.Cryptography.KeyAgreementResult,System.Byte[])">
            <summary>
            Perform a key exchange to encrypt a bulk or wrapped key under this one.
            </summary>
            <param name="EncryptedKey">The encrypted session</param>
            <param name="Ephemeral">Ephemeral key input (required for DH)</param>
            <param name="AlgorithmID">The algorithm to use.</param>
            <param name="Partial">Partial key agreement carry in (for recryption)</param>
            <param name="Salt">Optional salt value for use in key derivation. If specified
            must match the salt used to encrypt.</param>        
            <returns>The decoded data instance</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairX448.SignHash(System.Byte[],Goedel.Cryptography.CryptoAlgorithmID,System.Byte[])">
            <summary>
            Sign a precomputed digest
            </summary>
            <param name="Data">The data to sign.</param>
            <param name="AlgorithmID">The algorithm to use.</param>
            <param name="Context">Additional data added to the signature scope
            for protocol isolation.</param>
            <returns>The signature data</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairX448.VerifyHash(System.Byte[],System.Byte[],Goedel.Cryptography.CryptoAlgorithmID,System.Byte[])">
            <summary>
            Verify a signature over the purported data digest.
            </summary>
            <param name="Signature">The signature blob value.</param>
            <param name="AlgorithmID">The signature and hash algorithm to use.</param>
            <param name="Context">Additional data added to the signature scope
            for protocol isolation.</param>
            <param name="Data">The digest value to be verified.</param>
            <returns>True if the signature is valid, otherwise false.</returns>
        </member>
        <member name="T:Goedel.Cryptography.KeyPairRSA">
            <summary>
            RSA Key Pair
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairRSA.AsymmetricAlgorithm">
            <summary>
            Return the underlying .NET cryptographic provider.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairRSA.PKIXPrivateKey">
            <summary>The private key parameters represented in PKIX form</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairRSA.PKIXPublicKey">
            <summary>The public key parameters represented in PKIX form</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairRSA.PKIXPrivateKeyRSA">
            <summary>
            Return private key parameters in PKIX structure
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairRSA.PKIXPublicKeyRSA">
            <summary>
            Return public key parameters in PKIX structure
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairRSA.KeyUses">
            <summary>The supported key uses (e.g. signing, encryption)</summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairRSA.PublicOnly">
            <summary>If true, the key only has access to public key values.</summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairRSA.SignatureAlgorithmID(Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Return the CryptoAlgorithmID that would be used with the specified base parameters.
            </summary>
            <param name="Base">The base algorithm</param>
            <returns>The computed CryptoAlgorithmID</returns>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairRSA.KeyInfoData">
            <summary>
            Return a PKIX SubjectPublicKeyInfo structure for the public key.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairRSA.PrivateKeyInfoData">
            <summary>
            Return a PKIX SubjectPublicKeyInfo structure for the private key.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairRSA.#ctor(System.Security.Cryptography.RSACryptoServiceProvider,Goedel.Cryptography.KeySecurity,Goedel.Cryptography.KeyUses)">
            <summary>
            Generate an ephemeral RSA key with the specified key size.
            </summary>
            <param name="rsa">The cryptographic provider.</param>
            <param name="keyType">The key type.</param>
            <param name="keyUses">The permitted key uses.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairRSA.#ctor(System.Security.Cryptography.RSAParameters,Goedel.Cryptography.KeySecurity,Goedel.Cryptography.KeyUses)">
            <summary>
            Generate a KeyPair from a .NET set of parameters.
            </summary>
            <param name="RSAParameters">The RSA parameters.</param>
            <param name="keyType">The key type.</param>
            <param name="keyUses">The permitted key uses.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairRSA.#ctor(Goedel.Cryptography.PKIX.PKIXPublicKeyRSA)">
            <summary>
            Generate a KeyPair from a .NET set of parameters.
            </summary>
            <param name="PKIXParameters">The RSA parameters as a PKIX structure</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairRSA.#ctor(Goedel.Cryptography.PKIX.PKIXPrivateKeyRSA)">
            <summary>
            Generate a KeyPair from a .NET set of parameters.
            </summary>
            <param name="PKIXParameters">The RSA parameters as a PKIX structure</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairRSA.Generate(System.Int32,Goedel.Cryptography.KeySecurity,Goedel.Cryptography.KeyUses,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Generate a new RSA KeyPair with the specified parameters.
            </summary>
            <param name="keySize">The Key size</param>
            <param name="keySecurity">The key security model</param>
            <param name="keyUses">The permitted uses (signing, exchange) for the key.</param>
            <param name="algorithmID">The key algorithm (ignored).</param>
            <returns>The created key pair</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairRSA.Persist(Goedel.Cryptography.KeyCollection)">
            <summary>
            Persist key to <paramref name="keyCollection"/>.
            </summary>
            <param name="keyCollection">Key Collection the key is to be persisted to.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairRSA.KeyPairPublic">
            <summary>
            Returns a new KeyPair instance which only has the public values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairRSA.Locate(System.String)">
            <summary>
            Locate key by fingerprint.
            </summary>
            <param name="UDF">Fingerprint of key to be located.</param>
            <returns>The located key (if found).</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairRSA.KeyPairFactory(Goedel.Cryptography.KeySecurity,Goedel.Cryptography.KeyUses,Goedel.Cryptography.CryptoAlgorithmID,System.Int32)">
            <summary>
            Factory method.
            </summary>
            <param name="keySecurity">The key security model</param>
            <param name="keyUses">The permitted uses (signing, exchange) for the key.</param>
            <param name="algorithmID">The type of keypair to create.</param>
            <param name="keySize">The key size</param>
            <returns>The created key pair</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairRSA.KeyPairPublicFactory(Goedel.Cryptography.PKIX.PKIXPublicKeyRSA)">
            <summary>
            Delegate to create a key pair base
            </summary>
            <param name="PKIXParameters">The parameters to construct from</param>
            <returns>The created key pair</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairRSA.KeyPairPrivateFactory(Goedel.Cryptography.PKIX.PKIXPrivateKeyRSA,Goedel.Cryptography.KeySecurity,Goedel.Cryptography.KeyCollection)">
            <summary>
            Delegate to create a key pair base
            </summary>
            <param name="PKIXParameters">The parameters to construct from</param>
            <param name="keySecurity">The key security model</param>
            <param name="keyCollection">The key collection that keys are to be persisted to (dependent on 
            the value of <paramref name="keySecurity"/></param>/// <returns>The created key pair</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairRSA.Encrypt(System.Byte[],System.Byte[]@,Goedel.Cryptography.KeyPair@,System.Byte[])">
            <summary>
            Encrypt a bulk key.
            </summary>
            <returns>The encoder</returns>
            <param name="Key">The key to encrypt.</param>
            <param name="Ephemeral">The ephemeral key to use for the exchange (if used)</param>
            <param name="Exchange">The private key to use for the exchange.</param>
            <param name="Salt">Optional salt value for use in key derivation.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairRSA.Decrypt(System.Byte[],Goedel.Cryptography.KeyPair,Goedel.Cryptography.CryptoAlgorithmID,Goedel.Cryptography.KeyAgreementResult,System.Byte[])">
            <summary>
            Perform a key exchange to encrypt a bulk or wrapped key under this one.
            </summary>
            <param name="EncryptedKey">The encrypted session</param>
            <param name="Ephemeral">Ephemeral key input (required for DH)</param>
            <param name="AlgorithmID">The algorithm to use.</param>
            <param name="Partial">Partial key agreement carry in (for recryption)</param>
            <param name="Salt">Optional salt value for use in key derivation. If specified
            must match the salt used to encrypt.</param>        
            <returns>The decoded data instance</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairRSA.SignHash(System.Byte[],Goedel.Cryptography.CryptoAlgorithmID,System.Byte[])">
            <summary>
            Sign a precomputed digest
            </summary>
            <param name="Data">The data to sign.</param>
            <param name="AlgorithmID">The algorithm to use.</param>
            <param name="Context">Additional data added to the signature scope
            for protocol isolation.</param>
            <returns>The signature data</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairRSA.VerifyHash(System.Byte[],System.Byte[],Goedel.Cryptography.CryptoAlgorithmID,System.Byte[])">
            <summary>
            Verify a signature over the purported data digest.
            </summary>
            <param name="Signature">The signature blob value.</param>
            <param name="AlgorithmID">The signature and hash algorithm to use.</param>
            <param name="Context">Additional data added to the signature scope
            for protocol isolation.</param>
            <param name="Digest">The digest value to be verified.</param>
            <returns>True if the signature is valid, otherwise false.</returns>
        </member>
        <member name="T:Goedel.Cryptography.CryptoKey">
            <summary>
            Base class for all cryptographic keys.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoKey.CryptoAlgorithmID">
            <summary>
            Cryptographic Algorithm Identifier
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoKey.UDF">
            <summary>
            UDF fingerprint of the key
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoKey.UDFBytes">
            <summary>
            UDF fingerprint of the key
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CryptoKey.Name">
            <summary>
            The key name.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.FactoryRSAPublicKeyDelegate">
            <summary>
            Delegate to create a key pair base
            </summary>
            <param name="pkixParameters"></param>
            <returns></returns>
        </member>
        <member name="T:Goedel.Cryptography.FactoryRSAPrivateKeyDelegate">
            <summary>
            Delegate to create a key pair base
            </summary>
            <param name="keyType">The key security model</param>
            <param name="pkixParameters">The key parameters</param>
            <param name="keyCollection">The key collection that keys are to be persisted to (dependent on 
            the value of <paramref name="keyType"/></param>
            <returns>the created key pair</returns>
        </member>
        <member name="T:Goedel.Cryptography.KeyPairBaseRSA">
            <summary>
            RSA Key Pair
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairBaseRSA.PKIXPrivateKeyRSA">
            <summary>
            Return private key parameters in PKIX structure
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyPairBaseRSA.PKIXPublicKeyRSA">
            <summary>
            Return public key parameters in PKIX structure
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyPairBaseRSA.KeyPairPublicFactory">
            <summary>
            Construct a KeyPair entry from PKIX parameters. Defaults to the built in
            provider.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.KeyPairBaseRSA.KeyPairPrivateFactory">
            <summary>
            Construct a KeyPair entry from PKIX parameters. Initialized by the cryptographic
            platform provider.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairBaseRSA.Create(Goedel.Cryptography.PKIX.PKIXPublicKeyRSA)">
            <summary>
            Create a KeyPair for the specified parameters.
            </summary>
            <param name="pkixKey">The public key parameters.</param>
            <returns>The created key pair.</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyPairBaseRSA.Create(Goedel.Cryptography.PKIX.PKIXPrivateKeyRSA)">
            <summary>
            Create a KeyPair for the specified parameters.
            </summary>
            <param name="pkixKey">The private key parameters.</param>
            <returns>The created key pair.</returns>
        </member>
        <member name="T:Goedel.Cryptography.FactoryKeyPairDelegate">
            <summary>
            Delegate to create a new keypair.
            </summary>
            <param name="algorithmID">The type of keypair to create.</param>
            <param name="keyType">The key security model</param>
            <param name="keySize">The key size (ignored if the algorithm supports only one key size)</param>
            <param name="keyUses">The permitted uses (signing, exchange) for the key.</param>
            <returns>The created key pair</returns>
        </member>
        <member name="T:Goedel.Cryptography.FactoryDHPublicKeyDelegate">
            <summary>
            Delegate to create a key pair base
            </summary>
            <param name="pkixParameters">The PKIX parameter structure from which to create
            the key pair</param>
            <returns>The created key pair</returns>
        </member>
        <member name="T:Goedel.Cryptography.FactoryDHPrivateKeyDelegate">
            <summary>
            Delegate to create a key pair base
            </summary>
            <param name="keyType">The key security model</param>
            <param name="pkixParameters">The PKIX parameter structure from which to create
            the key pair</param>
            <returns>The created key pair</returns>
        </member>
        <member name="T:Goedel.Cryptography.FactoryECDHPublicKeyDelegate">
            <summary>
            Delegate to create a key pair base
            </summary>
            <param name="pkixParameters">The PKIX parameter structure from which to create
            the key pair</param>
            <returns>The created key pair</returns>
        </member>
        <member name="T:Goedel.Cryptography.FactoryECDHPrivateKeyDelegate">
            <summary>
            Delegate to create a key pair base
            </summary>
            <param name="keyType">The key security model</param>
            <param name="pkixParameters">The PKIX parameter structure from which to create
            the key pair</param>
            <returns>The created key pair</returns>
        </member>
        <member name="T:Goedel.Cryptography.Secret">
            <summary>
            Represents a secret key that may be split into or reformed from 
            a collection of shares.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Secret.KeyBits">
            <summary>
            Size of key in bits.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Secret.KeyBytes">
            <summary>
            Size of key in bytes;
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Secret.Key">
            <summary>
            The Key value
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Secret.UDFKey">
            <summary>
            The Key Value as a Base32 encoded string.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Secret.UDFIdentifier">
            <summary>The UDF identifier of the secret value.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Secret.#ctor(System.Int32)">
            <summary>
            Create a new random secret with the specified number of bits.
            </summary>
            <param name="bits">Nyumber of bits in the secret</param>
        </member>
        <member name="M:Goedel.Cryptography.Secret.#ctor(System.Byte[])">
            <summary>
            Create a secret from the specified key value.
            </summary>
            <param name="key">The key value.</param>
        </member>
        <member name="M:Goedel.Cryptography.Secret.#ctor(System.String)">
            <summary>
            Create a secret from the specified key value.
            </summary>
            <param name="udf">The key value as a UDF.</param>
        </member>
        <member name="M:Goedel.Cryptography.Secret.#ctor(Goedel.Cryptography.KeyShare[])">
            <summary>
            Recreate a secret from the specified shares.
            </summary>
            <param name="shares">The shares to be recombined.</param>
        </member>
        <member name="M:Goedel.Cryptography.Secret.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Recreate a secret from shares specified as Base32 encoded strings.
            </summary>
            <param name="shares">The shares to be recombined.</param>
        </member>
        <member name="M:Goedel.Cryptography.Secret.#ctor">
            <summary>
            Constructor for use in inherited classes.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Secret.GetHashCode">
            <summary>
            Hash code of the current class.
            </summary>
            <returns>Hash code of object instance.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Secret.Equals(System.Object)">
            <summary>Test for equality
            </summary>
            <param name="obj">The secret to test against</param>
            <returns>true if the parameter has the same key value, false otherwise.</returns>
        </member>
        <member name="F:Goedel.Cryptography.Secret.PrimeValues">
            <summary>The set of prime offset values to be added to 32^(n) to give the
            discrete modulus for secrets of up to 32n bits.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Secret.GetPrime(System.Int32,System.Numerics.BigInteger@,System.Int32@)">
            <summary>
            Return the prime number that is strictly greater than 2^n where n is 
            the smallest integer multiple of 32 greater or equal to <paramref name="bits"/>.
            </summary>
            <param name="bits">The number of bits to return the prime value for.</param>
            <param name="exponent">The power of 32</param>
            <param name="index">The number of 32 bit blocks required.</param>
            <returns>The prime number.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Secret.Split(System.Int32,System.Int32)">
            <summary>
            Create a set of N key shares with a quorum of K.
            </summary>
            <param name="n">Number of key shares to create (max is 32).</param>
            <param name="k">Quorum of key shares required to reconstruct the secret.</param>
            <returns>The key shares created.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Secret.Split(System.Int32,System.Int32,System.Numerics.BigInteger[]@)">
            <summary>
            Create a set of N key shares with a quorum of K.
            </summary>
            <param name="n">Number of key shares to create (max is 15).</param>
            <param name="k">Quorum of key shares required to reconstruct the secret.</param>
            <param name="polynomial">The polynomial co-efficients generated.</param>
            <returns>The key shares created.</returns>
        </member>
        <member name="T:Goedel.Cryptography.KeyShare">
            <summary>
            A member of a key share collection.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyShare.UDFKey">
            <summary>
            The Key Value as a Base32 encoded string.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyShare.Threshold">
            <summary>
            Quorum required to recombine the key shares to recover the secret.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyShare.Index">
            <summary>
            Index of this key share in the collection.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyShare.Data">
            <summary>
            The key share data.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.KeyShare.Value">
            <summary>
            The key share data as a BigInteger.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyShare.#ctor(System.String)">
            <summary>
            Construct a key share with the specified secret value.
            </summary>
            <param name="text">The secret value in text form.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyShare.#ctor(System.Int32,System.Numerics.BigInteger,System.Int32)">
            <summary>
            Construct a key share with the specified secret value and index.
            </summary>
            <param name="index">The key share index and threshold.</param>
            <param name="value">The key share value/</param>
            <param name="bytes">Number of bytes in the share to be constructed.</param>
        </member>
        <member name="M:Goedel.Cryptography.KeyShare.#ctor(System.Int32,System.Byte[])">
            <summary>
            Construct a key share with the specified secret value and index.
            </summary>
            <param name="index">The key share index and threshold.</param>
            <param name="data">The key share value/</param>
        </member>
        <member name="T:Goedel.Cryptography.BlockProviderFactoryDelegate">
            <summary>Factory delegate for block processing provider.</summary>
        </member>
        <member name="T:Goedel.Cryptography.BlockProvider">
            <summary>
            Base class for block providers
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.BlockProvider.BlockSize">
            <summary>The block size in bits</summary>
        </member>
        <member name="M:Goedel.Cryptography.BlockProvider.Process(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encrypt or decrypt a single block of data under the specified key
            </summary>
            <param name="Input">The input data block</param>
            <param name="InputOffset">The input offset</param>
            <param name="Output">The output data block</param>
            <param name="OutputOffset">The output offset</param>
        </member>
        <member name="T:Goedel.Cryptography.KeyWrap">
            <summary>Base class for key wrapping operations</summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyWrap.Wrap(System.Byte[],System.Byte[])">
            <summary>Wrap a symmetric key</summary>
            <param name="Kek">The key encryption key</param>
            <param name="Plaintext">The Key to wrap</param>
            <returns>The wrapped key</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyWrap.Unwrap(System.Byte[],System.Byte[])">
            <summary>Wrap a symmetric key</summary>
            <param name="Kek">The key encryption key</param>
            <param name="Ciphertext">The encrypted key to unwrap</param>
            <returns>The unwrapped key</returns>
        </member>
        <member name="T:Goedel.Cryptography.KeyWrapRFC3394">
            <summary>RFC3394 key wrap</summary>
        </member>
        <member name="M:Goedel.Cryptography.KeyWrapRFC3394.Wrap(System.Byte[],System.Byte[])">
            <summary>Wrap a symmetric key</summary>
            <param name="Kek">The key encryption key</param>
            <param name="Plaintext">The Key to wrap</param>
            <returns>The wrapped key</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyWrapRFC3394.WrapKey(System.Byte[],System.Byte[])">
            <summary>Wrap a symmetric key</summary>
            <param name="Kek">The key encryption key</param>
            <param name="Plaintext">The Key to wrap</param>
            <returns>The wrapped key</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyWrapRFC3394.Unwrap(System.Byte[],System.Byte[])">
            <summary>Wrap a symmetric key</summary>
            <param name="Kek">The key encryption key</param>
            <param name="Ciphertext">The encrypted key to unwrap</param>
            <returns>The unwrapped key</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyWrapRFC3394.UnwrapKey(System.Byte[],System.Byte[])">
            <summary>Wrap a symmetric key</summary>
            <param name="Kek">The key encryption key</param>
            <param name="Ciphertext">The encrypted key to unwrap</param>
            <returns>The unwrapped key</returns>
        </member>
        <member name="M:Goedel.Cryptography.KeyWrapRFC3394.Trace(Goedel.Cryptography.Block[])">
            <summary>
            Debug aid
            </summary>
            <param name="R">Write out the register set</param>
        </member>
        <member name="T:Goedel.Cryptography.Block">
            <summary>Represents a block of data to be processed by cryptographic operations.
            This is used as a building block in key wrapping and derrivation functions.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Block.#ctor(System.Byte[])">
            <summary>
            Constructor from binary data.
            </summary>
            <param name="Data">The data to process</param>
        </member>
        <member name="M:Goedel.Cryptography.Block.#ctor(System.Int32)">
            <summary>
            Constructor from integer data.
            </summary>
            <param name="Value">Data value to initialize the value field.</param>
        </member>
        <member name="M:Goedel.Cryptography.Block.#ctor(System.Byte[],System.Int32)">
            <summary>
            Construct a data block from the specified source value
            </summary>
            <param name="Source">The source value.</param>
            <param name="Index">Offset within the block.</param>
        </member>
        <member name="M:Goedel.Cryptography.Block.Verify(System.Int32)">
            <summary>
            Check that the sentry value is correct (bytes all the same value
            </summary>
            <param name="Value">The sentry value to check.</param>
            <returns>True if the sentry value is correct, false otherwise.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Block.Concat(Goedel.Cryptography.Block,Goedel.Cryptography.Block,System.Byte[])">
            <summary>
            Concatenate a left and right data value to form a cipher block.
            </summary>
            <param name="Left">The MSB</param>
            <param name="Right">The LSB</param>
            <param name="Result">The array to write the result to.</param>
        </member>
        <member name="M:Goedel.Cryptography.Block.XOR(System.Int64)">
            <summary>
            Update the block value with the specified mask value.
            </summary>
            <param name="Mask">XOR mask value</param>
        </member>
        <member name="M:Goedel.Cryptography.Block.MSB(System.Byte[])">
            <summary>
            Extract the MSB from a cipher block.
            </summary>
            <param name="Source">The cipher block to extract from</param>
            <returns>The result</returns>
        </member>
        <member name="M:Goedel.Cryptography.Block.LSB(System.Byte[])">
            <summary>
            Extract the LSB from a cipher block.
            </summary>
            <param name="Source">The cipher block to extract from</param>
            <returns>The result</returns>
        </member>
        <member name="M:Goedel.Cryptography.Block.ToByte(Goedel.Cryptography.Block[],System.Int32)">
            <summary>
            Convert the result to an array
            </summary>
            <param name="Blocks">The blocks to convert</param>
            <param name="Offset">Offset from start of array</param>
            <returns>The converted blocks.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Block.ToString">
            <summary>
            Convert block value to hexadecimal string
            </summary>
            <returns>The text string representing the block value</returns>
        </member>
        <member name="T:Goedel.Cryptography.NamespaceDoc">
            <summary>
            Core class for cryptographic algorithm handling. Although .NET provides classes
            to do some of this, the implementations are inconsistent across algorithm types
            and do not support many of the algorithms that we wish to use. 
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.Certificate">
            <summary>
            Backing class for managing X.509v3 Certificates using the 
            native C# parser code.
            </summary>
            <summary>
            Certificate 
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.Certificate.Data">
            <summary>
            Returns the cached binary value of the certificate. Note that this 
            property is only filled when the certificate is signed.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.Certificate.Application">
            <summary>
            High level description of key use.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.Certificate.UDF">
            <summary>
            The UDF fingerprint of the keyInfo element.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.Certificate.SHA1">
            <summary>
            The SHA1 fingerprint of the certificate.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.Certificate.SHA256">
            <summary>
            The SHA-2-256 fingerprint of the certificate.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.Certificate.KeyPair">
            <summary>
            The Certificate Public Key
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.Certificate.SubjectKeyIdentifier">
            <summary>
            Subject Key Identifier
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.Certificate.#ctor(Goedel.Cryptography.KeyPair,Goedel.Cryptography.PKIX.Application,Goedel.Cryptography.PKIX.Certificate)">
            <summary>
            Create an anonymous certificate with the specified key uses, subject Key and
            sign with the specified key.
            <para>
            Default lifespan is 20 years.
            </para>
            </summary>
            <param name="SubjectKey">Cryptographic provider for the subject key.</param>
            <param name="Application">Certificate application(s).</param>
            <param name="SigningCertificate">Certificate of signer.</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.Certificate.#ctor(Goedel.Cryptography.KeyPair,Goedel.Cryptography.PKIX.Application)">
            <summary>
            Create a certificate with the specified subject Key. Note that the template is 
            must be completed with calls to set validity etc. before use.
            </summary>
            <param name="SubjectKey">Cryptographic provider for the subject key.</param>
            <param name="Application">Certificate application(s).</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.Certificate.#ctor(Goedel.Cryptography.KeyPair,Goedel.Cryptography.PKIX.Application,System.String,System.String)">
            <summary>
            Create a certificate with the specified subject Key. Note that the template is 
            must be completed with calls to set validity etc. before use.
            </summary>
            <param name="SubjectKey">Cryptographic provider for the subject key.</param>
            <param name="Application">Certificate application(s).</param>
            <param name="Subject">Subject name.</param>
            <param name="SubjectAltName">The certificate subject altname</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.Certificate.#ctor(System.Byte[],Goedel.Cryptography.PKIX.TBSCertificate)">
            <summary>
            Create a certificate
            </summary>
            <param name="Data">The binary certificate data</param>
            <param name="TBSCertificate">The TBS certificate part</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.Certificate.Sign(Goedel.Cryptography.PKIX.Certificate)">
            <summary>
            Sign certificate. The issuer name and key identifier are taken from the
            signing certificate.
            </summary>
            <param name="SigningCertificate">Certificate of signer.</param>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Certificate.TBSCertificate">
            <summary>
            ASN.1 member TBSCertificate 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Certificate.SignatureAlgorithm">
            <summary>
            ASN.1 member SignatureAlgorithm 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Certificate.Signature">
            <summary>
            ASN.1 member Signature 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.Certificate.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.CertificationRequest">
            <summary>
            CertificationRequest 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.CertificationRequest.#ctor">
            <summary>
            Construct a certification request.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.CertificationRequest.#ctor(Goedel.Cryptography.PKIX.Certificate)">
            <summary>
            Construct a certification request for the specified certificate.
            </summary>
            <param name="Certificate">A certificate prototype.</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.CertificationRequest.SetSubject(System.String)">
            <summary>
            Set the subject name.
            </summary>
            <param name="name">The subject name to set.</param>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.CertificationRequest.CertificationRequestInfo">
            <summary>
            ASN.1 member CertificationRequestInfo 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.CertificationRequest.SignatureAlgorithm">
            <summary>
            ASN.1 member SignatureAlgorithm 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.CertificationRequest.Signature">
            <summary>
            ASN.1 member Signature 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.CertificationRequest.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.CertificationRequestInfo">
            <summary>
            CertificationRequestInfo 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.CertificationRequestInfo.#ctor">
            <summary>
            Create an empty CertificationRequestInfo class with version 1.0
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.CertificationRequestInfo.Version">
            <summary>
            ASN.1 member Version 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.CertificationRequestInfo.Subject">
            <summary>
            ASN.1 member Subject 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.CertificationRequestInfo.SubjectPublicKeyInfo">
            <summary>
            ASN.1 member SubjectPublicKeyInfo 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.CertificationRequestInfo.Attributes">
            <summary>
            ASN.1 member Attributes 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.CertificationRequestInfo.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.PKIXPublicKeyDH">
            <summary>
            PKIXPublicKeyDH 
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPublicKeyDH.Domain">
            <summary>
            The shared domain parameters
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.PKIXPublicKeyDH.Shared">
            <summary>
            ASN.1 member Shared 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.PKIXPublicKeyDH.Public">
            <summary>
            ASN.1 member Public 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPublicKeyDH.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPublicKeyDH.SubjectPublicKeyInfo(System.Int32[])">
            <summary>
            Construct a PKIX SubjectPublicKeyInfo block
            </summary>
            <param name="OIDValue">The OID value</param>
            <returns>The PKIX structure</returns>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPublicKeyDH.OID">
            <summary>
            Return the algorithm identifier that represents this key
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPublicKeyDH.PublicParameters">
            <summary>
            Return the corresponding public parameters
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.PKIXPrivateKeyDH">
            <summary>
            PKIXPrivateKeyDH 
            </summary>
            <summary>
            PKIXPrivateKeyDH 
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPrivateKeyDH.Domain">
            <summary>
            The shared domain parameters
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.PKIXPrivateKeyDH.Shared">
            <summary>
            ASN.1 member Shared 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.PKIXPrivateKeyDH.Public">
            <summary>
            ASN.1 member Public 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.PKIXPrivateKeyDH.Private">
            <summary>
            ASN.1 member Private 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPrivateKeyDH.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPrivateKeyDH.SubjectPublicKeyInfo(System.Int32[])">
            <summary>
            Construct a PKIX SubjectPublicKeyInfo block
            </summary>
            <param name="OIDValue">The OID value</param>
            <returns>The PKIX structure</returns>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPrivateKeyDH.OID">
            <summary>
            Return the algorithm identifier that represents this key
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPrivateKeyDH.PublicParameters">
            <summary>
            Return the corresponding public parameters
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPrivateKeyDH.PKIXPublicKeyDH">
            <summary>
            Return the corresponding public parameters
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPrivateKeyDH.#ctor">
            <summary>
            Default constructor, create empty structure.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPrivateKeyDH.#ctor(System.Byte[])">
            <summary>
            Create structure from ASN1 data
            </summary>
            <param name="Data">The encoded private key data</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPrivateKeyDH.Decode(Goedel.ASN.DecodeBuffer)">
             <summary>
             Decode buffer to populate class members
            
             This is done in the forward direction
             </summary>
             <param name="Buffer">The data to decode.</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.DHDomain">
            <summary>
            DHDomain 
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.DHDomain.UDFData">
            <summary>
            Return the UDF value as a byte sequence.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.DHDomain.DHDomain2048">
            <summary>
            Shared parameters for the 2048 bit curve
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.DHDomain.DHDomain4096">
            <summary>
            Shared parameters for the 2048 bit curve
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.DHDomain.BigIntegerP">
            <summary>
            The Modulus as a big integer
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.DHDomain.BigIntegerG">
            <summary>
            The Generator as a big integer
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.DHDomain.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Create domain parameters from BigInteger parameters.
            </summary>
            <param name="P">The Modulus value</param>
            <param name="G">The generator value</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.DHDomain.GetByUDF(System.Byte[])">
            <summary>
            Return the domain parameter object by UDF value
            </summary>
            <param name="ID">The byte code identifier.</param>
            <returns>The domain parameter.</returns>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.DHDomain.Match(System.Byte[])">
            <summary>Test a UDF identifier value for a match.
            </summary>
            <param name="ID">The identifier to compare</param>
            <returns>true if the UDF value matches the specified identifier.</returns>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.DHDomain.Modulus">
            <summary>
            ASN.1 member Modulus 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.DHDomain.Generator">
            <summary>
            ASN.1 member Generator 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.DHDomain.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.SubjectPublicKeyInfo">
            <summary>
            SubjectPublicKeyInfo 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.SubjectPublicKeyInfo.#ctor(System.String,System.Byte[])">
            <summary>
            Construct from algorithm identifier and key data.
            </summary>
            <param name="OID">Algorithm identifier.</param>
            <param name="KeyData">Key Data.</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.SubjectPublicKeyInfo.#ctor(System.Int32[],System.Byte[])">
            <summary>
            Construct from algorithm identifier and key data.
            </summary>
            <param name="OID">Algorithm identifier.</param>
            <param name="KeyData">Key Data.</param>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.SubjectPublicKeyInfo.Algorithm">
            <summary>
            ASN.1 member Algorithm 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.SubjectPublicKeyInfo.SubjectPublicKey">
            <summary>
            ASN.1 member SubjectPublicKey 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.SubjectPublicKeyInfo.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.AlgorithmIdentifier">
            <summary>
            AlgorithmIdentifier 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.AlgorithmIdentifier.#ctor(Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Construct from OID identifier string.
            </summary>
            <param name="ID">The identifier as a CryptoAlgorithmID</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.AlgorithmIdentifier.#ctor(System.String)">
            <summary>
            Construct from OID identifier string.
            </summary>
            <param name="ID">The identifier as a string</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.AlgorithmIdentifier.#ctor(System.Int32[])">
            <summary>
            Create an Algorithm Identifier from an integer array.
            </summary>
            <param name="Numbers">OID as an integer sequence.</param>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.AlgorithmIdentifier.Algorithm">
            <summary>
            ASN.1 member Algorithm 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.AlgorithmIdentifier.Parameters">
            <summary>
            ASN.1 member Parameters 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.AlgorithmIdentifier.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.NamespaceDoc">
            <summary>
            Core class for handling of certificates. While the .NET classes 
            can read certificates, they do not generate them.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.Constants">
            <summary>
            id_pkix =  iso(1)  identified_organization(3)  dod(6)  internet(1)  security(5)  mechanisms(5)  pkix(7) 
            </summary>
            <summary>
            id_at =  joint_iso_ccitt(2)  ds(5)  at(4) 
            </summary>
            <summary>
            rsadsi =  iso(1)  member_body(2)  us(840)  rsadsi(113549) 
            </summary>
            <summary>
            id_ce =  joint_iso_ccitt(2)  ds(5)  ce(29) 
            </summary>
            <summary>
            holdInstruction =  joint_iso_itu_t(2)  member_body(2)  us(840)  x9cm(10040)  holdInstruction(2) 
            </summary>
            <summary>
            nistalgorithm =  joint_iso_itu_t(2)  country(16)  us(840)  organization(1)  gov(101)  csor(3)  nistalgorithm(4) 
            </summary>
            <summary>
            dod_arc =  iso(1)  identified_organization(3)  dod(6)  internet(1)  private(4)  enterprise(1)  number(6449)  certificates(1)  categories(3)  certified_delivery(5) 
            </summary>
            <summary>
            dds_arc =  iso(1)  identified_organization(3)  dod(6)  internet(1)  private(4)  enterprise(1)  number(35405) 
            </summary>
            <summary>
            id_crfg_curve_algs =  iso(1)  identified_organization(3)  Thawte(101) 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_pkix">
            <summary>
            id_pkix as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_pkix">
            <summary>
            id_pkix as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_pe">
            <summary>
            id_pe = id_pkix (1) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_pe">
            <summary>
            id_pe = id_pkix (1) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_pe_authorityInfoAccess">
            <summary>
            id_pe_authorityInfoAccess = id_pe (1) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_pe_authorityInfoAccess">
            <summary>
            id_pe_authorityInfoAccess = id_pe (1) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_pe_subjectInfoAccess">
            <summary>
            id_pe_subjectInfoAccess = id_pe (11) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_pe_subjectInfoAccess">
            <summary>
            id_pe_subjectInfoAccess = id_pe (11) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_qt">
            <summary>
            id_qt = id_pkix (2) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_qt">
            <summary>
            id_qt = id_pkix (2) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_qt_cps">
            <summary>
            id_qt_cps = id_qt (1) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_qt_cps">
            <summary>
            id_qt_cps = id_qt (1) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_qt_unotice">
            <summary>
            id_qt_unotice = id_qt (2) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_qt_unotice">
            <summary>
            id_qt_unotice = id_qt (2) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_kp">
            <summary>
            id_kp = id_pkix (3) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_kp">
            <summary>
            id_kp = id_pkix (3) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_kp_serverAuth">
            <summary>
            id_kp_serverAuth = id_kp (1) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_kp_serverAuth">
            <summary>
            id_kp_serverAuth = id_kp (1) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_kp_clientAuth">
            <summary>
            id_kp_clientAuth = id_kp (2) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_kp_clientAuth">
            <summary>
            id_kp_clientAuth = id_kp (2) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_kp_codeSigning">
            <summary>
            id_kp_codeSigning = id_kp (3) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_kp_codeSigning">
            <summary>
            id_kp_codeSigning = id_kp (3) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_kp_emailProtection">
            <summary>
            id_kp_emailProtection = id_kp (4) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_kp_emailProtection">
            <summary>
            id_kp_emailProtection = id_kp (4) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_kp_timeStamping">
            <summary>
            id_kp_timeStamping = id_kp (8) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_kp_timeStamping">
            <summary>
            id_kp_timeStamping = id_kp (8) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_kp_OCSPSigning">
            <summary>
            id_kp_OCSPSigning = id_kp (9) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_kp_OCSPSigning">
            <summary>
            id_kp_OCSPSigning = id_kp (9) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_ad">
            <summary>
            id_ad = id_pkix (48) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_ad">
            <summary>
            id_ad = id_pkix (48) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_ad_ocsp">
            <summary>
            id_ad_ocsp = id_ad (1) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_ad_ocsp">
            <summary>
            id_ad_ocsp = id_ad (1) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_ad_caIssuers">
            <summary>
            id_ad_caIssuers = id_ad (2) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_ad_caIssuers">
            <summary>
            id_ad_caIssuers = id_ad (2) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_ad_timeStamping">
            <summary>
            id_ad_timeStamping = id_ad (3) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_ad_timeStamping">
            <summary>
            id_ad_timeStamping = id_ad (3) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_ad_caRepository">
            <summary>
            id_ad_caRepository = id_ad (5) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_ad_caRepository">
            <summary>
            id_ad_caRepository = id_ad (5) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_at">
            <summary>
            id_at as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_at">
            <summary>
            id_at as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_at_countryName">
            <summary>
            id_at_countryName = id_at (6) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_at_countryName">
            <summary>
            id_at_countryName = id_at (6) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_at_organizationName">
            <summary>
            id_at_organizationName = id_at (10) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_at_organizationName">
            <summary>
            id_at_organizationName = id_at (10) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_at_organizationalUnitName">
            <summary>
            id_at_organizationalUnitName = id_at (11) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_at_organizationalUnitName">
            <summary>
            id_at_organizationalUnitName = id_at (11) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_at_dnQualifier">
            <summary>
            id_at_dnQualifier = id_at (46) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_at_dnQualifier">
            <summary>
            id_at_dnQualifier = id_at (46) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_at_stateOrProvinceName">
            <summary>
            id_at_stateOrProvinceName = id_at (8) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_at_stateOrProvinceName">
            <summary>
            id_at_stateOrProvinceName = id_at (8) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_at_commonName">
            <summary>
            id_at_commonName = id_at (3) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_at_commonName">
            <summary>
            id_at_commonName = id_at (3) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_at_serialNumber">
            <summary>
            id_at_serialNumber = id_at (5) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_at_serialNumber">
            <summary>
            id_at_serialNumber = id_at (5) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_at_localityName">
            <summary>
            id_at_localityName = id_at (7) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_at_localityName">
            <summary>
            id_at_localityName = id_at (7) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_at_title">
            <summary>
            id_at_title = id_at (12) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_at_title">
            <summary>
            id_at_title = id_at (12) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_at_name">
            <summary>
            id_at_name = id_at (41) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_at_name">
            <summary>
            id_at_name = id_at (41) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_at_surname">
            <summary>
            id_at_surname = id_at (4) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_at_surname">
            <summary>
            id_at_surname = id_at (4) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_at_givenName">
            <summary>
            id_at_givenName = id_at (42) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_at_givenName">
            <summary>
            id_at_givenName = id_at (42) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_at_initials">
            <summary>
            id_at_initials = id_at (43) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_at_initials">
            <summary>
            id_at_initials = id_at (43) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_at_pseudonym">
            <summary>
            id_at_pseudonym = id_at (65) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_at_pseudonym">
            <summary>
            id_at_pseudonym = id_at (65) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_at_generationQualifier">
            <summary>
            id_at_generationQualifier = id_at (44) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_at_generationQualifier">
            <summary>
            id_at_generationQualifier = id_at (44) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__rsadsi">
            <summary>
            rsadsi as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__rsadsi">
            <summary>
            rsadsi as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__pkcs">
            <summary>
            pkcs = rsadsi (1) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__pkcs">
            <summary>
            pkcs = rsadsi (1) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__pkcs_9">
            <summary>
            pkcs_9 = pkcs (9) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__pkcs_9">
            <summary>
            pkcs_9 = pkcs (9) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_emailAddress">
            <summary>
            id_emailAddress = pkcs_9 (1) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_emailAddress">
            <summary>
            id_emailAddress = pkcs_9 (1) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__pkcs_1">
            <summary>
            pkcs_1 = pkcs (1) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__pkcs_1">
            <summary>
            pkcs_1 = pkcs (1) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__rsaEncryption">
            <summary>
            rsaEncryption = pkcs_1 (1) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__rsaEncryption">
            <summary>
            rsaEncryption = pkcs_1 (1) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__rsaOAEPEncryptionSET">
            <summary>
            rsaOAEPEncryptionSET = pkcs_1 (6) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__rsaOAEPEncryptionSET">
            <summary>
            rsaOAEPEncryptionSET = pkcs_1 (6) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_RSAES_OAEP">
            <summary>
            id_RSAES_OAEP = pkcs_1 (7) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_RSAES_OAEP">
            <summary>
            id_RSAES_OAEP = pkcs_1 (7) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__rsassa_pss">
            <summary>
            rsassa_pss = pkcs_1 (10) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__rsassa_pss">
            <summary>
            rsassa_pss = pkcs_1 (10) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__sha1WithRSAEncryption">
            <summary>
            sha1WithRSAEncryption = pkcs_1 (5) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__sha1WithRSAEncryption">
            <summary>
            sha1WithRSAEncryption = pkcs_1 (5) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__sha224WithRSAEncryption">
            <summary>
            sha224WithRSAEncryption = pkcs_1 (14) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__sha224WithRSAEncryption">
            <summary>
            sha224WithRSAEncryption = pkcs_1 (14) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__sha256WithRSAEncryption">
            <summary>
            sha256WithRSAEncryption = pkcs_1 (11) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__sha256WithRSAEncryption">
            <summary>
            sha256WithRSAEncryption = pkcs_1 (11) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__sha384WithRSAEncryption">
            <summary>
            sha384WithRSAEncryption = pkcs_1 (12) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__sha384WithRSAEncryption">
            <summary>
            sha384WithRSAEncryption = pkcs_1 (12) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__sha512WithRSAEncryption">
            <summary>
            sha512WithRSAEncryption = pkcs_1 (13) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__sha512WithRSAEncryption">
            <summary>
            sha512WithRSAEncryption = pkcs_1 (13) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__pkcs_12">
            <summary>
            pkcs_12 = pkcs (12) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__pkcs_12">
            <summary>
            pkcs_12 = pkcs (12) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__pkcs_12_10">
            <summary>
            pkcs_12_10 = pkcs_12 (10) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__pkcs_12_10">
            <summary>
            pkcs_12_10 = pkcs_12 (10) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__pkcs_12_bagtype">
            <summary>
            pkcs_12_bagtype = pkcs_12_10 (1) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__pkcs_12_bagtype">
            <summary>
            pkcs_12_bagtype = pkcs_12_10 (1) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__pkcs_12_keybag">
            <summary>
            pkcs_12_keybag = pkcs_12_bagtype (1) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__pkcs_12_keybag">
            <summary>
            pkcs_12_keybag = pkcs_12_bagtype (1) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__pkcs_12_shroudedbag">
            <summary>
            pkcs_12_shroudedbag = pkcs_12_bagtype (2) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__pkcs_12_shroudedbag">
            <summary>
            pkcs_12_shroudedbag = pkcs_12_bagtype (2) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__pkcs_12_certbag">
            <summary>
            pkcs_12_certbag = pkcs_12_bagtype (3) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__pkcs_12_certbag">
            <summary>
            pkcs_12_certbag = pkcs_12_bagtype (3) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__pkcs_12_crlbag">
            <summary>
            pkcs_12_crlbag = pkcs_12_bagtype (4) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__pkcs_12_crlbag">
            <summary>
            pkcs_12_crlbag = pkcs_12_bagtype (4) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__pkcs_12_secretbag">
            <summary>
            pkcs_12_secretbag = pkcs_12_bagtype (5) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__pkcs_12_secretbag">
            <summary>
            pkcs_12_secretbag = pkcs_12_bagtype (5) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__pkcs_12_safecontentsbag">
            <summary>
            pkcs_12_safecontentsbag = pkcs_12_bagtype (6) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__pkcs_12_safecontentsbag">
            <summary>
            pkcs_12_safecontentsbag = pkcs_12_bagtype (6) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__digestAlgorithm">
            <summary>
            digestAlgorithm = rsadsi (2) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__digestAlgorithm">
            <summary>
            digestAlgorithm = rsadsi (2) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_hmacWithSHA224">
            <summary>
            id_hmacWithSHA224 = digestAlgorithm (8) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_hmacWithSHA224">
            <summary>
            id_hmacWithSHA224 = digestAlgorithm (8) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_hmacWithSHA256">
            <summary>
            id_hmacWithSHA256 = digestAlgorithm (9) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_hmacWithSHA256">
            <summary>
            id_hmacWithSHA256 = digestAlgorithm (9) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_hmacWithSHA384">
            <summary>
            id_hmacWithSHA384 = digestAlgorithm (10) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_hmacWithSHA384">
            <summary>
            id_hmacWithSHA384 = digestAlgorithm (10) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_hmacWithSHA512">
            <summary>
            id_hmacWithSHA512 = digestAlgorithm (11) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_hmacWithSHA512">
            <summary>
            id_hmacWithSHA512 = digestAlgorithm (11) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_ce">
            <summary>
            id_ce as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_ce">
            <summary>
            id_ce as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_ce_authorityKeyIdentifier">
            <summary>
            id_ce_authorityKeyIdentifier = id_ce (35) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_ce_authorityKeyIdentifier">
            <summary>
            id_ce_authorityKeyIdentifier = id_ce (35) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_ce_subjectKeyIdentifier">
            <summary>
            id_ce_subjectKeyIdentifier = id_ce (14) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_ce_subjectKeyIdentifier">
            <summary>
            id_ce_subjectKeyIdentifier = id_ce (14) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_ce_keyUsage">
            <summary>
            id_ce_keyUsage = id_ce (15) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_ce_keyUsage">
            <summary>
            id_ce_keyUsage = id_ce (15) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_ce_privateKeyUsagePeriod">
            <summary>
            id_ce_privateKeyUsagePeriod = id_ce (16) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_ce_privateKeyUsagePeriod">
            <summary>
            id_ce_privateKeyUsagePeriod = id_ce (16) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_ce_certificatePolicies">
            <summary>
            id_ce_certificatePolicies = id_ce (32) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_ce_certificatePolicies">
            <summary>
            id_ce_certificatePolicies = id_ce (32) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__anyPolicy">
            <summary>
            anyPolicy = id_ce_certificatePolicies (0) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__anyPolicy">
            <summary>
            anyPolicy = id_ce_certificatePolicies (0) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_ce_policyMappings">
            <summary>
            id_ce_policyMappings = id_ce (33) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_ce_policyMappings">
            <summary>
            id_ce_policyMappings = id_ce (33) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_ce_subjectAltName">
            <summary>
            id_ce_subjectAltName = id_ce (17) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_ce_subjectAltName">
            <summary>
            id_ce_subjectAltName = id_ce (17) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_ce_issuerAltName">
            <summary>
            id_ce_issuerAltName = id_ce (18) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_ce_issuerAltName">
            <summary>
            id_ce_issuerAltName = id_ce (18) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_ce_subjectDirectoryAttributes">
            <summary>
            id_ce_subjectDirectoryAttributes = id_ce (9) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_ce_subjectDirectoryAttributes">
            <summary>
            id_ce_subjectDirectoryAttributes = id_ce (9) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_ce_basicConstraints">
            <summary>
            id_ce_basicConstraints = id_ce (19) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_ce_basicConstraints">
            <summary>
            id_ce_basicConstraints = id_ce (19) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_ce_nameConstraints">
            <summary>
            id_ce_nameConstraints = id_ce (30) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_ce_nameConstraints">
            <summary>
            id_ce_nameConstraints = id_ce (30) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_ce_policyConstraints">
            <summary>
            id_ce_policyConstraints = id_ce (36) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_ce_policyConstraints">
            <summary>
            id_ce_policyConstraints = id_ce (36) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_ce_cRLDistributionPoints">
            <summary>
            id_ce_cRLDistributionPoints = id_ce (31) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_ce_cRLDistributionPoints">
            <summary>
            id_ce_cRLDistributionPoints = id_ce (31) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_ce_extKeyUsage">
            <summary>
            id_ce_extKeyUsage = id_ce (37) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_ce_extKeyUsage">
            <summary>
            id_ce_extKeyUsage = id_ce (37) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_ce_cRLNumber">
            <summary>
            id_ce_cRLNumber = id_ce (20) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_ce_cRLNumber">
            <summary>
            id_ce_cRLNumber = id_ce (20) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_ce_issuingDistributionPoint">
            <summary>
            id_ce_issuingDistributionPoint = id_ce (28) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_ce_issuingDistributionPoint">
            <summary>
            id_ce_issuingDistributionPoint = id_ce (28) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_ce_deltaCRLIndicator">
            <summary>
            id_ce_deltaCRLIndicator = id_ce (27) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_ce_deltaCRLIndicator">
            <summary>
            id_ce_deltaCRLIndicator = id_ce (27) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_ce_cRLReasons">
            <summary>
            id_ce_cRLReasons = id_ce (21) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_ce_cRLReasons">
            <summary>
            id_ce_cRLReasons = id_ce (21) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_ce_certificateIssuer">
            <summary>
            id_ce_certificateIssuer = id_ce (29) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_ce_certificateIssuer">
            <summary>
            id_ce_certificateIssuer = id_ce (29) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_ce_holdInstructionCode">
            <summary>
            id_ce_holdInstructionCode = id_ce (23) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_ce_holdInstructionCode">
            <summary>
            id_ce_holdInstructionCode = id_ce (23) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_ce_invalidityDate">
            <summary>
            id_ce_invalidityDate = id_ce (24) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_ce_invalidityDate">
            <summary>
            id_ce_invalidityDate = id_ce (24) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_ce_inhibitAnyPolicy">
            <summary>
            id_ce_inhibitAnyPolicy = id_ce (54) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_ce_inhibitAnyPolicy">
            <summary>
            id_ce_inhibitAnyPolicy = id_ce (54) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_ce_freshestCRL">
            <summary>
            id_ce_freshestCRL = id_ce (46) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_ce_freshestCRL">
            <summary>
            id_ce_freshestCRL = id_ce (46) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__holdInstruction">
            <summary>
            holdInstruction as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__holdInstruction">
            <summary>
            holdInstruction as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_holdinstruction_none">
            <summary>
            id_holdinstruction_none = holdInstruction (1) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_holdinstruction_none">
            <summary>
            id_holdinstruction_none = holdInstruction (1) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_holdinstruction_callissuer">
            <summary>
            id_holdinstruction_callissuer = holdInstruction (2) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_holdinstruction_callissuer">
            <summary>
            id_holdinstruction_callissuer = holdInstruction (2) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_holdinstruction_reject">
            <summary>
            id_holdinstruction_reject = holdInstruction (3) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_holdinstruction_reject">
            <summary>
            id_holdinstruction_reject = holdInstruction (3) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__nistalgorithm">
            <summary>
            nistalgorithm as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__nistalgorithm">
            <summary>
            nistalgorithm as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__nist_hashalgs">
            <summary>
            nist_hashalgs = nistalgorithm (2) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__nist_hashalgs">
            <summary>
            nist_hashalgs = nistalgorithm (2) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_sha224">
            <summary>
            id_sha224 = nist_hashalgs (4) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_sha224">
            <summary>
            id_sha224 = nist_hashalgs (4) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_sha256">
            <summary>
            id_sha256 = nist_hashalgs (1) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_sha256">
            <summary>
            id_sha256 = nist_hashalgs (1) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_sha384">
            <summary>
            id_sha384 = nist_hashalgs (2) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_sha384">
            <summary>
            id_sha384 = nist_hashalgs (2) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_sha512">
            <summary>
            id_sha512 = nist_hashalgs (3) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_sha512">
            <summary>
            id_sha512 = nist_hashalgs (3) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__nist_aes">
            <summary>
            nist_aes = nistalgorithm (1) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__nist_aes">
            <summary>
            nist_aes = nistalgorithm (1) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_aes128_ecb">
            <summary>
            id_aes128_ecb = nist_aes (1) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_aes128_ecb">
            <summary>
            id_aes128_ecb = nist_aes (1) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_aes128_cbc">
            <summary>
            id_aes128_cbc = nist_aes (2) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_aes128_cbc">
            <summary>
            id_aes128_cbc = nist_aes (2) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_aes128_ofb">
            <summary>
            id_aes128_ofb = nist_aes (3) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_aes128_ofb">
            <summary>
            id_aes128_ofb = nist_aes (3) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_aes128_cfb">
            <summary>
            id_aes128_cfb = nist_aes (4) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_aes128_cfb">
            <summary>
            id_aes128_cfb = nist_aes (4) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_aes128_wrap">
            <summary>
            id_aes128_wrap = nist_aes (5) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_aes128_wrap">
            <summary>
            id_aes128_wrap = nist_aes (5) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_aes128_gcm">
            <summary>
            id_aes128_gcm = nist_aes (6) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_aes128_gcm">
            <summary>
            id_aes128_gcm = nist_aes (6) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_aes192_ecb">
            <summary>
            id_aes192_ecb = nist_aes (21) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_aes192_ecb">
            <summary>
            id_aes192_ecb = nist_aes (21) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_aes192_cbc">
            <summary>
            id_aes192_cbc = nist_aes (22) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_aes192_cbc">
            <summary>
            id_aes192_cbc = nist_aes (22) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_aes192_ofb">
            <summary>
            id_aes192_ofb = nist_aes (23) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_aes192_ofb">
            <summary>
            id_aes192_ofb = nist_aes (23) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_aes192_cfb">
            <summary>
            id_aes192_cfb = nist_aes (24) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_aes192_cfb">
            <summary>
            id_aes192_cfb = nist_aes (24) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_aes192_wrap">
            <summary>
            id_aes192_wrap = nist_aes (25) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_aes192_wrap">
            <summary>
            id_aes192_wrap = nist_aes (25) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_aes192_gcm">
            <summary>
            id_aes192_gcm = nist_aes (26) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_aes192_gcm">
            <summary>
            id_aes192_gcm = nist_aes (26) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_aes256_ecb">
            <summary>
            id_aes256_ecb = nist_aes (41) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_aes256_ecb">
            <summary>
            id_aes256_ecb = nist_aes (41) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_aes256_cbc">
            <summary>
            id_aes256_cbc = nist_aes (42) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_aes256_cbc">
            <summary>
            id_aes256_cbc = nist_aes (42) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_aes256_ofb">
            <summary>
            id_aes256_ofb = nist_aes (43) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_aes256_ofb">
            <summary>
            id_aes256_ofb = nist_aes (43) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_aes256_cfb">
            <summary>
            id_aes256_cfb = nist_aes (44) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_aes256_cfb">
            <summary>
            id_aes256_cfb = nist_aes (44) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_aes256_wrap">
            <summary>
            id_aes256_wrap = nist_aes (45) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_aes256_wrap">
            <summary>
            id_aes256_wrap = nist_aes (45) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_aes256_gcm">
            <summary>
            id_aes256_gcm = nist_aes (46) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_aes256_gcm">
            <summary>
            id_aes256_gcm = nist_aes (46) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__dod_arc">
            <summary>
            dod_arc as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__dod_arc">
            <summary>
            dod_arc as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__netscape_smime">
            <summary>
            netscape_smime = dod_arc (2) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__netscape_smime">
            <summary>
            netscape_smime = dod_arc (2) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__dds_arc">
            <summary>
            dds_arc as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__dds_arc">
            <summary>
            dds_arc as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__dds_algorithms">
            <summary>
            dds_algorithms = dds_arc (1) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__dds_algorithms">
            <summary>
            dds_algorithms = dds_arc (1) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__dds_algorithms_dh">
            <summary>
            dds_algorithms_dh = dds_algorithms (22) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__dds_algorithms_dh">
            <summary>
            dds_algorithms_dh = dds_algorithms (22) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_dh_domain">
            <summary>
            id_dh_domain = dds_algorithms_dh (0) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_dh_domain">
            <summary>
            id_dh_domain = dds_algorithms_dh (0) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_dh_public">
            <summary>
            id_dh_public = dds_algorithms_dh (1) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_dh_public">
            <summary>
            id_dh_public = dds_algorithms_dh (1) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_dh_private">
            <summary>
            id_dh_private = dds_algorithms_dh (2) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_dh_private">
            <summary>
            id_dh_private = dds_algorithms_dh (2) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_crfg_curve_algs">
            <summary>
            id_crfg_curve_algs as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_crfg_curve_algs">
            <summary>
            id_crfg_curve_algs as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_X25519">
            <summary>
            id_X25519 = id_crfg_curve_algs (110) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_X25519">
            <summary>
            id_X25519 = id_crfg_curve_algs (110) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_X448">
            <summary>
            id_X448 = id_crfg_curve_algs (111) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_X448">
            <summary>
            id_X448 = id_crfg_curve_algs (111) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_Ed25519">
            <summary>
            id_Ed25519 = id_crfg_curve_algs (112) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_Ed25519">
            <summary>
            id_Ed25519 = id_crfg_curve_algs (112) as string
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OID__id_Ed448">
            <summary>
            id_Ed448 = id_crfg_curve_algs (113) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Constants.OIDS__id_Ed448">
            <summary>
            id_Ed448 = id_crfg_curve_algs (113) as string
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.TBSCertificate">
            <summary>
            TBSCertificate 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.TBSCertificate.Version">
            <summary>
            ASN.1 member Version 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.TBSCertificate.SerialNumber">
            <summary>
            ASN.1 member SerialNumber 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.TBSCertificate.Signature">
            <summary>
            ASN.1 member Signature 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.TBSCertificate.Issuer">
            <summary>
            ASN.1 member Issuer 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.TBSCertificate.Validity">
            <summary>
            ASN.1 member Validity 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.TBSCertificate.Subject">
            <summary>
            ASN.1 member Subject 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.TBSCertificate.SubjectPublicKeyInfo">
            <summary>
            ASN.1 member SubjectPublicKeyInfo 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.TBSCertificate.IssuerUniqueID">
            <summary>
            ASN.1 member IssuerUniqueID 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.TBSCertificate.SubjectUniqueID">
            <summary>
            ASN.1 member SubjectUniqueID 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.TBSCertificate.Extensions">
            <summary>
            ASN.1 member Extensions 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.TBSCertificate.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.TBSCertificate.#ctor(Goedel.Cryptography.CryptoProvider,System.Collections.Generic.List{Goedel.Cryptography.PKIX.Name})">
            <summary>
            Construct from a subject key, subject name and issuer name.
            </summary>
            <param name="SubjectKey">Key that the certificate will authenticate.</param>
            <param name="SubjectName">Subject name.</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.TBSCertificate.#ctor(Goedel.Cryptography.KeyPair,System.Collections.Generic.List{Goedel.Cryptography.PKIX.Name})">
            <summary>
            Construct from a subject key, subject name and issuer name.
            </summary>
            <param name="SubjectKey">Key that the certificate will authenticate.</param>
            <param name="SubjectName">Subject name.</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.TBSCertificate.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.TBSCertificate.RawData">
            <summary>
            The raw certificate data, as populated by the 'convert from binary
            certificate method.
            </summary>
            
        </member>
        <member name="M:Goedel.Cryptography.PKIX.TBSCertificate.SetValidity">
            <summary>
            Set the default validity interval of 1 year from the present date.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.TBSCertificate.SetValidity(System.Int32)">
            <summary>
            Set the validity interval in years from the present date.
            
            To reduce errors caused by clock skew between machines, the time interval
            is backdated to one minute after midnight UTC on the day of one hour before the
            current time.
            </summary>
            <param name="Years">Number of years for certificate to be valid</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.TBSCertificate.SetValidity(System.TimeSpan)">
            <summary>
            Set the validity interval to the present data plus a specified time span.
            
            To reduce errors caused by clock skew between machines, the time interval
            is backdated to one minute after midnight UTC on the day of one hour before the
            current time.
            </summary>
            <param name="TimeSpan">Time interval.</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.TBSCertificate.SetValidity(System.DateTime,System.DateTime)">
            <summary>
            Set the validity interval to the specified NotBefore and NotAfter times.
            </summary>
            <param name="NotBefore">First time instant that the certificate is valid.</param>
            <param name="NotAfter">Last time instant that the certificate is valid.</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.TBSCertificate.AddExtension(Goedel.Cryptography.PKIX.Extension)">
            <summary>
            Add an X.509v3 extension encty
            </summary>
            <param name="Extension">The extension to add.</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.TBSCertificate.SetAuthorityKeyIdentifier(System.Byte[])">
            <summary>
            Set the Authority Key Identifier extension
            </summary>
            <param name="ID">The authority identifier</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.TBSCertificate.SetSubjectKeyIdentifier(System.Byte[])">
            <summary>
            Set the subject key identifier extension.
            </summary>
            <param name="ID">The key identifier</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.TBSCertificate.SetSubjectAltName(System.String)">
            <summary>
            Set the subject alt name
            </summary>
            <param name="Name">Name to set</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.TBSCertificate.SetProfile(Goedel.Cryptography.PKIX.Application,System.Int32)">
            <summary>
            Set the profile for a certificate
            </summary>
            <param name="Use">Use for the certificate</param>
            <param name="PathLen">Path length constraint</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.TBSCertificate.SetBasicConstraints(System.Boolean,System.Int32)">
            <summary>
            Set the basic constraints field
            </summary>
            <param name="CA">If true, can act as a CA</param>
            <param name="PathLength">Maximum path length of a chain.</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.TBSCertificate.SetKeyUsage(Goedel.Cryptography.PKIX.KeyUses)">
            <summary>
            Pack key usage data into the stupidest bit field format in the known universe
            </summary>
            <param name="KeyUses">PKIX Key uses.</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.TBSCertificate.SetExtendedKeyUsage(System.Collections.Generic.List{System.Int32[]})">
            <summary>
            PKIX extended key uses
            </summary>
            <param name="Values">The key usage values</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.DigestInfo">
            <summary>
            DigestInfo 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.DigestInfo.Algorithm">
            <summary>
            ASN.1 member Algorithm 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.DigestInfo.SubjectPublicKey">
            <summary>
            ASN.1 member SubjectPublicKey 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.DigestInfo.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.TaggedBitString">
            <summary>
            TaggedBitString 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.TaggedBitString.Algorithm">
            <summary>
            ASN.1 member Algorithm 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.TaggedBitString.SubjectPublicKey">
            <summary>
            ASN.1 member SubjectPublicKey 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.TaggedBitString.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.Extension">
            <summary>
            Extension 
            </summary>
            <summary>
            X.509v3 Extension
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Extension.ObjectIdentifier">
            <summary>
            ASN.1 member ObjectIdentifier 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Extension.Critical">
            <summary>
            ASN.1 member Critical 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Extension.Data">
            <summary>
            ASN.1 member Data 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.Extension.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.Extension.#ctor(Goedel.ASN.Root,System.Boolean)">
            <summary>
            Create an extension from the specified object with optional 
            criticality flag.
            </summary>
            <param name="Object">The object to encode.</param>
            <param name="Critical">If true, the extension will be marked as
              'critical' meaning that backwards compatibility will be broken 
              and legacy relying parties MUST reject the certificate. Only use
              if this is the intended behavior.</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.Validity">
            <summary>
            Validity 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Validity.NotBefore">
            <summary>
            ASN.1 member NotBefore 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Validity.NotAfter">
            <summary>
            ASN.1 member NotAfter 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.Validity.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.Validity.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Create Validity interval with specified NotBefore and NotAfter times.
            </summary>
            <param name="NotBefore">Time before which the enclosing certificate is not valid.</param>
            <param name="NotAfter">Time after which the enclosing certificate is not valid.</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.CertificateList">
            <summary>
            CertificateList 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.CertificateList.TBSCertList">
            <summary>
            ASN.1 member TBSCertList 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.CertificateList.Signature">
            <summary>
            ASN.1 member Signature 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.CertificateList.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.TBSCertList">
            <summary>
            TBSCertList 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.TBSCertList.Version">
            <summary>
            ASN.1 member Version 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.TBSCertList.Signature">
            <summary>
            ASN.1 member Signature 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.TBSCertList.Issuer">
            <summary>
            ASN.1 member Issuer 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.TBSCertList.ThisUpdate">
            <summary>
            ASN.1 member ThisUpdate 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.TBSCertList.NextUpdate">
            <summary>
            ASN.1 member NextUpdate 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.TBSCertList.RevokedCertificates">
            <summary>
            ASN.1 member RevokedCertificates 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.TBSCertList.CrlExtensions">
            <summary>
            ASN.1 member CrlExtensions 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.TBSCertList.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.CertEntry">
            <summary>
            CertEntry 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.CertEntry.UserCertificate">
            <summary>
            ASN.1 member UserCertificate 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.CertEntry.RevocationDate">
            <summary>
            ASN.1 member RevocationDate 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.CertEntry.CrlEntryExtensions">
            <summary>
            ASN.1 member CrlEntryExtensions 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.CertEntry.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.Name">
            <summary>
            Name 
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.Name.OID">
            <summary>
            The OID value
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Name.Member">
            <summary>
            ASN.1 member Member 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.Name.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.Name.#ctor">
            <summary>
            Create a name with an empty segment list.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.Name.#ctor(System.Int32[],System.String,Goedel.Cryptography.PKIX.StringType)">
            <summary>
            Create a name with a single segment.
            </summary>
            <param name="OID">Object identifier</param>
            <param name="Value">Text value.</param>
            <param name="Type">Text encoding.</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.Name.#ctor(System.String)">
            <summary>
            Create name from a text string.
            </summary>
            <param name="CommonName">Text</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.Name.#ctor(Goedel.Cryptography.CryptoProvider)">
            <summary>
            Create name from the UDF fingerprint of a key.
            </summary>
            <param name="CryptoProvider">The key to fingerprint</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.Name.#ctor(Goedel.Cryptography.KeyPair)">
            <summary>
            Create name from the UDF fingerprint of a key.
            </summary>
            <param name="KeyPair">Key from which to create the fingerprint.</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.Name.Add(System.Int32[],System.String,Goedel.Cryptography.PKIX.StringType)">
            <summary>
            Add a name segment.
            </summary>
            <param name="OID">Object identifier</param>
            <param name="Value">Text value.</param>
            <param name="Type">Text encoding.</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.Name.ToList">
            <summary>
            Convert to a singleton list.
            </summary>
            <returns>Singleton list with this as the only member.</returns>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.Name.ToName(System.String)">
            <summary>
            Conver a common name string to a list of Name segments.
            </summary>
            <param name="CommonName">Common name to convert</param>
            <returns>List of Name segments.</returns>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.AttributeTypeValue">
            <summary>
            AttributeTypeValue 
            </summary>
            <summary>
            Attribute = type = value tripple
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.AttributeTypeValue.Type">
            <summary>
            ASN.1 member Type 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.AttributeTypeValue.Value">
            <summary>
            ASN.1 member Value 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.AttributeTypeValue.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.AttributeTypeValue.#ctor(System.Int32[],System.String,Goedel.Cryptography.PKIX.StringType)">
            <summary>
            Construct from components.
            </summary>
            <param name="OID">Object Identifier</param>
            <param name="Value">Value</param>
            <param name="StringType">Encoding.</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.AnyString">
            <summary>
            AnyString 
            </summary>
            <summary>
            Encoding of X.500 text string.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.AnyString.OID">
            <summary>
            The OID value
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.AnyString.IA5String">
            <summary>
            ASN.1 member IA5String 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.AnyString.BMPString">
            <summary>
            ASN.1 member BMPString 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.AnyString.UTF8String">
            <summary>
            ASN.1 member UTF8String 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.AnyString.PrintableString">
            <summary>
            ASN.1 member PrintableString 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.AnyString.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.AnyString.#ctor(System.String,Goedel.Cryptography.PKIX.StringType)">
            <summary>
            Construct from StringType enumeration.
            </summary>
            <param name="Value">Text value.</param>
            <param name="StringType">Text Encoding.</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.AttributeTypeValues">
            <summary>
            AttributeTypeValues 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.AttributeTypeValues.Type">
            <summary>
            ASN.1 member Type 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.AttributeTypeValues.Value">
            <summary>
            ASN.1 member Value 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.AttributeTypeValues.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.AuthorityKeyIdentifier">
            <summary>
            AuthorityKeyIdentifier 
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.AuthorityKeyIdentifier.OID">
            <summary>
            The OID value
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.AuthorityKeyIdentifier.KeyIdentifier">
            <summary>
            ASN.1 member KeyIdentifier 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.AuthorityKeyIdentifier.AuthorityCertIssuer">
            <summary>
            ASN.1 member AuthorityCertIssuer 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.AuthorityKeyIdentifier.AuthorityCertSerialNumber">
            <summary>
            ASN.1 member AuthorityCertSerialNumber 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.AuthorityKeyIdentifier.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.SubjectKeyIdentifier">
            <summary>
            SubjectKeyIdentifier 
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.SubjectKeyIdentifier.OID">
            <summary>
            The OID value
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.SubjectKeyIdentifier.Value">
            <summary>
            ASN.1 member Value 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.SubjectKeyIdentifier.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.KeyUsage">
            <summary>
            KeyUsage 
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.KeyUsage.OID">
            <summary>
            The OID value
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.KeyUsage.Value">
            <summary>
            ASN.1 member Value 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.KeyUsage.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.CertificatePolicies">
            <summary>
            CertificatePolicies 
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.CertificatePolicies.OID">
            <summary>
            The OID value
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.CertificatePolicies.Value">
            <summary>
            ASN.1 member Value 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.CertificatePolicies.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.PolicyInformation">
            <summary>
            PolicyInformation 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.PolicyInformation.PolicyIdentifier">
            <summary>
            ASN.1 member PolicyIdentifier 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.PolicyInformation.PolicyQualifiers">
            <summary>
            ASN.1 member PolicyQualifiers 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PolicyInformation.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.PolicyQualifierInfo">
            <summary>
            PolicyQualifierInfo 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.PolicyQualifierInfo.PolicyQualifierId">
            <summary>
            ASN.1 member PolicyQualifierId 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.PolicyQualifierInfo.Qualifier">
            <summary>
            ASN.1 member Qualifier 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PolicyQualifierInfo.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.SubjectAltName">
            <summary>
            SubjectAltName 
            </summary>
            <summary>
            Subject Alt Name.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.SubjectAltName.OID">
            <summary>
            The OID value
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.SubjectAltName.Names">
            <summary>
            ASN.1 member Names 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.SubjectAltName.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.SubjectAltName.#ctor(Goedel.Cryptography.PKIX.GeneralName)">
            <summary>
            Construct from a general name.
            </summary>
            <param name="GeneralName">General name to encode</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.GeneralName">
            <summary>
            GeneralName 
            </summary>
            <summary>
            Construct a generalized name depending on whether the name provided
            is an RFC822 mail address or not.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.GeneralName.OID">
            <summary>
            The OID value
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.GeneralName.RFC822Name">
            <summary>
            ASN.1 member RFC822Name 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.GeneralName.DNSName">
            <summary>
            ASN.1 member DNSName 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.GeneralName.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.GeneralName.#ctor(System.String)">
            <summary>
            Construct from the specified string.
            </summary>
            <param name="Name">The name to use. the type is inferred from the 
            syntax.</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.BasicConstraints">
            <summary>
            BasicConstraints 
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.BasicConstraints.OID">
            <summary>
            The OID value
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.BasicConstraints.CA">
            <summary>
            ASN.1 member CA 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.BasicConstraints.PathLenConstraint">
            <summary>
            ASN.1 member PathLenConstraint 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.BasicConstraints.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.NameConstraints">
            <summary>
            NameConstraints 
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.NameConstraints.OID">
            <summary>
            The OID value
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.NameConstraints.PermittedSubtrees">
            <summary>
            ASN.1 member PermittedSubtrees 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.NameConstraints.ExcludedSubtrees">
            <summary>
            ASN.1 member ExcludedSubtrees 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.NameConstraints.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.GeneralSubtrees">
            <summary>
            GeneralSubtrees 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.GeneralSubtrees.Base">
            <summary>
            ASN.1 member Base 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.GeneralSubtrees.Minimum">
            <summary>
            ASN.1 member Minimum 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.GeneralSubtrees.Maximum">
            <summary>
            ASN.1 member Maximum 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.GeneralSubtrees.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.ExtendedKeyUsage">
            <summary>
            ExtendedKeyUsage 
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.ExtendedKeyUsage.OID">
            <summary>
            The OID value
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.ExtendedKeyUsage.KeyPurpose">
            <summary>
            ASN.1 member KeyPurpose 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.ExtendedKeyUsage.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.PFX">
            <summary>
            PFX 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.PFX.Version">
            <summary>
            ASN.1 member Version 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.PFX.AuthSafe">
            <summary>
            ASN.1 member AuthSafe 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.PFX.MacData">
            <summary>
            ASN.1 member MacData 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PFX.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.ContentInfo">
            <summary>
            ContentInfo 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.ContentInfo.ContentType">
            <summary>
            ASN.1 member ContentType 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.ContentInfo.Content">
            <summary>
            ASN.1 member Content 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.ContentInfo.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.MacData">
            <summary>
            MacData 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.MacData.MAC">
            <summary>
            ASN.1 member MAC 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.MacData.MacSalt">
            <summary>
            ASN.1 member MacSalt 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.MacData.Iterations">
            <summary>
            ASN.1 member Iterations 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.MacData.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.EncryptedData">
            <summary>
            EncryptedData 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.EncryptedData.Version">
            <summary>
            ASN.1 member Version 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.EncryptedData.EncryptedContent">
            <summary>
            ASN.1 member EncryptedContent 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.EncryptedData.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.EncryptedContentInfo">
            <summary>
            EncryptedContentInfo 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.EncryptedContentInfo.ContentType">
            <summary>
            ASN.1 member ContentType 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.EncryptedContentInfo.Algorithm">
            <summary>
            ASN.1 member Algorithm 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.EncryptedContentInfo.EncryptedContent">
            <summary>
            ASN.1 member EncryptedContent 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.EncryptedContentInfo.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.EncryptedPrivateKeyInfo">
            <summary>
            EncryptedPrivateKeyInfo 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.EncryptedPrivateKeyInfo.EncryptionAlgorithm">
            <summary>
            ASN.1 member EncryptionAlgorithm 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.EncryptedPrivateKeyInfo.EncryptedData">
            <summary>
            ASN.1 member EncryptedData 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.EncryptedPrivateKeyInfo.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.PrivateKeyInfo">
            <summary>
            PrivateKeyInfo 
            </summary>
            <summary>
            PrivateKeyInfo 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.PrivateKeyInfo.Version">
            <summary>
            ASN.1 member Version 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.PrivateKeyInfo.PrivateKeyAlgorithm">
            <summary>
            ASN.1 member PrivateKeyAlgorithm 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.PrivateKeyInfo.PrivateKey">
            <summary>
            ASN.1 member PrivateKey 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.PrivateKeyInfo.Attributes">
            <summary>
            ASN.1 member Attributes 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PrivateKeyInfo.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PrivateKeyInfo.#ctor">
            <summary>
            Default constructor, create empty structure.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PrivateKeyInfo.#ctor(System.Byte[])">
            <summary>
            Create structure from ASN1 data
            </summary>
            <param name="Data">The encoded private key data</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PrivateKeyInfo.Decode(Goedel.ASN.DecodeBuffer)">
             <summary>
             Decode buffer to populate class members
            
             This is done in the forward direction
             </summary>
             <param name="Buffer">The data to decode.</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.PKIXPublicKeyRSA">
            <summary>
            PKIXPublicKeyRSA 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.PKIXPublicKeyRSA.Modulus">
            <summary>
            ASN.1 member Modulus 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.PKIXPublicKeyRSA.PublicExponent">
            <summary>
            ASN.1 member PublicExponent 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPublicKeyRSA.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPublicKeyRSA.SubjectPublicKeyInfo(System.Int32[])">
            <summary>
            Construct a PKIX SubjectPublicKeyInfo block
            </summary>
            <param name="OIDValue">The OID value</param>
            <returns>The PKIX structure</returns>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPublicKeyRSA.OID">
            <summary>
            Return the algorithm identifier that represents this key
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPublicKeyRSA.PublicParameters">
            <summary>
            Return the corresponding public parameters
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.PKIXPrivateKeyRSA">
            <summary>
            PKIXPrivateKeyRSA 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.PKIXPrivateKeyRSA.Version">
            <summary>
            ASN.1 member Version 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.PKIXPrivateKeyRSA.Modulus">
            <summary>
            ASN.1 member Modulus 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.PKIXPrivateKeyRSA.PublicExponent">
            <summary>
            ASN.1 member PublicExponent 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.PKIXPrivateKeyRSA.PrivateExponent">
            <summary>
            ASN.1 member PrivateExponent 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.PKIXPrivateKeyRSA.Prime1">
            <summary>
            ASN.1 member Prime1 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.PKIXPrivateKeyRSA.Prime2">
            <summary>
            ASN.1 member Prime2 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.PKIXPrivateKeyRSA.Exponent1">
            <summary>
            ASN.1 member Exponent1 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.PKIXPrivateKeyRSA.Exponent2">
            <summary>
            ASN.1 member Exponent2 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.PKIXPrivateKeyRSA.Coefficient">
            <summary>
            ASN.1 member Coefficient 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPrivateKeyRSA.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPrivateKeyRSA.SubjectPublicKeyInfo(System.Int32[])">
            <summary>
            Construct a PKIX SubjectPublicKeyInfo block
            </summary>
            <param name="OIDValue">The OID value</param>
            <returns>The PKIX structure</returns>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPrivateKeyRSA.OID">
            <summary>
            Return the algorithm identifier that represents this key
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPrivateKeyRSA.PublicParameters">
            <summary>
            Return the corresponding public parameters
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPrivateKeyRSA.PKIXPublicKeyRSA">
            <summary>
            Return the corresponding public parameters
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPrivateKeyRSA.#ctor">
            <summary>
            Default constructor, create empty structure.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPrivateKeyRSA.#ctor(System.Byte[])">
            <summary>
            Create structure from ASN1 data
            </summary>
            <param name="Data">The encoded private key data</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPrivateKeyRSA.Decode(Goedel.ASN.DecodeBuffer)">
             <summary>
             Decode buffer to populate class members
            
             This is done in the forward direction
             </summary>
             <param name="Buffer">The source buffer</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPrivateKeyRSA.Dump">
            <summary>
            Debugging aid.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.AgreementDH">
            <summary>
            AgreementDH 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.AgreementDH.Result">
            <summary>
            ASN.1 member Result 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.AgreementDH.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.AgreementDH.Decode(Goedel.ASN.DecodeBuffer)">
             <summary>
             Decode buffer to populate class members
            
             This is done in the forward direction
             </summary>
             <param name="Buffer">Buffer to decode.</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.Endorsement">
            <summary>
            Endorsement 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Endorsement.TBSEndorsement">
            <summary>
            ASN.1 member TBSEndorsement 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Endorsement.SignatureAlgorithm">
            <summary>
            ASN.1 member SignatureAlgorithm 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Endorsement.Signature">
            <summary>
            ASN.1 member Signature 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.Endorsement.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.TBSEndorsement">
            <summary>
            TBSEndorsement 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.TBSEndorsement.Version">
            <summary>
            ASN.1 member Version 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.TBSEndorsement.Issued">
            <summary>
            ASN.1 member Issued 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.TBSEndorsement.IssuerKeyIdentifier">
            <summary>
            ASN.1 member IssuerKeyIdentifier 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.TBSEndorsement.SubjectKeyIdentifier">
            <summary>
            ASN.1 member SubjectKeyIdentifier 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.TBSEndorsement.Subject">
            <summary>
            ASN.1 member Subject 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.TBSEndorsement.SubjectAltName">
            <summary>
            ASN.1 member SubjectAltName 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.TBSEndorsement.Extensions">
            <summary>
            ASN.1 member Extensions 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.TBSEndorsement.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.RFC2631OtherInfo">
            <summary>
            RFC2631OtherInfo 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.RFC2631OtherInfo.KeyInfo">
            <summary>
            ASN.1 member KeyInfo 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.RFC2631OtherInfo.PartyAInfo">
            <summary>
            ASN.1 member PartyAInfo 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.RFC2631OtherInfo.SuppPubInfo">
            <summary>
            ASN.1 member SuppPubInfo 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.RFC2631OtherInfo.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.RFC2631OtherInfo.#ctor(System.Int32,System.Numerics.BigInteger,System.Int32[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            Principal constructor
            </summary>
            
            <param name="AgreedBits">The number of bits agreed</param>
            <param name="Agrement">The agreement result.</param>
            <param name="OID">The digest OID to be used to create the key value</param>
            <param name="Nonce">Optional nonce. If present MUST be 512 bits</param>
            <param name="KeyBits">The number of bits in the generated key</param>
            <param name="Count">Counter, this is initially 1 and increases with
            each call.</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.RFC2631OtherInfo.Next">
            <summary>
            Increment the counter value to obtain the next agreement.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.RFC2631OtherInfo.DER">
            <summary>
            Convert Agreed value and support parameters to DER encoded array
            </summary>
            <remarks>The counter value is automatically incremented with each
            call. Thus the value will change slightly between calls.</remarks>
            <returns>The DER encoded value.</returns>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.KeySpecificInfo">
            <summary>
            KeySpecificInfo 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.KeySpecificInfo.Algorithm">
            <summary>
            ASN.1 member Algorithm 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.KeySpecificInfo.Counter">
            <summary>
            ASN.1 member Counter 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.KeySpecificInfo.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.StringType">
            <summary>
            X.500 String types. Most should be avoided.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.StringType.IA5">
            <summary>
            US variant of the ASCII encoding.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.StringType.ASCII">
            <summary>
            Synonym for IA5.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.StringType.BMP">
            <summary>
            Avoid
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.StringType.UTF8">
            <summary>
            UTF8 encoding
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.StringType.Printable">
            <summary>
            Avoid
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.StringType.Teletex">
            <summary>
            Avoid
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.StringType.Universal">
            <summary>
            No really, just avoid, avoid, avoid.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.Application">
            <summary>
            High level Key Uses
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Application.ServerAuth">
            <summary>
            Server Authentication
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Application.ClientAuth">
            <summary>
            Client Authentication
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Application.CodeSigning">
            <summary>
            Code Signing
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Application.EmailEncryption">
            <summary>
            Email encryption
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Application.EmailSignature">
            <summary>
            Email Signature
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Application.DataEncryption">
            <summary>
            Data Encryption
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Application.DataSignature">
            <summary>
            Data Signature
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Application.TimeStamping">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Application.OCSP">
            <summary>
            Signing OCSP status responses
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Application.CRL">
            <summary>
            Signing CRLs
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Application.PersonalMaster">
            <summary>
            Mesh personal master profile signature.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Application.Confirmation">
            <summary>
            Confirmation
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Application.CA">
            <summary>
            Certificate Authority intermediate signer
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Application.Root">
            <summary>
            Root of trust.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.Application.DeviceMaster">
            <summary>
            Device root.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.KeyUses">
            <summary>
            PKIX Key Uses
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.KeyUses.DigitalSignature">
            <summary>
            Sign
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.KeyUses.NonRepudiation">
            <summary>
            If clear, signatures may be repudiated
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.KeyUses.KeyEncipherment">
            <summary>
            Encryption
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.KeyUses.DataEncipherment">
            <summary>
            Don't use.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.KeyUses.KeyAgreement">
            <summary>
            Key agreement (used for client, server authentication).
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.KeyUses.KeyCertSign">
            <summary>
            Sign certificates
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.KeyUses.CRLSign">
            <summary>
            Sign CRLs
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.KeyUses.EncipherOnly">
            <summary>
            Don't use
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.PKIX.KeyUses.DecipherOnly">
            <summary>
            Don't Use.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.PKIXPublicKeyECDH">
            <summary>
            PKIXPublicKeyECDH 
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPublicKeyECDH.CurveJose">
            <summary>
            The Jose curve identifier.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPublicKeyECDH.SubjectPublicKeyInfo(System.Int32[])">
            <summary>
            Construct a PKIX SubjectPublicKeyInfo block
            </summary>
            <param name="oidValue">The OID value</param>
            <returns>The PKIX structure</returns>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPublicKeyECDH.#ctor">
            <summary>
            Empty constructor for deserialization operations.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPublicKeyECDH.#ctor(System.Byte[])">
            <summary>
            Create PKIX representation from the encoded values.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPublicKeyECDH.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="buffer">Output buffer</param>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPublicKeyECDH.PublicParameters">
            <summary>
            Return the corresponding public parameters
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.PKIXPrivateKeyECDH">
            <summary>
            PKIXPrivateKeyECDH 
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPrivateKeyECDH.CurveJose">
            <summary>
            The Jose curve identifier.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPrivateKeyECDH.#ctor">
            <summary>
            Empty constructor for deserialization operations.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPrivateKeyECDH.#ctor(System.Byte[],Goedel.Cryptography.PKIX.PKIXPublicKeyECDH)">
            <summary>
            Create PKIX representation from the encoded values.
            </summary>
            <param name="data">The private key data as an octet string</param>
            <param name="public">The public key representation.</param>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPrivateKeyECDH.SubjectPublicKeyInfo(System.Int32[])">
            <summary>
            Construct a PKIX SubjectPublicKeyInfo block
            </summary>
            <param name="oidValue">The OID value</param>
            <returns>The PKIX structure</returns>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPrivateKeyECDH.PublicParameters">
            <summary>
            Return the corresponding public parameters
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPrivateKeyECDH.PKIXPublicKeyECDH">
            <summary>
            Return the corresponding public parameters
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.PKIXPublicKeyEd25519">
            <summary>
            PKIXPrivateKeyECDH 
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPublicKeyEd25519.CurveJose">
            <summary>
            The Jose curve identifier (Ed25519);
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPublicKeyEd25519.OID">
            <summary>
            Return the algorithm identifier that represents this key
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPublicKeyEd25519.#ctor">
            <summary>
            Default constructor, create empty structure.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPublicKeyEd25519.#ctor(System.Byte[])">
            <summary>
            Default constructor, create empty structure.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.PKIXPrivateKeyEd25519">
            <summary>
            PKIXPrivateKeyECDH 
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPrivateKeyEd25519.CurveJose">
            <summary>
            The Jose curve identifier (Ed25519);
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPrivateKeyEd25519.OID">
            <summary>
            Return the algorithm identifier that represents this key
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPrivateKeyEd25519.#ctor">
            <summary>
            Default constructor, create empty structure.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPrivateKeyEd25519.#ctor(System.Byte[],Goedel.Cryptography.PKIX.PKIXPublicKeyECDH)">
            <summary>
            Default constructor, create empty structure.
            </summary>
            <param name="data">The private key data as an octet string</param>
            <param name="publicKey">The public key representation.</param>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.PKIXPublicKeyEd448">
            <summary>
            PKIXPrivateKeyECDH 
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPublicKeyEd448.CurveJose">
            <summary>
            The Jose curve identifier (Ed25519);
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPublicKeyEd448.OID">
            <summary>
            Return the algorithm identifier that represents this key
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPublicKeyEd448.#ctor">
            <summary>
            Default constructor, create empty structure.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPublicKeyEd448.#ctor(System.Byte[])">
            <summary>
            Default constructor, create empty structure.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.PKIXPrivateKeyEd448">
            <summary>
            PKIXPrivateKeyECDH 
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPrivateKeyEd448.CurveJose">
            <summary>
            The Jose curve identifier (Ed25519);
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPrivateKeyEd448.OID">
            <summary>
            Return the algorithm identifier that represents this key
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPrivateKeyEd448.#ctor">
            <summary>
            Default constructor, create empty structure.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPrivateKeyEd448.#ctor(System.Byte[],Goedel.Cryptography.PKIX.PKIXPublicKeyECDH)">
            <summary>
            Default constructor, create empty structure.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.PKIXPublicKeyX25519">
            <summary>
            PKIXPrivateKeyECDH 
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPublicKeyX25519.CurveJose">
            <summary>
            The Jose curve identifier (Ed25519);
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPublicKeyX25519.OID">
            <summary>
            Return the algorithm identifier that represents this key
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPublicKeyX25519.#ctor">
            <summary>
            Default constructor, create empty structure.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPublicKeyX25519.#ctor(System.Byte[])">
            <summary>
            Default constructor, create empty structure.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.PKIXPrivateKeyX25519">
            <summary>
            PKIXPrivateKeyECDH 
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPrivateKeyX25519.CurveJose">
            <summary>
            The Jose curve identifier (Ed25519);
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPrivateKeyX25519.OID">
            <summary>
            Return the algorithm identifier that represents this key
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPrivateKeyX25519.#ctor">
            <summary>
            Default constructor, create empty structure.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPrivateKeyX25519.#ctor(System.Byte[],Goedel.Cryptography.PKIX.PKIXPublicKeyECDH)">
            <summary>
            Default constructor, create empty structure.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.PKIXPublicKeyX448">
            <summary>
            PKIXPrivateKeyECDH 
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPublicKeyX448.CurveJose">
            <summary>
            The Jose curve identifier (Ed25519);
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPublicKeyX448.OID">
            <summary>
            Return the algorithm identifier that represents this key
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPublicKeyX448.#ctor">
            <summary>
            Default constructor, create empty structure.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPublicKeyX448.#ctor(System.Byte[])">
            <summary>
            Default constructor, create empty structure.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.PKIXPrivateKeyX448">
            <summary>
            PKIXPrivateKeyECDH 
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPrivateKeyX448.CurveJose">
            <summary>
            The Jose curve identifier (Ed25519);
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.PKIXPrivateKeyX448.OID">
            <summary>
            Return the algorithm identifier that represents this key
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPrivateKeyX448.#ctor">
            <summary>
            Default constructor, create empty structure.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.PKIXPrivateKeyX448.#ctor(System.Byte[],Goedel.Cryptography.PKIX.PKIXPublicKeyECDH)">
            <summary>
            Default constructor, create empty structure.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.IPKIXData">
            <summary>
            Interface permitting Key classes to be managed as if they inherited from
            a common base class.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.IPKIXData.DER">
            <summary>
            Return the DER encoding of this structure
            </summary>
            <returns>The DER encoded value.</returns>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.IPKIXData.OID">
            <summary>
            Return the algorithm identifier that represents this key
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.IPKIXPublicKey">
            <summary>
            Interface permitting Key classes to be managed as if they inherited from
            a common base class.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.PKIX.IPKIXPublicKey.SubjectPublicKeyInfo(System.Int32[])">
            <summary>
            Construct a PKIX SubjectPublicKeyInfo block
            </summary>
            <param name="OID">The OID value</param>
            <returns>The PKIX structure</returns>
        </member>
        <member name="P:Goedel.Cryptography.PKIX.IPKIXPublicKey.PublicParameters">
            <summary>
            Return the corresponding public parameters
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.IPKIXPrivateKey">
            <summary>
            Interface permitting Key classes to be managed as if they inherited from
            a common base class.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.PKIX.IPKIXAgreement">
            <summary>
            Interface permitting Key classes to be managed as if they inherited from
            a common base class.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.CertificateStore">
            <summary>
            Interface to the platform certificate store. Calls dispatch methods
            that have been registered by a subclass.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.CertificateStore.TestMode">
            <summary>
            If set, certificates are marked as test certificates, thus enabling
            simple and risk-free cleaning of the cert store(s). Note that
            setting KeyPair.TestMode will automatically set certificate store into test
            mode.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.CertificateStore.RegisterDelegate">
            <summary>
            Register a certificate in the default Windows store and location
            for that type of certificate.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.CertificateStore.PlatformRegister">
            <summary>
            The delegate for Register(GCP.Certificate Certificate)
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.CertificateStore.Register(Goedel.Cryptography.PKIX.Certificate)">
            <summary>
            Register a certificate in the default Windows store and location
            for that type of certificate.
            </summary>
            <param name="Certificate">Certificate to register.</param>
        </member>
        <member name="T:Goedel.Cryptography.CertificateStore.RegisterTrustedRootDelegate">
            <summary>
            Register a certificate in the default Windows store and location
            for that type of certificate.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.CertificateStore.PlatformRegisterTrustedRoot">
            <summary>
            The delegate for Register(GCP.Certificate Certificate)
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.CertificateStore.RegisterTrustedRoot(Goedel.Cryptography.PKIX.Certificate)">
            <summary>
            Register a certificate in the default Windows store and location
            for that type of certificate.
            </summary>
            <param name="Certificate">Certificate to register.</param>
        </member>
        <member name="T:Goedel.Cryptography.CertificateStore.RegisterTrustedRootByteDelegate">
            <summary>
            Register a certificate in the default Windows store and location
            for that type of certificate.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.CertificateStore.PlatformRegisterTrustedRootByte">
            <summary>
            The delegate for Register(GCP.Certificate Certificate)
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.CertificateStore.RegisterTrustedRoot(System.Byte[])">
            <summary>
            Register a certificate in the default Windows store and location
            for that type of certificate.
            </summary>
            <param name="Data">Certificate to register.</param>
        </member>
        <member name="T:Goedel.Cryptography.CertificateStore.GetDelegate">
            <summary>
            Register a certificate in the default Windows store and location
            for that type of certificate.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.CertificateStore.PlatformGet">
            <summary>
            The delegate for Register(GCP.Certificate Certificate)
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.CertificateStore.Get(System.String)">
            <summary>
            Find the certificate with a specified fingerprint.
            </summary>
            <param name="Fingerprint">Fingerprint of public key</param>
            <returns>Parsed certificate</returns>
        </member>
        <member name="T:Goedel.Cryptography.CertificateStore.CleanDelegate">
            <summary>
            Register a certificate in the default Windows store and location
            for that type of certificate.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.CertificateStore.PlatformClean">
            <summary>
            The delegate for Register(GCP.Certificate Certificate)
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.CertificateStore.Clean">
            <summary>
            Clean all certificate stores to remove test certificates
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Platform">
            <summary>
            Static class containing delegates to platform specific 
            factory methods. 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Platform.#cctor">
            <summary>
            Static initializer
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Platform.SHA2_512">
            <summary>Default SHA-2-512 provider optimized for small data items</summary>
            <remarks>This delegate must bound to the platform
            specific implementation by a call to  Platform.Initialize() before use</remarks>
        </member>
        <member name="F:Goedel.Cryptography.Platform.SHA2_256">
            <summary>Default SHA-2-256 provider optimized for small data items</summary>
            <remarks>This delegate must bound to the platform
            specific implementation by a call to  Platform.Initialize() before use</remarks>
        </member>
        <member name="F:Goedel.Cryptography.Platform.SHA3_512">
            <summary>Default SHA-3-512 provider optimized for small data items</summary>
            <remarks>This delegate must bound to the platform
            specific implementation by a call to  Platform.Initialize() before use</remarks>
        </member>
        <member name="F:Goedel.Cryptography.Platform.SHA3_256">
            <summary>Default SHA-3-256 provider optimized for small data items</summary>
            <remarks>This delegate must bound to the platform
            specific implementation by a call to  Platform.Initialize() before use</remarks>
        </member>
        <member name="F:Goedel.Cryptography.Platform.SHA1">
            <summary>Default SHA-1 provider optimized for small data items</summary>
            <remarks>This delegate must bound to the platform
            specific implementation by a call to  Platform.Initialize() before use</remarks>
        </member>
        <member name="F:Goedel.Cryptography.Platform.HMAC_SHA2_256">
            <summary>Default HMAC-SHA2-512 provider optimized for small data items</summary>
            <remarks>This delegate must bound to the platform
            specific implementation by a call to  Platform.Initialize() before use</remarks>
        </member>
        <member name="F:Goedel.Cryptography.Platform.HMAC_SHA2_384">
            <summary>Default HMAC-SHA2-512 provider optimized for small data items</summary>
            <remarks>This delegate must bound to the platform
            specific implementation by a call to  Platform.Initialize() before use</remarks>
        </member>
        <member name="F:Goedel.Cryptography.Platform.HMAC_SHA2_512">
            <summary>Default HMAC-SHA2-512 provider optimized for small data items</summary>
            <remarks>This delegate must bound to the platform
            specific implementation by a call to  Platform.Initialize() before use</remarks>
        </member>
        <member name="F:Goedel.Cryptography.Platform.AES_256">
            <summary>Default AES-256 provider optimized for small data items</summary>
            <remarks>This delegate must bound to the platform
            specific implementation by a call to  Platform.Initialize() before use</remarks>
        </member>
        <member name="F:Goedel.Cryptography.Platform.BlockProviderFactoryAes">
            <summary>Provider for AES block transform</summary>
        </member>
        <member name="T:Goedel.Cryptography.Platform.FillRandomBytesDelegate">
            <summary>Fill byte buffer with cryptographically strong random numbers.</summary>
            <param name="Data">The buffer to fill.</param>
            <param name="Offset">First byte to fill.</param>
            <param name="Count">Number of bytes to fill.</param>
        </member>
        <member name="F:Goedel.Cryptography.Platform.FillRandom">
            <summary>Fill byte buffer with cryptographically strong random numbers</summary>
            <remarks>This delegate must bound to the platform
            specific implementation by a call to  Platform.Initialize() before use</remarks>
        </member>
        <member name="T:Goedel.Cryptography.Platform.WriteToKeyStoreDelegate">
            <summary>
            Write a key to the machine keystore
            </summary>
            <param name="KeyPair">The key store</param>
            <param name="KeySecurity">The storage security level</param>
        </member>
        <member name="F:Goedel.Cryptography.Platform.WriteToKeyStore">
            <summary>
            Write a key to the machine keystore
            </summary>
            <remarks>This delegate must bound to the platform
            specific implementation by a call to  Platform.Initialize() before use</remarks>
        </member>
        <member name="T:Goedel.Cryptography.Platform.FindInKeyStoreDelegate">
            <summary>
            Retrieve record from the local key store. 
            </summary>
            <param name="UDF">The key identifier</param>
            <param name="KeyType">Key type, if known</param>
            <returns></returns>
        </member>
        <member name="F:Goedel.Cryptography.Platform.FindInKeyStore">
            <summary>
            Retrieve record from the local key store. 
            </summary>
            <remarks>This delegate must bound to the platform
            specific implementation by a call to  Platform.Initialize() before use</remarks>
        </member>
        <member name="T:Goedel.Cryptography.Platform.EraseFromKeyStoreDelegate">
            <summary>
            Retrieve record from the local key store. 
            </summary>
            <param name="UDF">The key identifier</param>
            <param name="KeyType">Key type, if known</param>
            <returns>True if key was found, otherwise false</returns>
        </member>
        <member name="F:Goedel.Cryptography.Platform.EraseFromKeyStore">
            <summary>
            Retrieve record from the local key store. 
            </summary>
            <remarks>This delegate must bound to the platform
            specific implementation by a call to  Platform.Initialize() before use</remarks>
        </member>
        <member name="T:Goedel.Cryptography.Platform.EraseTestDelegate">
            <summary>
            Delegate to erase test keys from the machine.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Platform.EraseTest">
            <summary>
            List of registered key erasure delegates
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Platform.GetRandomBytes(System.Int32)">
            <summary>
            Get a specified number of random bytes.
            </summary>
            <param name="Length">Number of bytes to get</param>
            <returns>Random data</returns>
        </member>
        <member name="M:Goedel.Cryptography.Platform.GetRandomBits(System.Int32)">
            <summary>
            Get a specified number of random bits.
            </summary>
            <param name="Length">Number of bits to get</param>
            <returns>Random data</returns>
        </member>
        <member name="M:Goedel.Cryptography.Platform.GetRandomBigInteger(System.Int32)">
            <summary>
            Get a Big integer with a specified number of random bits.
            </summary>
            <param name="Bits">Number of bits to get</param>
            <returns>Random data</returns>
        </member>
        <member name="M:Goedel.Cryptography.Platform.GetRandomBigInteger(System.Numerics.BigInteger)">
            <summary>
            Get a Big Integer that is smaller than the input value
            </summary>
            <param name="Ceiling">Number of bits to get</param>
            <returns>Random data</returns>
        </member>
        <member name="T:Goedel.Cryptography.Platform.FindLocalDelegate">
            <summary>Find a key by fingerprint in the local key stores</summary>
            <param name="UDF"></param>
            <returns></returns>
        </member>
        <member name="F:Goedel.Cryptography.Platform.FindLocalDelegates">
            <summary>
            Catalog of all local key stores.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Platform.KeyWrapRFC3394">
            <summary>
            Shared RFC 3394 Key Wrap provider.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Platform.GetPlatformInformation">
            <summary>Returns information used to configure the platform.</summary>
        </member>
        <member name="T:Goedel.Cryptography.Standard.CryptoProviderAuthentication">
            <summary>
            Provider for bulk authentication algorithms (e.g. HMAC-SHA256).
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderAuthentication.AlgorithmClass">
            <summary>
            The type of algorithm
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Standard.CryptoProviderAuthentication.KeyedHashAlgorithm">
            <summary>
            Hash algorithm provider.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderAuthentication.Key">
            <summary>
            Authentication key.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderAuthentication.#ctor(System.Security.Cryptography.KeyedHashAlgorithm)">
            <summary>
            Initializes an instance of the hash provider with the specified
            implementation.
            </summary>
            <param name="KeyedHashAlgorithm">The hash algorithm to construct provider for.</param>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderAuthentication.MakeEncoder(Goedel.Cryptography.CryptoProviderBulk,Goedel.Cryptography.CryptoAlgorithmID,System.IO.Stream)">
            <summary>Create an encoder for the specified data</summary>
            <param name="Algorithm">The key wrap algorithm</param>
            <param name="Bulk">The bulk provider to use. If specified, the parameters from
            the specified provider will be used. Otherwise a new bulk provider will 
            be created and returned as part of the result.</param>
            <param name="OutputStream">Output stream</param>
            <returns>Instance describing the key agreement parameters.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderAuthentication.MakeAuthenticator(System.Byte[],Goedel.Cryptography.CryptoAlgorithmID,System.IO.Stream)">
            <summary>
            Create an encoder for a bulk algorithm and optional key wrap or exchange.
            </summary>
            <param name="Algorithm">The key wrap algorithm</param>
            <param name="OutputStream">Output stream</param>
            <param name="Key">Encryption Key</param>
            <returns>Instance describing the key agreement parameters.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderAuthentication.BindEncoder(Goedel.Cryptography.CryptoDataEncoder)">
            <summary>
            Create a crypto stream from this provider.
            </summary>
            <param name="Encoder">The encoder to bind.</param>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderAuthentication.ProcessData(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Processes the specified byte array
            </summary>
            <param name="Data">The input to process</param>
            <param name="Offset">Offset within array</param>
            <param name="Count">Number of bytes to process</param>
            <param name="Key">The key</param>
            <returns>The result of the cryptographic operation.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Standard.CryptoProviderHMACSHA2_256">
            <summary>
            Provider for HMAC SHA-2 256 bits.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderHMACSHA2_256.CryptoAlgorithmID">
            <summary>
            The CryptoAlgorithmID Identifier.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderHMACSHA2_256.CryptoAlgorithm">
            <summary>
            Return a CryptoAlgorithm structure with properties describing this provider.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderHMACSHA2_256.Register(Goedel.Cryptography.CryptoCatalog)">
            <summary>
            Register this provider in the specified crypto catalog. A provider may 
            register itself multiple times to describe different configurations that 
            are supported.
            </summary>
            <param name="Catalog">The catalog to register the provider to, if
            null, the default catalog is used.</param>
            <returns>Description of the principal algorithm registration.</returns>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderHMACSHA2_256.Size">
            <summary>
            Default algorithm key and output size.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderHMACSHA2_256.#ctor">
            <summary>
            Constructor, algorithm takes no parameters.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Standard.CryptoProviderHMACSHA2_512">
            <summary>
            Provider for HMAC SHA-2 512 bits.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderHMACSHA2_512.CryptoAlgorithmID">
            <summary>
            The CryptoAlgorithmID Identifier.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderHMACSHA2_512.CryptoAlgorithm">
            <summary>
            Return a CryptoAlgorithm structure with properties describing this provider.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderHMACSHA2_512.Register(Goedel.Cryptography.CryptoCatalog)">
            <summary>
            Register this provider in the specified crypto catalog. A provider may 
            register itself multiple times to describe different configurations that 
            are supported.
            </summary>
            <param name="Catalog">The catalog to register the provider to, if
            null, the default catalog is used.</param>
            <returns>Description of the principal algorithm registration.</returns>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderHMACSHA2_512.Size">
            <summary>
            Default algorithm key and output size.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderHMACSHA2_512.Factory(System.Int32,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Factory method for provider.
            </summary>
            <param name="KeySize">The key size (ignored)</param>
            <param name="Ignore">The cryptographic algorithn (ignored)</param>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderHMACSHA2_512.#ctor">
            <summary>
            Constructor, algorithm takes no parameters.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Standard.AesBlock">
            <summary>
            AES block encryption/decryption transform. This is used in the AES Key wrap and
            other routines to wrap the block encryption provided at the platform level.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Standard.AesBlock.BlockSize">
            <summary>
            Return the block size in bits.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Standard.AesBlock.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="Key">Key</param>
            <param name="Encrypt">If true, encrypt, otherwise decrypt</param>
        </member>
        <member name="M:Goedel.Cryptography.Standard.AesBlock.Factory(System.Byte[],System.Boolean)">
            <summary>
            Factory method
            </summary>
            <param name="Key">The key to initialize the method</param>
            <param name="Encrypt">If true, create an encryptor, if false, create a decryptor.</param>
            <returns>The block provider.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Standard.AesBlock.Process(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encrypt or decrypt a single block of data under the specified key
            </summary>
            <param name="Input">Input byte array</param>
            <param name="InputOffset">Read offset in input array.</param>
            <param name="Output">Output byte array</param>
            <param name="OutputOffset">Write offset in output array.</param>
        </member>
        <member name="T:Goedel.Cryptography.Standard.CryptoProviderDigest">
            <summary>
            <para>Base class for all cryptographic hash providers.</para>
            
            <para>Provides utility and convenience functions that are employed in derived
            classes. This provides consistency when using either the built in .NET
            providers or those from other sources.</para>
            
            <para>Unlike the .NET API, the wrapper provider completely conceals the details 
            of the cryptographic algorithm implementation. It is not necessary to 
            observe block boundaries when using the TransformData methods.</para>
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderDigest.HashAlgorithm">
            <summary>
            Hash algorithm provider.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderDigest.Register(Goedel.Cryptography.CryptoCatalog)">
            <summary>
            Register this set of providers to the specified catalog.
            </summary>
            <param name="Catalog">Catalog to register the providers to</param>
            <returns>Registration for the preferred provider (SHA-2-512)</returns>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderDigest.MakeEncoder(Goedel.Cryptography.CryptoProviderBulk,Goedel.Cryptography.CryptoAlgorithmID,System.IO.Stream)">
            <summary>Create an encoder for the specified data</summary>
            <param name="Algorithm">Ignored</param>
            <param name="Bulk">Ignored</param>
            <param name="OutputStream">Output stream. Data written to the input 
            stream is written to the output without modification. This permits
            multiple digest values to be calculated simultaneously.</param>
            <returns>Instance describing the key agreement parameters.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderDigest.BindEncoder(Goedel.Cryptography.CryptoDataEncoder)">
            <summary>
            Create a crypto stream from this provider.
            </summary>
            <param name="Encoder">The encoder to bind.</param>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderDigest.Complete(Goedel.Cryptography.CryptoData)">
            <summary>
            Complete processing at the end of an encoding or decoding operation
            </summary>
            <param name="CryptoData">Structure to write result to</param>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderDigest.Truncate">
            <summary>
            Truncation length. If this value is greater than 0, the output size is 
            truncated to the nearest integer multiple of 8 bits.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderDigest.ProcessData(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Processes the specified byte array
            </summary>
            <param name="Data">The input to process</param>
            <param name="Offset">Offset within array</param>
            <param name="Count">Number of bytes to process</param>
            <param name="Key">The key</param>
            <returns>The result of the cryptographic operation.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoDataEncoderDigest.#ctor(Goedel.Cryptography.CryptoAlgorithmID,Goedel.Cryptography.CryptoProviderBulk)">
            <summary>
            Default constructor
            </summary>
            <param name="Identifier">The Goedel Cryptography identifier.</param>
            <param name="Bulk">Provider to use to process the bulk data
            signature operations where the asymmetric operation is performed after the
            bulk operation completes. </param> 
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoDataEncoderDigest.Complete">
            <summary>
            Close the crypto stream and get the digest value.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Standard.CryptoProviderSHA2_256">
            <summary>
            Provider for the SHA-2 256 bit Hash Algorithm
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderSHA2_256.CryptoAlgorithmID">
            <summary>
            The CryptoAlgorithmID Identifier.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderSHA2_256.CryptoAlgorithm">
            <summary>
            Return a CryptoAlgorithm structure with properties describing this provider.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderSHA2_256.HashAlgorithm">
            <summary>
            Hash algorithm provider.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderSHA2_256.Register(Goedel.Cryptography.CryptoCatalog)">
            <summary>
            Register this provider in the specified crypto catalog. A provider may 
            register itself multiple times to describe different configurations that 
            are supported.
            </summary>
            <param name="Catalog">The catalog to register the provider to, if
            null, the default catalog is used.</param>
            <returns>Description of the principal algorithm registration.</returns>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderSHA2_256.Size">
            <summary>
            Default output size.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Standard.CryptoProviderSHA2_512">
            <summary>
            Provider for the SHA-2 512 bit Hash Algorithm
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderSHA2_512.CryptoAlgorithmID">
            <summary>
            The CryptoAlgorithmID Identifier.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderSHA2_512.CryptoAlgorithm">
            <summary>
            Return a CryptoAlgorithm structure with properties describing this provider.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderSHA2_512.HashAlgorithm">
            <summary>
            Hash algorithm provider.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderSHA2_512.Register(Goedel.Cryptography.CryptoCatalog)">
            <summary>
            Register this provider in the specified crypto catalog. A provider may 
            register itself multiple times to describe different configurations that 
            are supported.
            </summary>
            <param name="Catalog">The catalog to register the provider to, if
            null, the default catalog is used.</param>
            <returns>Description of the principal algorithm registration.</returns>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderSHA2_512.Size">
            <summary>
            Default output size.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderSHA2_512.#ctor(System.Int32,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Create a SHA-2-256 digest provider.
            </summary>
            <param name="KeySize">Key size.</param>
            <param name="ID">Cryptgraphic algorithm.</param>
        </member>
        <member name="T:Goedel.Cryptography.Standard.CryptoProviderSHA1">
            <summary>
            Provider for the SHA-1 Hash algorithm
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderSHA1.CryptoAlgorithmID">
            <summary>
            The CryptoAlgorithmID Identifier.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderSHA1.CryptoAlgorithm">
            <summary>
            Return a CryptoAlgorithm structure with properties describing this provider.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderSHA1.HashAlgorithm">
            <summary>
            Hash algorithm provider.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderSHA1.Register(Goedel.Cryptography.CryptoCatalog)">
            <summary>
            Register this provider in the specified crypto catalog. A provider may 
            register itself multiple times to describe different configurations that 
            are supported.
            </summary>
            <param name="Catalog">The catalog to register the provider to, if
            null, the default catalog is used.</param>
            <returns>Description of the principal algorithm registration.</returns>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderSHA1.Size">
            <summary>
            Default output size.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Standard.CryptoProviderSHA3_256">
            <summary>
            Provider for the SHA-3 256 bit Hash Algorithm
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderSHA3_256.CryptoAlgorithmID">
            <summary>
            The CryptoAlgorithmID Identifier.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderSHA3_256.CryptoAlgorithm">
            <summary>
            Return a CryptoAlgorithm structure with properties describing this provider.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderSHA3_256.HashAlgorithm">
            <summary>
            Hash algorithm provider.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderSHA3_256.Register(Goedel.Cryptography.CryptoCatalog)">
            <summary>
            Register this provider in the specified crypto catalog. A provider may 
            register itself multiple times to describe different configurations that 
            are supported.
            </summary>
            <param name="Catalog">The catalog to register the provider to, if
            null, the default catalog is used.</param>
            <returns>Description of the principal algorithm registration.</returns>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderSHA3_256.Size">
            <summary>
            Default output size.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Standard.CryptoProviderSHA3_512">
            <summary>
            Provider for the SHA-3 512 bit Hash Algorithm
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderSHA3_512.CryptoAlgorithmID">
            <summary>
            The CryptoAlgorithmID Identifier.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderSHA3_512.CryptoAlgorithm">
            <summary>
            Return a CryptoAlgorithm structure with properties describing this provider.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderSHA3_512.HashAlgorithm">
            <summary>
            Hash algorithm provider.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderSHA3_512.Register(Goedel.Cryptography.CryptoCatalog)">
            <summary>
            Register this provider in the specified crypto catalog. A provider may 
            register itself multiple times to describe different configurations that 
            are supported.
            </summary>
            <param name="Catalog">The catalog to register the provider to, if
            null, the default catalog is used.</param>
            <returns>Description of the principal algorithm registration.</returns>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderSHA3_512.Size">
            <summary>
            Default output size.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Standard.CryptoProviderSHAKE128">
            <summary>
            Provider for the SHA-3 512 bit Hash Algorithm
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderSHAKE128.CryptoAlgorithmID">
            <summary>
            The CryptoAlgorithmID Identifier.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderSHAKE128.CryptoAlgorithm">
            <summary>
            Return a CryptoAlgorithm structure with properties describing this provider.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderSHAKE128.HashAlgorithm">
            <summary>
            Hash algorithm provider.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderSHAKE128.Register(Goedel.Cryptography.CryptoCatalog)">
            <summary>
            Register this provider in the specified crypto catalog. A provider may 
            register itself multiple times to describe different configurations that 
            are supported.
            </summary>
            <param name="Catalog">The catalog to register the provider to, if
            null, the default catalog is used.</param>
            <returns>Description of the principal algorithm registration.</returns>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderSHAKE128.Size">
            <summary>
            Default output size.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Standard.CryptoProviderSHAKE256">
            <summary>
            Provider for the SHA-3 512 bit Hash Algorithm
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderSHAKE256.CryptoAlgorithmID">
            <summary>
            The CryptoAlgorithmID Identifier.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderSHAKE256.CryptoAlgorithm">
            <summary>
            Return a CryptoAlgorithm structure with properties describing this provider.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderSHAKE256.HashAlgorithm">
            <summary>
            Hash algorithm provider.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderSHAKE256.Register(Goedel.Cryptography.CryptoCatalog)">
            <summary>
            Register this provider in the specified crypto catalog. A provider may 
            register itself multiple times to describe different configurations that 
            are supported.
            </summary>
            <param name="Catalog">The catalog to register the provider to, if
            null, the default catalog is used.</param>
            <returns>Description of the principal algorithm registration.</returns>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderSHAKE256.Size">
            <summary>
            Default output size.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Standard.CryptoProviderEncryption">
            <summary>
            Provider for bulk encryption algorithms (e.g. AES). Prior to the introduction of
            .NET Standard and the unification of the cryptographic processing algorithms, this
            class was necessary as a means of enabling the use of different providers. It is
            now redundant and will be removed in due course.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderEncryption.AlgorithmClass">
            <summary>
            The type of algorithm
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderEncryption.Provider">
            <summary>
            The .NET cryptographic provider (for use by sub classes).
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderEncryption.KeySize">
            <summary>
            The size of the required key
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderEncryption.IVSize">
            <summary>
            The size of the required IV. If zero, no IV is required.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Standard.CryptoProviderEncryption.AppendIV">
            <summary>
            If set to true, the initialization vector (if used) will be prepended to the
            beginning of the output byte stream.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Standard.CryptoProviderEncryption.AppendIntegrity">
            <summary>
            If set to true, the authentication code (if created) will be appended to the
            end of the output byte stream.
            
            Since we don't currently have a GCM mode, this isn't currently used.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderEncryption.OutputLength(System.Int64)">
            <summary>
            Return the padded output length for a specified input length.
            </summary>
            <remarks>Only implemented for PKCS#7 padding.</remarks>
            <param name="Input">The input length in bytes</param>
            <returns>The output length in bytes.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderEncryption.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Return a block Encryptor for the specified key and IV. This is required for
            constructing certain types of streaming encoder on block algorithms.
            </summary>
            <param name="Key">The encryption key.</param>
            <param name="IV">The initialization vector. Must be of a legal size for the algorithm</param>
            <returns>The transformation object instance.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderEncryption.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Return a block decryptor for the specified key and IV. This is required for
            constructing certain types of streaming encoder on block algorithms.
            </summary>
            <param name="Key">The encryption key.</param>
            <param name="IV">The initialization vector. Must be of a legal size for the algorithm</param>
            <returns>The transformation object instance.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderEncryption.#ctor(System.Security.Cryptography.SymmetricAlgorithm,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
             <summary>
             Constructor for initializing a delegate class.
             </summary>
             <param name="SymmetricAlgorithm">Cryptographic provider.</param>
             <param name="KeySize">Key size in bits.</param>
             <param name="CipherMode">Cipher mode to use</param>
            <param name="PaddingMode">Padding mode to use</param>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderEncryption.MakeEncoder(Goedel.Cryptography.CryptoProviderBulk,Goedel.Cryptography.CryptoAlgorithmID,System.IO.Stream)">
            <summary>Create an encoder for the specified data</summary>
            <param name="Algorithm">The key wrap algorithm</param>
            <param name="Bulk">The bulk provider to use. If specified, the parameters from
            the specified provider will be used. Otherwise a new bulk provider will 
            be created and returned as part of the result.</param>
            <param name="OutputStream">Output stream</param>
            <returns>Instance describing the key agreement parameters.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderEncryption.MakeEncryptor(System.Byte[],System.Byte[],Goedel.Cryptography.CryptoAlgorithmID,System.IO.Stream)">
            <summary>
            Create an encoder for a bulk algorithm and optional key wrap or exchange.
            </summary>
            <param name="Algorithm">The key wrap algorithm</param>
            <param name="OutputStream">Output stream</param>
            <param name="IV">Initialization vector for symmetric encryption</param>
            <param name="Key">Encryption Key</param>
            <returns>Instance describing the key agreement parameters.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderEncryption.MakeDecryptor(System.Byte[],System.Byte[],Goedel.Cryptography.CryptoAlgorithmID,System.IO.Stream)">
            <summary>
            Create a decoder for a bulk algorithm and optional key wrap or exchange.
            </summary>
            <param name="Algorithm">The key wrap algorithm</param>
            <param name="OutputStream">Output stream</param>
            <param name="IV">Initialization vector for symmetric encryption</param>
            <param name="Key">Encryption Key</param>
            <returns>Instance describing the key agreement parameters.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderEncryption.BindEncoder(Goedel.Cryptography.CryptoDataEncoder)">
            <summary>
            Create a crypto stream from this provider.
            </summary>
            <param name="Encoder">The encoder to bind.</param>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderEncryption.BindDecoder(Goedel.Cryptography.CryptoDataDecoder)">
            <summary>
            Create a crypto stream from this provider.
            </summary>
            <param name="Decoder">The encoder to bind.</param>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderEncryption.Encrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Encrypt the specified byte array
            </summary>
            <param name="Data">The input to process</param>
            <param name="IV">The Initialization Vector</param>
            <param name="Key">The key</param>
            <returns>The result of the cryptographic operation.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderEncryption.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Encrypt the specified byte array
            </summary>
            <param name="Data">The input to process</param>
            <param name="IV">The Initialization Vector</param>
            <param name="Key">The key</param>
            <returns>The result of the cryptographic operation.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderEncryption.Complete(Goedel.Cryptography.CryptoData)">
            <summary>
            Complete processing at the end of an encoding or decoding operation
            </summary>
            <param name="CryptoData">Last data.</param>
        </member>
        <member name="T:Goedel.Cryptography.Standard.CryptoProviderEncryptAES">
            <summary>
            Provider for the SHA-2 256 bit Hash Algorithm
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderEncryptAES.CryptoAlgorithmID">
            <summary>
            The CryptoAlgorithmID Identifier.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderEncryptAES.BlockSize">
            <summary>Return the block size in bits</summary>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderEncryptAES.Register(Goedel.Cryptography.CryptoCatalog)">
            <summary>
            Register this provider in the specified crypto catalog. A provider may 
            register itself multiple times to describe different configurations that 
            are supported.
            </summary>
            <param name="Catalog">The catalog to register the provider to, if
            null, the default catalog is used.</param>
            <returns>Description of the principal algorithm registration.</returns>
        </member>
        <member name="P:Goedel.Cryptography.Standard.CryptoProviderEncryptAES.Size">
            <summary>
            Default algorithm key size.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Standard.CryptoProviderEncryptAES.#ctor(System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Create an AES provider with the specified key size and mode.
            </summary>
            <param name="KeySize">Key Size in bits.</param>
            <param name="CipherMode">The cipher mode to use (CBC or CTS).</param>
            <param name="PaddingMode">The Padding Mode to use (PKCS or None).</param>
        </member>
        <member name="T:Goedel.Cryptography.Standard.ContainerFramework">
            <summary>
            Utility class for addressing containers.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Standard.ContainerFramework.PrefixTest">
            <summary>
            Prefix for test containers
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Standard.ContainerFramework.PrefixProduction">
            <summary>
            Prefix for production containers.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Standard.ContainerFramework.Prefix">
            <summary>
            Container prefix
            </summary>
            <returns>The container prefix</returns>
        </member>
        <member name="M:Goedel.Cryptography.Standard.ContainerFramework.Name(System.String)">
            <summary>
            Generate a key container name from a UDF fingerprint.
            </summary>
            <param name="UDF">UDF fingerprint value.</param>
            <returns>The container name.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Standard.Factory">
            <summary>
            Formatting class for representing RSA Public Keys in ASN.1 and
            calculating the PKIX keyinfo version of the UDF fingerprint.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Standard.Factory.RSAPublicKey(System.Security.Cryptography.RSAParameters)">
            <summary>
            Create instance from RSAParameters structure.
            </summary>
            <param name="RSAParameters">Input parameters in System.Security.Cryotography format</param>
            <returns>The public key</returns>
        </member>
        <member name="T:Goedel.Cryptography.Standard.NamespaceDoc">
            <summary>
            Implementation of Goedel.Cryptography algorithms using the native .NET Standard
            libraries. 
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.CryptographyCommon">
            <summary>
            Initialize the cryptographic framework
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.CryptographyCommon.Initialize(System.Boolean)">
            <summary>
            Perform initialization of the Goedel.Cryptography portable class
            with delegates to the .NET framework methods.
            </summary>
            <param name="TestMode">If true, the application will be initialized in
            test/debug mode.</param>
        </member>
        <member name="F:Goedel.Cryptography.CryptographyCommon.RNGCryptoServiceProvider">
            <summary>
            Cryptographic random number generator.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.CryptographyCommon.GetRandomBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Fill a byte array with cryptographically strong random data.
            </summary>
            <param name="Data">The array to fill with cryptographically strong random bytes.</param>
            <param name="Offset">The index of the array to start the fill operation.</param>
            <param name="Count">The number of bytes to fill</param>
        </member>
        <member name="T:Goedel.Cryptography.UDFTypeIdentifier">
            <summary>
            UDF type identifier codes
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.UDFTypeIdentifier.AuthenticatorHMAC_SHA_2_512">
            <summary>Authenticator using HMAC-SHA-2-512</summary>
        </member>
        <member name="F:Goedel.Cryptography.UDFTypeIdentifier.AuthenticatorHMAC_SHA_3_512">
            <summary>Authenticator using HMAC-SHA-3-512</summary>
        </member>
        <member name="F:Goedel.Cryptography.UDFTypeIdentifier.Encryption">
            <summary>Encryption/Authentication key</summary>
        </member>
        <member name="F:Goedel.Cryptography.UDFTypeIdentifier.DigestAlgSHA_2_512">
            <summary>Content Digest using SHA-2-512</summary>
        </member>
        <member name="F:Goedel.Cryptography.UDFTypeIdentifier.DigestSHA_3_512">
            <summary>Content Digest using SHA-3-512</summary>
        </member>
        <member name="F:Goedel.Cryptography.UDFTypeIdentifier.Nonce">
            <summary>Type code for random nonce</summary>
        </member>
        <member name="F:Goedel.Cryptography.UDFTypeIdentifier.ShamirSecret">
            <summary>Type code for Shamir secret</summary>
        </member>
        <member name="T:Goedel.Cryptography.UDFConstants">
            <summary>
            Constants used in building UDF values.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.UDFConstants.PKIXKey">
            <summary>
            Content type identifier for PKIX KeyInfo data type
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.UDFConstants.OpenPGPKey">
            <summary>
            Content type identifier for OpenPGP Key
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.UDFConstants.EscrowedKey">
            <summary>
            Content type for mesh escrowed key
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.UDFConstants.UDFEncryption">
            <summary>
            UDF Fingerprint list
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.UDFConstants.UDFSecret">
            <summary>
            UDF Fingerprint list
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.UDF">
            <summary>
            Class implementing the Uniform Data Fingerprint spec.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.UDF.DefaultBits">
            <summary>
            Default number of UDF bits (usually 140).
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.UDF.MaximumBits">
            <summary>
            Maximum precision (usually 440);
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.UDF.DataToUDFBinary(System.Byte[],System.String,System.Int32,Goedel.Cryptography.CryptoAlgorithmID,System.String)">
            <summary>
            Calculate a UDF fingerprint from the content data with specified precision.
            </summary>
            <param name="contentType">MIME media type of data being fingerprinted.</param>
            <param name="data">Data to be fingerprinted.</param>
            <param name="bits">Precision, must be a multiple of 25 bits.</param>
            <param name="cryptoAlgorithmID">The cryptographic digest to use to compute
            the hash value.</param>
            <param name="key">Optional key used to create a keyed fingerprint.</param>
            <returns>The binary UDF fingerprint.</returns>
        </member>
        <member name="M:Goedel.Cryptography.UDF.DigestToUDFBinary(System.Byte[],System.String,System.Int32,Goedel.Cryptography.CryptoAlgorithmID,System.String)">
            <summary>
            Calculate a UDF fingerprint from the content digest with specified precision.
            </summary>
            <param name="contentType">MIME media type of data being fingerprinted.</param>
            <param name="digest">Digest of the data to be fingerprinted.</param>
            <param name="bits">Precision, must be a multiple of 25 bits.</param>
            <param name="cryptoAlgorithmID">The cryptographic digest to use to compute
            the hash value.</param>
            <param name="key">Optional key used to create a keyed fingerprint.</param>
            <returns>The binary UDF fingerprint.</returns>
        </member>
        <member name="M:Goedel.Cryptography.UDF.BufferDigestToUDF(System.Byte[],System.Int32,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Calculate a UDF fingerprint with specified precision.
            </summary>
            <param name="buffer">The prepared data buffer.</param>
            <param name="bits">Precision, must be a multiple of 25 bits.</param>
            <param name="cryptoAlgorithmID">The cryptographic digest to use to compute
            the hash value.</param>
            <returns>The binary UDF fingerprint.</returns>
        </member>
        <member name="M:Goedel.Cryptography.UDF.GetCompression(System.Byte[])">
            <summary>
            Returns the compression level as determined by the number of trailing zero
            bits of <paramref name="buffer"/>
            </summary>
            <param name="buffer">The buffer to compress (MUST have at least 7 bytes)</param>
            <returns>The compression level, 3 if there are 50 leading zeros, 2 if there
            are 40 leading zeros, 1 if there are 20 and 0 otherwise.</returns>
        </member>
        <member name="M:Goedel.Cryptography.UDF.BufferDigestToUDF(System.Byte[],System.String,System.Int32,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Calculate a UDF fingerprint with specified precision.
            </summary>
            <param name="buffer">The prepared data buffer.</param>
            <param name="bits">Precision, must be a multiple of 25 bits.</param>
            <param name="cryptoAlgorithmID">The cryptographic digest to use to compute
            the hash value.</param>
            <param name="key">Key used to create a keyed fingerprint.</param>
            <returns>The binary UDF fingerprint.</returns>
        </member>
        <member name="M:Goedel.Cryptography.UDF.TypeBDSToBinary(Goedel.Cryptography.UDFTypeIdentifier,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert a Type Identifier and binary data sequence to a UDF binary buffer 
            ready for presentation.
            </summary>
            <param name="typeID">The type identifier.</param>
            <param name="source">The input buffer.</param>
            <param name="bits">The number of bits precision of the final output. If 0, the value
            of the property DefaultBits is used.</param>
            <param name="offset">Offset in <paramref name="source"/>.</param>
            <returns>The resulting binary buffer.</returns>
        </member>
        <member name="M:Goedel.Cryptography.UDF.TypeBDSToString(Goedel.Cryptography.UDFTypeIdentifier,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert a Type Identifier and binary data sequence to a UDF binary buffer 
            ready for presentation.
            </summary>
            <param name="typeID">The type identifier.</param>
            <param name="source">The input buffer.</param>
            <param name="bits">The number of bits precision of the final output. If 0, the value
            of the property DefaultBits is used.</param>
            <param name="offset">Offset in <paramref name="source"/>.</param>
            <returns>The resulting binary buffer.</returns>
        </member>
        <member name="M:Goedel.Cryptography.UDF.UDFBuffer(System.Byte[],System.String)">
            <summary>
            Convert a digest value and content type to a UDF buffer.
            </summary>
            <param name="digest">Digest value to be formatted</param>
            <param name="contentType">MIME media type. See 
            http://www.iana.org/assignments/media-types/media-types.xhtml for list.</param>
            <returns>SHA2-512 (UTF8(ContentType) + ":" + SHA2512(Data))</returns>
        </member>
        <member name="M:Goedel.Cryptography.UDF.KeyStringToKey(System.String,System.Int32,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Convert TextKey to the MAC key.
            </summary>
            <param name="textKey">The key.</param>
            <param name="length">The number of bits to return (defaults to the MAC output)</param>
            <param name="algorithm">The MAC algorithm to use.</param>
            <returns>The corresponding MAC key.</returns>
        </member>
        <member name="M:Goedel.Cryptography.UDF.Matches(System.String,System.Byte[],System.Int32)">
            <summary>
            Determine if the string <paramref name="value"/> matches the 
            pattern <paramref name="test"/> with at least <paramref name="minBits"/>
            significant bits.
            </summary>
            <param name="value"></param>
            <param name="test"></param>
            <param name="minBits">The minimum work factor for the comparison</param>
            <returns>true if the string <paramref name="value"/> matches the 
            pattern <paramref name="test"/> with at least <paramref name="minBits"/>
            significant bits. Otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.UDF.ContentDigestOfDataString(System.Byte[],System.String,System.Int32,Goedel.Cryptography.CryptoAlgorithmID,System.String)">
            <summary>
            Calculate a UDF fingerprint from an OpenPGP key with specified precision.
            </summary>
            <param name="contentType">MIME media type of data being fingerprinted.</param>
            <param name="data">Data to be fingerprinted.</param>
            <param name="bits">Precision, must be a multiple of 25 bits.</param>
            <param name="cryptoAlgorithmID">The cryptographic digest to use to compute
            the hash value.</param>
            <param name="key">Optional key used to create a keyed fingerprint.</param>
            <returns>The binary UDF fingerprint.</returns>
        </member>
        <member name="M:Goedel.Cryptography.UDF.ContentDigestOfDigestString(System.Byte[],System.String,System.Int32,Goedel.Cryptography.CryptoAlgorithmID,System.String)">
            <summary>
            Calculate a UDF fingerprint from an OpenPGP key with specified precision.
            </summary>
            <param name="contentType">MIME media type of data being fingerprinted.</param>
            <param name="data">Data to be fingerprinted.</param>
            <param name="bits">Precision, must be a multiple of 20 bits.</param>
            <param name="cryptoAlgorithmID">The cryptographic digest to use to compute
            the hash value.</param>
            <param name="key">Optional key used to create a keyed fingerprint.</param>
            <returns>The binary UDF fingerprint.</returns>
        </member>
        <member name="M:Goedel.Cryptography.UDF.ContentDigestOfUDF(System.String,System.Int32,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Calculate the UDF fingerprint identifier of a fingerprint identifier.
            </summary>
            <param name="data"></param>
            <param name="cryptoAlgorithmID"></param>
            <param name="bits">Precision, must be a multiple of 20 bits.</param>
            <returns>The Base32 presentation of the UDF value truncated to 
            <paramref name="bits"/> precision.</returns>
        </member>
        <member name="M:Goedel.Cryptography.UDF.PresentationBase32(System.Byte[],System.Int32)">
            <summary>
            Calculate a UDF fingerprint from an OpenPGP key with specified precision.
            </summary>
            <param name="buffer">Fingerprint to format.</param>
            <param name="bits">Precision.</param>
            <returns>The binary UDF fingerprint.</returns>
        </member>
        <member name="M:Goedel.Cryptography.UDF.Nonce(System.Int32)">
            <summary>
            Return a random sequence as a UDF 
            </summary>
            <param name="bits">Number of random bits in the string</param>
            <returns>A randomly generated UDF string.</returns>
        </member>
        <member name="M:Goedel.Cryptography.UDF.SymmetricKey(System.Int32)">
            <summary>
            Return a random sequence as a UDF 
            </summary>
            <param name="bits">Number of random bits in the string</param>
            <returns>A randomly generated UDF string.</returns>
        </member>
        <member name="M:Goedel.Cryptography.UDF.SymmetricKey(System.Byte[])">
            <summary>
            Return the key value <paramref name="Data"/> in UDF form.
            </summary>
            <param name="Data">The data to convert to key form</param>
            <returns>A randomly generated UDF string.</returns>
        </member>
        <member name="M:Goedel.Cryptography.UDF.KeyShare(System.Byte[])">
            <summary>
            Return the key value <paramref name="Data"/> in UDF form.
            </summary>
            <param name="Data">The data to convert to key form</param>
            <returns>A randomly generated UDF string.</returns>
        </member>
        <member name="M:Goedel.Cryptography.UDF.SymmetricKeyUDF(System.Byte[])">
            <summary>
            Return the key value <paramref name="Data"/> in UDF form.
            </summary>
            <param name="Data">The data to convert to key form</param>
            <returns>A randomly generated UDF string.</returns>
        </member>
        <member name="M:Goedel.Cryptography.UDF.FromKeyInfo(System.Byte[],System.Int32)">
            <summary>
            Calculate a UDF fingerprint from a PKIX KeyInfo blob with specified precision.
            </summary>
            <param name="Data">Data to be fingerprinted.</param>
            <param name="Bits">Precision, must be a multiple of 25 bits.</param>
            <returns>The binary UDF fingerprint.</returns>
        </member>
        <member name="M:Goedel.Cryptography.UDF.Parse(System.String,System.Byte@)">
            <summary>
            Parse a UDF to obtain the type identifier and Binary Data Sequence.
            </summary>
            <param name="udf">UDF to parse.</param>
            <param name="code">The type identifier code.</param>
            <returns>The Binary Data Sequence.</returns>
        </member>
        <member name="M:Goedel.Cryptography.UDF.Nonce(System.String)">
            <summary>
            Parse a UDF and return the encryption key value if and only if it
            is of the correct type code, otherwise null.
            </summary>
            <param name="udf">The string tro parse.</param>
            <returns>The key value.</returns>
        </member>
        <member name="M:Goedel.Cryptography.UDF.SymmetricKey(System.String)">
            <summary>
            Parse a UDF and return the encryption key value if and only if it
            is of the correct type code, otherwise null.
            </summary>
            <param name="udf">The string tro parse.</param>
            <returns>The key value.</returns>
        </member>
        <member name="M:Goedel.Cryptography.UDF.ShamirSecret(System.String)">
            <summary>
            Parse a UDF and return the encryption key value if and only if it
            is of the correct type code, otherwise null.
            </summary>
            <param name="udf">The string tro parse.</param>
            <returns>The key value.</returns>
        </member>
        <member name="M:Goedel.Cryptography.UDF.Validate(System.String,System.String)">
            <summary>
            Check that a UDF fingerprint satisfies a test value. At present
            the test must be exact. It is possible that this can be relaxed
            so that a longer fingerprint will satisfy a shorter one.
            </summary>
            <param name="test">Expected value</param>
            <param name="value">Comparison value.</param>
        </member>
        <member name="M:Goedel.Cryptography.UDF.MakeStrongName(System.String,System.String)">
            <summary>Convert address and fingerprint value to Strong Internet Name.</summary>
            <param name="address">DNS address.</param>
            <param name="uDF">Fingerprint value.</param>
            <returns>The strong name.</returns>
        </member>
        <member name="M:Goedel.Cryptography.UDF.ParseStrongRFC822(System.String,System.String@,System.String@)">
            <summary>Parse an RFC822 address to extract strong name component if present.</summary>
            <param name="address">The Internet address.</param>
            <param name="in">The address to parse.</param>
            <param name="uDF">The strong name fingerprint (if found).</param>
        </member>
        <member name="M:Goedel.Cryptography.UDF.MakeWitness(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Make a witness value from two input fingerprints and nonces.
            </summary>
            <param name="fingerprint1">The first fingerprint value</param>
            <param name="nonce1">The first nonce value</param>
            <param name="fingerprint2">The second fingerprint value</param>
            <param name="nonce2">The second nonce value</param>
            <returns>The fingerprint value</returns>
        </member>
        <member name="M:Goedel.Cryptography.UDF.MakeWitnessString(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Make a witness value from two input fingerprints and nonces.
            </summary>
            <param name="fingerprint1">The first fingerprint value</param>
            <param name="nonce1">The first nonce value</param>
            <param name="fingerprint2">The second fingerprint value</param>
            <param name="nonce2">The second nonce value</param>
            <param name="bits">The output precision in bits.</param>
            <returns>The fingerprint value</returns>
        </member>
        <member name="M:Goedel.Cryptography.UDF.MakeWitness(System.Byte[],System.Byte[])">
            <summary>
            Calculate a binary witness value for the specified fingerprint
            and nonce value.
            </summary>
            <param name="fingerprint">The fingerprint value.</param>
            <param name="nonce">The nonce value</param>
            <returns>The corresponding witness value.</returns>
        </member>
        <member name="M:Goedel.Cryptography.UDF.MakeWitnessString(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Calculate a witness fingerprint for the specified fingerprint
            and nonce value.
            </summary>
            <param name="fingerprint">The fingerprint value.</param>
            <param name="nonce">The nonce value</param>
            <param name="bits">The number of bits precision to provide in the output.</param>
            <returns>The corresponding witness value.</returns>
        </member>
        <member name="M:Goedel.Cryptography.UDF.PIN2PinID(System.String)">
            <summary>
            Convert a PIN to a Pin Identifier
            </summary>
            <param name="PIN">The PIN value</param>
            <returns>The corresponding PIN identifier</returns>
        </member>
        <member name="T:Goedel.Cryptography.Extension">
            <summary>Static class containing static extension methods providing convenience functions.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Extension.CompareUDF(System.String,System.String)">
            <summary>
            Compare a fingerprint to see that it matches the specified pattern according
            to UDF matching rules. Currently, the method only converts strings to lower 
            case, it does not canonicalize.
            </summary>
            <param name="Pattern">The pattern the candidate is being tested for a match against.</param>
            <param name="UDF">The candidate being tested</param>
            <returns>True if the patterns match, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Extension.GetUDFContentDigest(System.Byte[],System.String,System.Int32)">
            <summary>
            Calculate a UDF fingerprint from specified ContentType with specified precision.
            </summary>
            <param name="ContentType">MIME media type of data being fingerprinted.</param>
            <param name="Data">Data to be fingerprinted.</param>
            <param name="Bits">Precision, must be a multiple of 25 bits.</param>
            <returns>The UDF fingerprint.</returns>
        </member>
    </members>
</doc>
