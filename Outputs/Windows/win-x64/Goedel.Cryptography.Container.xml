<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Goedel.Cryptography.Container</name>
    </assembly>
    <members>
        <member name="T:Goedel.Cryptography.Container.ContainerType">
            <summary>
            Enumeration describing a container type.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.ContainerType.Unknown">
            <summary>The type is not defined.</summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.ContainerType.List">
            <summary>A double linked list container. It can be read efficiently in
            the forward or the reverse direction. It does not provide protection against
            an insertion attack or efficient random access.</summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.ContainerType.Digest">
            <summary>A double linked list container. It can be read efficiently in
            the forward or the reverse direction. It does not provide protection against
            an insertion attack or efficient random access. A digest checksum is calculated
            over the frame payload value but this is not linked to any other digest.</summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.ContainerType.Tree">
            <summary>A double linked list container indexed by a binary tree.It can be read efficiently in
            the forward or the reverse direction or as a random access file. It does not provide protection against
            an insertion attack.</summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.ContainerType.Chain">
            <summary>A double linked list container. It can be read efficiently in
            the forward or the reverse direction and incorporates a digest chain to
            provide protection against insertion attacks. It does not supporrt efficient random access.</summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.ContainerType.MerkleTree">
            <summary>A double linked list container indexed by a binary tree.It can be read efficiently in
            the forward or the reverse direction or as a random access file and incorporates a Merkle tree to
            provide protection against insertion attacks.</summary>
        </member>
        <member name="T:Goedel.Cryptography.Container.IndexType">
            <summary>File index modes</summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.IndexType.None">
            <summary>No index</summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.IndexType.Position">
            <summary>Index table of frame positions</summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.IndexType.Partial">
            <summary>There is an index table of positions and an index table for some specified labels.</summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.IndexType.Complete">
            <summary>There is an index table of positions and an index table for all labels specified in the file.</summary>
        </member>
        <member name="T:Goedel.Cryptography.Container.ContainerHeader">
             <summary>
            
             Describes a container header
             </summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.ContainerHeader.Payload">
            <summary>The container payload. Note that this is not a serialized field of the container
            header.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerHeader.Index">
             <summary>
            The record index within the file. This MUST be unique and 
            satisfy any additional requirements determined by the ContainerType.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerHeader.ContainerType">
             <summary>
            Specifies the container type for the following records.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerHeader.IsMeta">
             <summary>
            If true, the current frame is a meta frame and does not contain a payload.
            Note: Meta frames MAY be present in any container. Applications MUST
            accept containers that contain meta frames at any position in the file.
            Applications MUST NOT interpret a meta frame as a data frame with an enpty payload.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerHeader.UniqueID">
             <summary>
            Unique object identifier
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerHeader.ContentMeta">
             <summary>
            Content meta data.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerHeader.TreePosition">
             <summary>
            Position of the frame containing the apex of the preceding sub-tree.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerHeader.IndexPosition">
             <summary>
            Specifies the position in the file at which the last index entry is
            to be found
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerHeader.ExchangePosition">
             <summary>
            Specifies the position in the file at which the key exchange data is
            to be found
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerHeader.ContainerIndex">
             <summary>
            An index of records in the current container up to but not including
            this one.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerHeader.PayloadDigest">
             <summary>
            If present, contains the digest of the Payload.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerHeader.ChainDigest">
             <summary>
            If present, contains the digest of the PayloadDigest values of this
            frame and the frame immediately preceding.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerHeader.TreeDigest">
             <summary>
            If present, contains the Binary Merkle Tree digest value.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerHeader.Event">
             <summary>
            Unique object identifier
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerHeader.Labels">
             <summary>
            List of labels that are applied to the payload of the frame.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerHeader.KeyValues">
             <summary>
            List of key/value pairs describing the payload of the frame.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerHeader.First">
             <summary>
            Frame number of the first object instance value.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerHeader.Previous">
             <summary>
            Frame number of the immediately prior object instance value	
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerHeader.EncryptedKey">
             <summary>
            Session key encrypted under a key exchange specified in the Recipients 
            list of this frame (if present) or the frame at the position specified by
            exchange position (if present) or the first frame.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerHeader.IV">
             <summary>
            Initialization vector for ciphertext.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerHeader.Protected">
             <summary>
            Protected header 
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerHeader.Recipients">
             <summary>
            Per recipient key exchange data.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerHeader.Signatures">
             <summary>
            Per signer signature data
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerHeader._Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerHeader._Factory">
            <summary>
            Factory method
            </summary>
            <returns>Object of this type</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerHeader.Serialize(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            </summary>
            <param name="Writer">Output stream</param>
            <param name="wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerHeader.SerializeX(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            Unlike the Serlialize() method, this method is not inherited from the
            parent class allowing a specific version of the method to be called.
            </summary>
            <param name="_Writer">Output stream</param>
            <param name="_wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="_first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerHeader.FromJSON(Goedel.Protocol.JSONReader,System.Boolean)">
            <summary>
            Deserialize a tagged stream
            </summary>
            <param name="JSONReader">The input stream</param>
            <param name="Tagged">If true, the input is wrapped in a tag specifying the type</param>
            <returns>The created object.</returns>		
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerHeader.DeserializeToken(Goedel.Protocol.JSONReader,System.String)">
            <summary>
            Having read a tag, process the corresponding value data.
            </summary>
            <param name="JSONReader">The input stream</param>
            <param name="Tag">The tag</param>
        </member>
        <member name="T:Goedel.Cryptography.Container.ContainerFrame">
            <summary>
            Class to allow enumeration of container frames
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerFrame.FrameCount">
            <summary>The current write frame index (writes are always
            appended to the end of the file.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerFrame.Position">
            <summary>The byte offset from the start of the file for the 
            first byte of the current frame.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerFrame.FrameData">
            <summary>The current frame data</summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerFrame.FrameHeader">
            <summary>The current frame header as binary data</summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerFrame.ContainerHeader">
            <summary>The current frame header as a parsed object.</summary>
        </member>
        <member name="T:Goedel.Cryptography.Container.IContainer">
            <summary>
            Base class for container file implementations
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.IContainer.FrameCount">
            <summary>The current write frame index (writes are always
            appended to the end of the file.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.IContainer.Position">
            <summary>The byte offset from the start of the file for the 
            first byte of the current frame.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.IContainer.FrameData">
            <summary>The current frame data</summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.IContainer.FrameHeader">
            <summary>The current frame header as binary data</summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.IContainer.ContainerHeader">
            <summary>The current frame header as a parsed object.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.IContainer.EOF">
            <summary>True if the read position is at the end of the file.</summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.IContainer.Append(System.Byte[],Goedel.Cryptography.Container.ContainerHeader)">
            <summary>
            Append a new data frame payload to the end of the file.
            </summary>
            <param name="Data">Data to append.</param>
            <param name="Header">The container header value</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.IContainer.Append(Goedel.Protocol.JSONObject,Goedel.Cryptography.Container.ContainerHeader)">
            <summary>
            Append a new data frame payload to the end of the file.
            </summary>
            <param name="Data">Data to append.</param>
            <param name="Header">The container header value</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.IContainer.Validate(System.Int32)">
            <summary>
            Read the data in the current file 
            </summary>
            <param name="Direction">Direction in which to perform check.
            <list type="bullet"><item>1 = forward</item><item>-1 = forward</item>
            <item>0 = forward then backward.</item></list></param>
            <returns>True if the validation succeded, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.IContainer.Next">
            <summary>
            Read the next frame in the file.
            </summary>
            <returns>True if a next frame exists, otherwise false</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.IContainer.Previous">
            <summary>
            Read the previous frame in the file.
            </summary>
            <returns>True if a previous frame exists, otherwise false</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.IContainer.First">
            <summary>
            Read the first frame in the file.
            </summary>
            <returns>True if a first frame exists, otherwise false</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.IContainer.Last">
            <summary>
            Read the last frame in the file.
            </summary>
            <returns>True if a last frame exists, otherwise false</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.IContainer.Move(System.Int64)">
            <summary>
            Move to the frame with index Position in the file. 
            <para>If the tree positioning mechanism is in use, the
            time complexity for this operation is log2(n) where n is
            the difference between the current position and the new 
            position.</para>
            </summary>
            <param name="FrameIndex">Frame Index to move to</param>
            <returns>True if the move succeeded, otherwise false.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Container.Container">
            <summary>
            Base class for container file implementations
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.Container.JBCDStream">
            <summary>The underlying file stream</summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.Container.StartOfData">
            <summary>The byte offset from the start of the file for Record 1</summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.Container.DataEncoding">
            <summary>The encoding to use for creating the FrameHeader entry</summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.Container.FrameCount">
            <summary>The value of the last frame index</summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.Container.FrameData">
            <summary>The current frame data</summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.Container.EOF">
            <summary>True if the read position is at the end of the file.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.Container.Position">
            <summary>The byte offset from the start of the file for the 
            first byte of the current frame.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.Container.FrameHeader">
            <summary>The current frame header as binary data</summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.Container.FramePayload">
            <summary>The current frame payload as binary data</summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.Container._ContainerHeader">
            <summary>
            The container header structure
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.Container.ContainerHeader">
            <summary>The current frame header as a parsed object.</summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.Container.ContainerHeaderFirst">
            <summary>
            The first container header. This is read only since it is fixed after
            the record is written.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.Container.CheckContainer(System.Collections.Generic.List{Goedel.Cryptography.Container.ContainerHeader})">
            <summary>
            Perform sanity checking on a list of container headers.
            </summary>
            <param name="Headers">List of headers to check</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.Container.Dispose">
            <summary>
            Dispose method, frees all resources.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.Container.Dispose(System.Boolean)">
            <summary>
            Dispose method, frees resources when disposing, 
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Goedel.Cryptography.Container.Container.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.Container.DisposeJBCDStream">
            <summary>
            The underlying stream reader/writer for the container. This will be disposed of when
            the container is released.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.Container.Open(System.String,Goedel.IO.FileStatus,Goedel.Cryptography.Container.ContainerType)">
            <summary>
            Open or create container according to the setting of FileStatus. The underlying 
            filestreams will be disposed of automatically when the container is disposed.
            </summary>
            <param name="Filename">The file name.</param>
            <param name="FileStatus">The file access mode.</param>
            <param name="ContainerType">Specifies the container type if a new container is to
            be created. This setting is ignored if the container already exists.</param>
            <returns>The new container.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.Container.OpenExisting(Goedel.Cryptography.Container.JBCDStream)">
            <summary>
            Open an existing container according to the information contained in the next frame to be read.
            </summary>
            <param name="JBCDStream">The frame reader. Since this is passed to the
            method to create the class it is not disposed with the container using it.</param>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.Container.NewContainer(System.String,Goedel.IO.FileStatus,Goedel.Cryptography.Container.ContainerType,System.Byte[],System.String,Goedel.Protocol.DataEncoding,Goedel.Cryptography.CryptoAlgorithmID,System.Byte[],System.Collections.Generic.List{Goedel.Cryptography.Jose.Signature},System.Collections.Generic.List{Goedel.Cryptography.Jose.Recipient})">
            <summary>
            Create a new container file of the specified type and write the initial
            data record
            </summary>
            <param name="Filename">The file to open</param>
            <param name="FileStatus">The file status.</param>
            <param name="Payload">Optional data payload. </param>
            <param name="ContentType">Content type of the optional data payload</param>
            <param name="ContainerType">The container type.</param>
            <param name="DataEncoding">The data encoding.</param>
            <param name="DigestAlgorithm">The digest algorithm to be used to calculate the PayloadDigest</param>
            <param name="EncryptedKey">Key used to encrypt the payload.</param>
            <param name="Signatures">List of JWS signatures. Since this is the first block, the signature
            is always over the payload data only.</param>
            <param name="Recipients">List of JWE recipient decryption entries.</param>
            <returns>The newly constructed container.</returns>
            <exception cref="T:Goedel.Cryptography.Container.InvalidFileModeException">The file mode specified was not valid.</exception>
        </member>
        <member name="M:Goedel.Cryptography.Container.Container.NewContainer(Goedel.Cryptography.Container.JBCDStream,Goedel.Cryptography.Container.ContainerType,System.Byte[],System.String,Goedel.Protocol.DataEncoding,Goedel.Cryptography.CryptoAlgorithmID,System.Byte[],System.Collections.Generic.List{Goedel.Cryptography.Jose.Signature},System.Collections.Generic.List{Goedel.Cryptography.Jose.Recipient})">
            <summary>
            Create a new container file of the specified type and write the initial
            data record
            </summary>
            <param name="JBCDStream">The underlying file stream. This MUST be opened
            in a read access mode and should have exclusive write access. All existing
            content in the file will be overwritten.</param>
            <param name="Payload">Optional data payload. </param>
            <param name="DataEncoding">The data encoding.</param>
            <param name="ContentType">Content type of the optional data payload</param>
            <param name="ContainerType">The container type. This determines whether
            a tree index is to be created or not and if so, whether </param>
            <param name="DigestAlgorithm">The digest algorithm to be used to calculate the PayloadDigest</param>
            <param name="EncryptedKey">Key used to encrypt the payload.</param>
            <param name="Signatures">List of JWS signatures. Since this is the first block, the signature
            is always over the payload data only.</param>
            <param name="Recipients">List of JWE recipient decryption entries.</param>
            <returns>The newly constructed container.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.Container.FillDictionary(Goedel.Cryptography.Container.ContainerHeader,System.Int64,System.Int64)">
            <summary>
            Initialize the dictionaries used to manage the tree by registering the set
            of values leading up to the apex value.
            </summary>
            <param name="Header">Final frame header</param>
            <param name="FirstPosition">Position of frame 1</param>
            <param name="PositionLast">Position of the last frame</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.Container.MakeNewContainer(Goedel.Cryptography.Container.JBCDStream,Goedel.Cryptography.Container.ContainerType,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Create a new container file of the specified type and write the initial
            data record
            </summary>
            <param name="JBCDStream">The underlying JBCDStream stream. This MUST be opened
            in a read access mode and should have exclusive read access. All existing
            content in the file will be overwritten.</param>
            <param name="ContainerType">The container type. This determines whether
            a tree index is to be created or not and if so, whether </param>
            <param name="DigestAlgorithm">The digest algorithm to be used to calculate the PayloadDigest</param>
            <returns>The newly constructed container.</returns>
        </member>
        <member name="F:Goedel.Cryptography.Container.Container.FrameIndexToPositionDictionary">
            <summary>
            Dictionary of frame index to frame position.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.Container.RegisterFrame(Goedel.Cryptography.Container.ContainerHeader,System.Int64)">
            <summary>
            Register a frame in the container access dictionaries.
            </summary>
            <param name="Header">Frame header</param>
            <param name="Position">Position of the frame</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.Container.GetFramePosition(System.Int64)">
            <summary>
            Get the frame position.
            </summary>
            <param name="Frame">The frame index</param>
            <returns>The frame position.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.Container.FillHeader(Goedel.Cryptography.Container.ContainerHeader)">
            <summary>
            Fill in the remaining header fields for the record.
            </summary>
            <param name="ContainerHeader"></param>
        </member>
        <member name="M:Goedel.Cryptography.Container.Container.Append(System.Byte[],Goedel.Cryptography.Container.ContainerHeader)">
            <summary>
            Append a new data frame payload to the end of the file.
            </summary>
            <param name="Data">Data to append.</param>
            <param name="ContainerHeader">The container header value</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.Container.AppendFrame(System.Byte[],Goedel.Cryptography.Container.ContainerHeader)">
            <summary>
            Append a new data frame payload to the end of the file.
            </summary>
            <param name="Data">Data to append.</param>
            <param name="ContainerHeader">The container header value</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.Container.AppendFrame(System.Byte[],System.Byte[])">
            <summary>
            Append a new data frame payload to the end of the file.
            </summary>
            <param name="Data">Data to append.</param>
            <param name="Header">The container header value</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.Container.Append(Goedel.Protocol.JSONObject,Goedel.Cryptography.Container.ContainerHeader)">
            <summary>
            Append a new data frame payload to the end of the file.
            </summary>
            <param name="Data">Data to append.</param>
            <param name="Header">The container header value</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.Container.Validate(System.Int32)">
            <summary>
            Read the data in the current file 
            </summary>
            <param name="Direction">Direction in which to perform check.
            <list type="bullet"><item>1 = forward</item><item>-1 = forward</item>
            <item>0 = forward then backward.</item></list></param>
            <returns>True if the validation succeded, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.Container.Start">
            <summary>
            Move read pointer to Frame 1.
            </summary>
            <returns>True if a next frame exists, otherwise false</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.Container.Next">
            <summary>
            Read the next frame in the file.
            </summary>
            <returns>True if a next frame exists, otherwise false</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.Container.Previous">
            <summary>
            Read the previous frame in the file.
            </summary>
            <returns>True if a previous frame exists, otherwise false</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.Container.First">
            <summary>
            Read frame 1 in the file.
            </summary>
            <returns>True if a first frame exists, otherwise false</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.Container.Last">
            <summary>
            Read the last frame in the file.
            </summary>
            <returns>True if a last frame exists, otherwise false</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.Container.Move(System.Int64)">
            <summary>
            Move to the frame with index Position in the file. 
            <para>If the tree positioning mechanism is in use, the
            time complexity for this operation is log2(n) where n is
            the difference between the current position and the new 
            position.</para>
            </summary>
            <param name="FrameIndex">Frame index to move to.</param>
            <returns>True if the position exists.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.Container.NewContainer(Goedel.Cryptography.Container.JBCDStream,Goedel.Cryptography.Container.JBCDStream,Goedel.Cryptography.Container.ContainerType,Goedel.Cryptography.Container.IndexType,System.Collections.Generic.List{Goedel.Cryptography.Container.JBCDStream},Goedel.Cryptography.Container.ContainerHeader,Goedel.Cryptography.Container.FrameFilterDelegate)">
            <summary>
            Create a new container file of the specified type and write the initial
            data record
            </summary>
            <param name="NewFileStream">The underlying file stream. This MUST be opened
            in a read access mode and should have exclusive read access. All existing
            content in the file will be overwritten.</param>
            <param name="ContentHeader">Optional content header data. If specified this will completely overwrite
            the content header in the input files.</param>
            <param name="ContainerType">The container type. This determines the authentication mode
            to be employed.</param>
            <param name="IndexType">The index type.</param>
            <param name="FirstInput">If specified, open file stream to a file that will
            be used to pre-populate the file.</param>
            <param name="AdditionalInputs">If specified, a list of open file stream to files that will
            be used to pre-populate the file.</param>
            <param name="Filter">If specified, a delegate that is called exactly once for
            each container header encountered. Frame</param>
            <returns>The created container</returns>
        </member>
        <member name="T:Goedel.Cryptography.Container.FrameFilterDelegate">
            <summary>
            Filter delegate. Returns true iff the container is of the type required.
            </summary>
            <param name="ContainerHeader">The container to be examined.</param>
            <returns>True if the container is required, otherwise false.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Container.ContainerChain">
            <summary>
            Simple container that supports the append and index functions but does not 
            provide for cryptographic integrity.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="F:Goedel.Cryptography.Container.ContainerChain.Label">
            <summary>
            The label for the container type for use in header declarations
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerChain.MakeNewContainer(Goedel.Cryptography.Container.JBCDStream,Goedel.Cryptography.Container.ContainerType,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Create a new container file of the specified type and write the initial
            data record
            </summary>
            <param name="JBCDStream">The underlying JBCDStream stream. This MUST be opened
            in a read access mode and should have exclusive read access. All existing
            content in the file will be overwritten.</param>
            <param name="ContainerType">The container type. This determines whether
            a tree index is to be created or not and if so, whether </param>
            <param name="DigestAlgorithm">The digest algorithm to be used to calculate the PayloadDigest</param>
            <returns>The newly constructed container.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerChain.FillDictionary(Goedel.Cryptography.Container.ContainerHeader,System.Int64,System.Int64)">
            <summary>
            Initialize the dictionaries used to manage the tree by registering the set
            of values leading up to the apex value.
            </summary>
            <param name="Header">Final frame header</param>
            <param name="FirstPosition">Position of frame 1</param>
            <param name="PositionLast">Position of the last frame</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerChain.AppendFrame(System.Byte[],Goedel.Cryptography.Container.ContainerHeader)">
            <summary>
            Append a new data frame payload to the end of the file.
            </summary>
            <param name="Data">Data to append.</param>
            <param name="ContainerHeader">The container header value</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerChain.CheckContainer(System.Collections.Generic.List{Goedel.Cryptography.Container.ContainerHeader})">
            <summary>
            Perform sanity checking on a list of container headers.
            </summary>
            <param name="Headers">List of headers to check</param>
        </member>
        <member name="T:Goedel.Cryptography.Container.ContainerData">
             <summary>
            
             Classes that describe Mail applications.
             </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerData.Tag">
            <summary>
            Schema tag.
            </summary>
            <returns>The tag value</returns>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerData._Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.ContainerData._TagDictionary">
            <summary>
            Dictionary mapping tags to factory methods
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerData.Deserialize(Goedel.Protocol.JSONReader,Goedel.Protocol.JSONObject@)">
            <summary>
            Construct an instance from the specified tagged JSONReader stream.
            </summary>
            <param name="JSONReader">Input stream</param>
            <param name="Out">The created object</param>
        </member>
        <member name="T:Goedel.Cryptography.Container.ContentMeta">
            <summary>
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContentMeta.ContentType">
             <summary>
            Content type parameter
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContentMeta.Paths">
             <summary>
            List of filename paths for the payload of the frame.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContentMeta.UniqueID">
             <summary>
            Unique object identifier
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContentMeta.Created">
             <summary>
            Initial creation date.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContentMeta.Modified">
             <summary>
            Date of last modification.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContentMeta._Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContentMeta._Factory">
            <summary>
            Factory method
            </summary>
            <returns>Object of this type</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContentMeta.Serialize(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            </summary>
            <param name="Writer">Output stream</param>
            <param name="wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContentMeta.SerializeX(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            Unlike the Serlialize() method, this method is not inherited from the
            parent class allowing a specific version of the method to be called.
            </summary>
            <param name="_Writer">Output stream</param>
            <param name="_wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="_first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContentMeta.FromJSON(Goedel.Protocol.JSONReader,System.Boolean)">
            <summary>
            Deserialize a tagged stream
            </summary>
            <param name="JSONReader">The input stream</param>
            <param name="Tagged">If true, the input is wrapped in a tag specifying the type</param>
            <returns>The created object.</returns>		
        </member>
        <member name="M:Goedel.Cryptography.Container.ContentMeta.DeserializeToken(Goedel.Protocol.JSONReader,System.String)">
            <summary>
            Having read a tag, process the corresponding value data.
            </summary>
            <param name="JSONReader">The input stream</param>
            <param name="Tag">The tag</param>
        </member>
        <member name="T:Goedel.Cryptography.Container.ContainerIndex">
             <summary>
            
             A container index
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerIndex.Full">
             <summary>
            If true, the index is complete and contains position entries for all the 
            frames in the file. If absent or false, the index is incremental and only
            contains position entries for records added since the last 
            frame containing a ContainerIndex.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerIndex.Positions">
             <summary>
            List of container position entries
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerIndex.Metas">
             <summary>
            List of container position entries
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerIndex._Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerIndex._Factory">
            <summary>
            Factory method
            </summary>
            <returns>Object of this type</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerIndex.Serialize(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            </summary>
            <param name="Writer">Output stream</param>
            <param name="wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerIndex.SerializeX(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            Unlike the Serlialize() method, this method is not inherited from the
            parent class allowing a specific version of the method to be called.
            </summary>
            <param name="_Writer">Output stream</param>
            <param name="_wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="_first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerIndex.FromJSON(Goedel.Protocol.JSONReader,System.Boolean)">
            <summary>
            Deserialize a tagged stream
            </summary>
            <param name="JSONReader">The input stream</param>
            <param name="Tagged">If true, the input is wrapped in a tag specifying the type</param>
            <returns>The created object.</returns>		
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerIndex.DeserializeToken(Goedel.Protocol.JSONReader,System.String)">
            <summary>
            Having read a tag, process the corresponding value data.
            </summary>
            <param name="JSONReader">The input stream</param>
            <param name="Tag">The tag</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerIndex.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Container.IndexPosition">
             <summary>
            
             Specifies the position in a file at which a specified record index is found
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.IndexPosition.Index">
             <summary>
            The record index within the file.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.IndexPosition.Position">
             <summary>
            The record position within the file relative to the index base.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.IndexPosition._Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.IndexPosition._Factory">
            <summary>
            Factory method
            </summary>
            <returns>Object of this type</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.IndexPosition.Serialize(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            </summary>
            <param name="Writer">Output stream</param>
            <param name="wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.IndexPosition.SerializeX(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            Unlike the Serlialize() method, this method is not inherited from the
            parent class allowing a specific version of the method to be called.
            </summary>
            <param name="_Writer">Output stream</param>
            <param name="_wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="_first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.IndexPosition.FromJSON(Goedel.Protocol.JSONReader,System.Boolean)">
            <summary>
            Deserialize a tagged stream
            </summary>
            <param name="JSONReader">The input stream</param>
            <param name="Tagged">If true, the input is wrapped in a tag specifying the type</param>
            <returns>The created object.</returns>		
        </member>
        <member name="M:Goedel.Cryptography.Container.IndexPosition.DeserializeToken(Goedel.Protocol.JSONReader,System.String)">
            <summary>
            Having read a tag, process the corresponding value data.
            </summary>
            <param name="JSONReader">The input stream</param>
            <param name="Tag">The tag</param>
        </member>
        <member name="T:Goedel.Cryptography.Container.KeyValue">
             <summary>
            
             Specifies a key/value entry
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.KeyValue.Key">
             <summary>
            The key
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.KeyValue.Value">
             <summary>
            The value corresponding to the key
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.KeyValue._Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.KeyValue._Factory">
            <summary>
            Factory method
            </summary>
            <returns>Object of this type</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.KeyValue.Serialize(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            </summary>
            <param name="Writer">Output stream</param>
            <param name="wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.KeyValue.SerializeX(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            Unlike the Serlialize() method, this method is not inherited from the
            parent class allowing a specific version of the method to be called.
            </summary>
            <param name="_Writer">Output stream</param>
            <param name="_wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="_first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.KeyValue.FromJSON(Goedel.Protocol.JSONReader,System.Boolean)">
            <summary>
            Deserialize a tagged stream
            </summary>
            <param name="JSONReader">The input stream</param>
            <param name="Tagged">If true, the input is wrapped in a tag specifying the type</param>
            <returns>The created object.</returns>		
        </member>
        <member name="M:Goedel.Cryptography.Container.KeyValue.DeserializeToken(Goedel.Protocol.JSONReader,System.String)">
            <summary>
            Having read a tag, process the corresponding value data.
            </summary>
            <param name="JSONReader">The input stream</param>
            <param name="Tag">The tag</param>
        </member>
        <member name="T:Goedel.Cryptography.Container.IndexMeta">
             <summary>
            
             Specifies the list of index entries at which a record with the specified metadata occurrs.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.IndexMeta.Index">
             <summary>
            List of record indicies within the file where frames matching the specified 
            criteria are found.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.IndexMeta.ContentType">
             <summary>
            Content type parameter
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.IndexMeta.Paths">
             <summary>
            List of filename paths for the current frame.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.IndexMeta.Labels">
             <summary>
            List of labels that are applied to the current frame.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.IndexMeta._Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.IndexMeta._Factory">
            <summary>
            Factory method
            </summary>
            <returns>Object of this type</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.IndexMeta.Serialize(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            </summary>
            <param name="Writer">Output stream</param>
            <param name="wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.IndexMeta.SerializeX(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            Unlike the Serlialize() method, this method is not inherited from the
            parent class allowing a specific version of the method to be called.
            </summary>
            <param name="_Writer">Output stream</param>
            <param name="_wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="_first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.IndexMeta.FromJSON(Goedel.Protocol.JSONReader,System.Boolean)">
            <summary>
            Deserialize a tagged stream
            </summary>
            <param name="JSONReader">The input stream</param>
            <param name="Tagged">If true, the input is wrapped in a tag specifying the type</param>
            <returns>The created object.</returns>		
        </member>
        <member name="M:Goedel.Cryptography.Container.IndexMeta.DeserializeToken(Goedel.Protocol.JSONReader,System.String)">
            <summary>
            Having read a tag, process the corresponding value data.
            </summary>
            <param name="JSONReader">The input stream</param>
            <param name="Tag">The tag</param>
        </member>
        <member name="T:Goedel.Cryptography.Container.ContainerHeaderFirst">
            <summary>
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerHeaderFirst.DataEncoding">
             <summary>
            Specifies the data encoding for the header section of for the following frames.
            This value is ONLY valid in Frame 0 which MUST have a header encoded in JSON.
             </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerHeaderFirst._Tag">
            <summary>
            Tag identifying this class
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerHeaderFirst._Factory">
            <summary>
            Factory method
            </summary>
            <returns>Object of this type</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerHeaderFirst.Serialize(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            </summary>
            <param name="Writer">Output stream</param>
            <param name="wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerHeaderFirst.SerializeX(Goedel.Protocol.Writer,System.Boolean,System.Boolean@)">
            <summary>
            Serialize this object to the specified output stream.
            Unlike the Serlialize() method, this method is not inherited from the
            parent class allowing a specific version of the method to be called.
            </summary>
            <param name="_Writer">Output stream</param>
            <param name="_wrap">If true, output is wrapped with object
            start and end sequences '{ ... }'.</param>
            <param name="_first">If true, item is the first entry in a list.</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerHeaderFirst.FromJSON(Goedel.Protocol.JSONReader,System.Boolean)">
            <summary>
            Deserialize a tagged stream
            </summary>
            <param name="JSONReader">The input stream</param>
            <param name="Tagged">If true, the input is wrapped in a tag specifying the type</param>
            <returns>The created object.</returns>		
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerHeaderFirst.DeserializeToken(Goedel.Protocol.JSONReader,System.String)">
            <summary>
            Having read a tag, process the corresponding value data.
            </summary>
            <param name="JSONReader">The input stream</param>
            <param name="Tag">The tag</param>
        </member>
        <member name="T:Goedel.Cryptography.Container.ContainerMasterStore">
            <summary>
            
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerMasterStore.GetReadHandle(System.String,System.Boolean)">
            <summary>
            Return a read-only handle for the specified persistence store.
            </summary>
            <param name="ID">The store to obtain the handle for.</param>
            <param name="ReadOnly">If true, the store is opened in read-only mode. 
            This is a global lock and prevents any other thread opening the same store in write mode</param>
            <returns>A read handle for the specified persistence store.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerMasterStore.GetWriteHandle(System.String)">
            <summary>
            Return a read-write handle for the specified persistence store. For maximum performance, 
            an upgradeable lock is acquired initially and then updated to a write lock if a write
            operation is attempted.
            </summary>
            <param name="ID">The store to obtain the handle for.</param>
            <returns>A read/write handle for the specified persistence store.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerMasterStore.FreedHandle(Goedel.Cryptography.Container.ContainerPersistenceStoreThreadSafe)">
            <summary>
            Notifies the master store that a handle has been relinquished on a persistence store.
            This allows the master to see if the persistence store should be kept in memory or disposed.
            It might well make sense to allow stores to persist some length of time until
            there is a need to free up memory.
            </summary>
            <param name="PersistenceStore"></param>
        </member>
        <member name="T:Goedel.Cryptography.Container.ContainerPersistenceStoreHandleRead">
            <summary>
            A thread safe persistence store read handle.
            
            The thread waits to acquire a read lock on the persistence store before proceeding.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerPersistenceStoreHandleRead.Timeout">
            <summary>
            Timeout for lock acquisition in milliseconds. A time span of -1 represents 
            a wait forever.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.ContainerPersistenceStoreHandleRead.Pinned">
            <summary>
            If true, the persistence store is pinned and the in-memory structures for 
            accessing the store will be maintained even there are no outstanding read or
            write handles.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.ContainerPersistenceStoreHandleRead.PersistenceStore">
            <summary>
            The persistence store.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStoreHandleRead.#ctor(System.Boolean)">
            <summary>
            Protected constructor sets the value of Pinned.
            </summary>
            <param name="Pinned">If true, maintain the persistence store in memory
            even when there are no outstanding access handles.</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStoreHandleRead.#ctor(Goedel.Cryptography.Container.ContainerPersistenceStoreThreadSafe,System.Boolean)">
            <summary>
            Construct a read handle for the specified persistence store.
            </summary>
            <param name="PersistenceStore">The persistence store to create a handle for.</param>
            <param name="Pinned">If true, maintain the persistence store in memory
            even when there are no outstanding access handles.</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStoreHandleRead.Disposing">
            <summary>
            The class specific disposal routine. This frees the read lock on the resource
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStoreHandleRead.Contains(System.String)">
            <summary>
            Determines if a object instance with the specified unique identifier is registered.
            </summary>
            <param name="UniqueID">The unique identifier of the object instance to locate.</param>
            <returns>True if found, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStoreHandleRead.Get(System.String)">
            <summary>
            Get object instance by unique identifier
            </summary>
            <param name="UniqueID">The unique identifier of the object instance to locate.</param>
            <returns>True if found, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStoreHandleRead.GetIndex(System.String,System.Boolean)">
            <summary>
            Return an index for the specified key, creating it if necessary.
            </summary>
            <param name="Key">The key for which the index is requested.</param>
            <param name="Create">If true, will create an index if none is found.</param>
            <returns>The index.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStoreHandleRead.Last(System.String,System.String)">
            <summary>
            The last object instance that matches the specified key/value condition.
            </summary>
            <param name="Key">The key</param>
            <param name="Value">The value to match</param>
            <returns>The object instance if found, otherwise false.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Container.ContainerPersistenceStoreHandleWrite">
            <summary>
            A thread safe persistence store read/write handle. 
            
            The thread waits to acquire an upgradeable lock on the persistence store before proceeding.
            This requires that no other thread be in upgradeable or write mode but allows other threads
            to have an outstanding read handle. 
            
            While in upgradeable mode, the handle supports the same methods as a read handle but will
            wait to acquire a write lock on the store before executing any of the write methods.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStoreHandleWrite.#ctor(Goedel.Cryptography.Container.ContainerPersistenceStoreThreadSafe,System.Boolean)">
            <summary>
            Construct a write handle for the specified persistence store.
            </summary>
            <param name="PersistenceStore">The persistence store to create a handle for.</param>
            <param name="Pinned">If true, maintain the persistence store in memory
            even when there are no outstanding access handles.</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStoreHandleWrite.Disposing">
            <summary>
            The class specific disposal routine. This frees the read lock on the resource
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStoreHandleWrite.Delete(System.String)">
            <summary>
            Delete a persistence entry
            </summary>
            <threadsafety static="true" instance="true"/>
            <param name="UniqueID">The UniqueID of the object to delete</param>
            <returns>True if the object was updated, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStoreHandleWrite.New(Goedel.Protocol.JSONObject)">
            <summary>
            Create a new persistence entry.
            </summary>
            <threadsafety static="true" instance="true"/>
            <param name="Object">Object to create</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStoreHandleWrite.Update(Goedel.Protocol.JSONObject,System.Boolean)">
            <summary>
            Update an existing persistence entry
            </summary>
            <threadsafety static="true" instance="true"/>
            <param name="Object">The new object value</param>
            <param name="Create">If true, create a new value if one does not already exist</param>
        </member>
        <member name="T:Goedel.Cryptography.Container.ContainerPersistenceStoreThreadSafe">
            <summary>
            A persistence store with support for thread safe locking.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.ContainerPersistenceStoreThreadSafe.ReaderWriterLock">
            <summary>
            The reader/writer lock
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerPersistenceStoreThreadSafe.ID">
            <summary>
            The identifier assigned by the persistence store directory.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStoreThreadSafe.#ctor(System.String,System.String,System.String,System.Boolean,Goedel.IO.FileStatus,Goedel.Cryptography.Container.ContainerType,Goedel.Protocol.DataEncoding)">
            <summary>
            Open or create a persistence store in specified mode with 
            the specified file name, content type and optional comment.
            </summary>
            <param name="FileName">Log file.</param>
            <param name="ReadOnly">If true, persistence store must exist
            and will be opened in read-only mode. If false, persistence store
            is opened in read/write mode and a new store will be created
            if none exists.</param>
            <param name="Type">Type of data to store (the schema name).</param>
            <param name="Comment">Comment to be written to the log.</param>
            <param name="ContainerType">The Container type.</param>
            <param name="DataEncoding">The data encoding.</param>
            <param name="FileStatus">The file status in which to open the container.</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStoreThreadSafe.GetHandleRead(System.Boolean)">
            <summary>
            Return a read handle for the persistence store
            </summary>
            <param name="Pinned">If true, maintain the persistence store in memory
            even when there are no outstanding access handles.</param>
            <returns>The read handle</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStoreThreadSafe.GetHandleWrite(System.Boolean)">
            <summary>
            Return a write handle for the persistence store
            </summary>
            <param name="Pinned">If true, maintain the persistence store in memory
            even when there are no outstanding access handles.</param>
            <returns>The read handle</returns>
        </member>
        <member name="T:Goedel.Cryptography.Container.ContainerMerkleTree">
            <summary>
            Simple container that supports the append and index functions but does not 
            provide for cryptographic integrity.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="F:Goedel.Cryptography.Container.ContainerMerkleTree.Label">
            <summary>
            The label for the container type for use in header declarations
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerMerkleTree.MakeNewContainer(Goedel.Cryptography.Container.JBCDStream,Goedel.Cryptography.Container.ContainerType,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Create a new container file of the specified type and write the initial
            data record
            </summary>
            <param name="JBCDStream">The underlying JBCDStream stream. This MUST be opened
            in a read access mode and should have exclusive read access. All existing
            content in the file will be overwritten.</param>
            <param name="ContainerType">The container type. This determines whether
            a tree index is to be created or not and if so, whether </param>
            <param name="DigestAlgorithm">The digest algorithm to be used to calculate the PayloadDigest</param>
            <returns>The newly constructed container.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerMerkleTree.RegisterFrame(Goedel.Cryptography.Container.ContainerHeader,System.Int64)">
            <summary>
            Register a frame in the container access dictionaries.
            </summary>
            <param name="Header">Frame header</param>
            <param name="Position">Position of the frame</param>
        </member>
        <member name="F:Goedel.Cryptography.Container.ContainerMerkleTree.FrameDigestDictionary">
            <summary>
            Dictionary mapping the frame index to the corresponding digest value.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerMerkleTree.AppendFrame(System.Byte[],Goedel.Cryptography.Container.ContainerHeader)">
            <summary>
            Append a new data frame payload to the end of the file.
            </summary>
            <param name="Data">Data to append.</param>
            <param name="ContainerHeader">The container header value</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerMerkleTree.GetTreeDigest(System.Int64,System.Byte[])">
            <summary>
            Calculate the digest of the specified tree node
            </summary>
            <param name="Frame">The frame number</param>
            <param name="ContentDigest">The content digest</param>
            <returns>The calculated digest</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerMerkleTree.DigestFrame(System.Int64,System.Byte[])">
            <summary>
            Obtain the digest value for a frame.
            </summary>
            <param name="Frame">The frame index.</param>
            <param name="Right">The digest of the rightmost component.</param>
            <returns>The calculated digest.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerMerkleTree.GetFrameDigest(System.Int64)">
            <summary>
            Get the digest value of the specified frame.
            </summary>
            <param name="Frame">The frame index.</param>
            <returns>The digest value.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerMerkleTree.CheckContainer(System.Collections.Generic.List{Goedel.Cryptography.Container.ContainerHeader})">
            <summary>
            Perform sanity checking on a list of container headers.
            </summary>
            <param name="Headers">List of headers to check</param>
        </member>
        <member name="T:Goedel.Cryptography.Container.ContainerPersistenceStore">
            <summary>
            Persistence store based on a container interface.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStore.Disposing">
            <summary>
            The disposal routine. This is wrapped to provide the IDisposable interface. 
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.ContainerPersistenceStore.EventNew">
            <summary>Tag for new event</summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.ContainerPersistenceStore.EventUpdate">
            <summary>Tag for Update event</summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.ContainerPersistenceStore.EventDelete">
            <summary>Tag for Delete event</summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.ContainerPersistenceStore.Encoding">
            <summary>
            The default data encoding of payload items.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.ContainerPersistenceStore.ObjectIndex">
            <summary>
            Index of items by _PrimaryKey
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.ContainerPersistenceStore.DeletedObjects">
            <summary>
            Index of items by _PrimaryKey
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.ContainerPersistenceStore.IndexDictionary">
            <summary>
            Dictionary mapping keywords to index for that keyword.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStore.Dispose">
            <summary>
            Dispose method, frees all resources.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStore.Dispose(System.Boolean)">
            <summary>
            Dispose method, frees resources when disposing, 
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStore.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStore.#ctor(System.String,System.String,System.String,System.Boolean,Goedel.IO.FileStatus,Goedel.Cryptography.Container.ContainerType,Goedel.Protocol.DataEncoding)">
            <summary>
            Open or create a persistence store in specified mode with 
            the specified file name, content type and optional comment.
            </summary>
            <param name="FileName">Log file.</param>
            <param name="ReadOnly">If true, persistence store must exist
            and will be opened in read-only mode. If false, persistence store
            is opened in read/write mode and a new store will be created
            if none exists.</param>
            <param name="Type">Type of data to store (the schema name).</param>
            <param name="Comment">Comment to be written to the log.</param>
            <param name="ContainerType">The Container type.</param>
            <param name="DataEncoding">The data encoding.</param>
            <param name="FileStatus">The file status in which to open the container.</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStore.ReadContainer(Goedel.Cryptography.Container.JBCDStream)">
            <summary>
            Read a container from the first frame to the last.
            </summary>
            <param name="Stream">The stream to read</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStore.MemoryCommitNew(Goedel.Cryptography.Container.ContainerStoreEntry)">
            <summary>
            Commit a New transaction to memory
            </summary>
            <param name="ContainerStoreEntry">The container store entry representing the transaction</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStore.MemoryCommitUpdate(Goedel.Cryptography.Container.ContainerStoreEntry)">
            <summary>
            Commit an Update transaction to memory
            </summary>
            <param name="ContainerStoreEntry">The container store entry representing the transaction</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStore.MemoryCommitDelete(Goedel.Cryptography.Container.ContainerStoreEntry)">
            <summary>
            Commit a Delete transaction to memory
            </summary>
            <param name="ContainerStoreEntry">The container store entry representing the transaction</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStore.WriteFrame(Goedel.Cryptography.Container.ContainerHeader,Goedel.Protocol.JSONObject,Goedel.Cryptography.Container.ContainerStoreEntry)">
            <summary>
            Write a persistence entry
            </summary>
            <param name="ContainerHeader">The container header to write</param>
            <param name="Object">The object to write.</param>
            <param name="Previous">The previous entry.</param>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStore.New(Goedel.Cryptography.Container.ContainerHeader@,Goedel.Protocol.JSONObject)">
            <summary>
            Create a new persistence entry.
            </summary>
            <param name="ContainerHeader">The constructed container header.</param>
            <param name="Object">Object to create</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStore.New(Goedel.Protocol.JSONObject)">
            <summary>
            Create a new persistence entry.
            </summary>
            <param name="Object">Object to create</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStore.Update(Goedel.Cryptography.Container.ContainerHeader@,Goedel.Cryptography.Container.ContainerStoreEntry@,Goedel.Protocol.JSONObject,System.Boolean)">
            <summary>
            Create a container header to update an existing persistence entry
            </summary>
            <param name="ContainerHeader">The constructed container header.</param>
            <param name="Previous">The previous container store entry for this object</param>
            <param name="Object">The new object value</param>
            <param name="Create">If true, create a new value if one does not already exist</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStore.Update(Goedel.Protocol.JSONObject,System.Boolean)">
            <summary>
            Update an existing persistence entry
            </summary>
            <param name="Object">The new object value</param>
            <param name="Create">If true, create a new value if one does not already exist</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStore.Delete(Goedel.Cryptography.Container.ContainerHeader@,Goedel.Cryptography.Container.ContainerStoreEntry@,System.String)">
            <summary>
            Delete a persistence entry
            </summary>
            <param name="ContainerHeader">The constructed container header.</param>
            <param name="Previous">The previous container store entry for this object</param>
            <param name="UniqueID">The UniqueID of the object to delete</param>
            <returns>True if the object was updated, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStore.Delete(System.String)">
            <summary>
            Delete a persistence entry
            </summary>
            <threadsafety static="true" instance="true"/>
            <param name="UniqueID">The UniqueID of the object to delete</param>
            <returns>True if the object was updated, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStore.GetContainerStoreIndex(System.String,System.Boolean)">
            <summary>
            Return an index for the specified key, creating it if necessary.
            </summary>
            <param name="Key">The key for which the index is requested.</param>
            <param name="Create">If true, will create an index if none is found.</param>
            <returns>The index.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStore.GetIndex(System.String,System.Boolean)">
            <summary>
            Return an index for the specified key, creating it if necessary.
            </summary>
            <param name="Key">The key for which the index is requested.</param>
            <param name="Create">If true, will create an index if none is found.</param>
            <returns>The index.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStore.Get(System.String)">
            <summary>
            Get object instance by unique identifier
            </summary>
            <param name="UniqueID">The unique identifier of the object instance to locate.</param>
            <returns>True if found, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStore.Contains(System.String)">
            <summary>
            Determines if a object instance with the specified unique identifier is registered.
            </summary>
            <param name="UniqueID">The unique identifier of the object instance to locate.</param>
            <returns>True if found, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerPersistenceStore.Last(System.String,System.String)">
            <summary>
            The last object instance that matches the specified key/value condition.
            </summary>
            <param name="Key">The key</param>
            <param name="Value">The value to match</param>
            <returns>The object instance if found, otherwise false.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Container.ContainerSimple">
            <summary>
            Simple container that supports the append and index functions but does not 
            provide for linked cryptographic integrity.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="F:Goedel.Cryptography.Container.ContainerSimple.Label">
            <summary>
            The label for the container type for use in header declarations
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.ContainerSimple.LabelDigest">
            <summary>
            The label for the container type for use in header declarations
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerSimple.DigestProvider">
            <summary>
            The digest provider used to calculate the tree value.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerSimple.MakeNewContainer(Goedel.Cryptography.Container.JBCDStream,Goedel.Cryptography.Container.ContainerType,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Create a new container file of the specified type and write the initial
            data record
            </summary>
            <param name="JBCDStream">The underlying JBCDStream stream. This MUST be opened
            in a read access mode and should have exclusive read access. All existing
            content in the file will be overwritten.</param>
            <param name="ContainerType">The container type. This determines whether
            a tree index is to be created or not and if so, whether </param>
            <param name="DigestAlgorithm">The digest algorithm to be used to calculate the PayloadDigest</param>
            <returns>The newly constructed container.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerSimple.FillDictionary(Goedel.Cryptography.Container.ContainerHeader,System.Int64,System.Int64)">
            <summary>
            Initialize the dictionaries used to manage the tree by registering the set
            of values leading up to the apex value.
            </summary>
            <param name="Header">Final frame header</param>
            <param name="FirstPosition">Position of frame 1</param>
            <param name="PositionLast">Position of the last frame</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerSimple.AppendFrame(System.Byte[],Goedel.Cryptography.Container.ContainerHeader)">
            <summary>
            Append a new data frame payload to the end of the file.
            </summary>
            <param name="Data">Data to append.</param>
            <param name="ContainerHeader">The container header value</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerSimple.Next">
            <summary>
            Read the next frame in the file.
            </summary>
            <returns>True if a next frame exists, otherwise false</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerSimple.Previous">
            <summary>
            Read the previous frame in the file.
            </summary>
            <returns>True if a previous frame exists, otherwise false</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerSimple.Move(System.Int64)">
            <summary>
            Move to the frame with index Position in the file. 
            <para>Since the file format only supports sequential access, this is slow.</para>
            </summary>
            <param name="Index">The frame index to move to</param>
            <returns>If success, the frame index.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerSimple.CombineDigest(System.Byte[],System.Byte[])">
            <summary>
            Combine digests to produce the digest for a node.
            </summary>
            <param name="First">The left hand digest.</param>
            <param name="Second">The right hand digest.</param>
            <returns>The digest value.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerSimple.CheckContainer(System.Collections.Generic.List{Goedel.Cryptography.Container.ContainerHeader})">
            <summary>
            Perform sanity checking on a list of container headers.
            </summary>
            <param name="Headers">List of headers to check</param>
        </member>
        <member name="T:Goedel.Cryptography.Container.ContainerStoreEntry">
            <summary>
            Index handle for data stored in a ContainerStoreIndex in-memory index.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerStoreEntry.ContainerHeader">
            <summary>
            The container header structure
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerStoreEntry.FrameCount">
            <summary>
            The container frame
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerStoreEntry.Position">
            <summary>
            The container position
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerStoreEntry.UniqueID">
            <summary>
            Unique identifier of entry;
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerStoreEntry.Deleted">
            <summary>
            If true the object haws been deleted and cannot be further modified.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerStoreEntry.Created">
            <summary>
            The time at which the object instance was created.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerStoreEntry.Modified">
            <summary>
            The time at which the object instance value was created. 
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerStoreEntry.Data">
            <summary>
            The binary data
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerStoreEntry.JSONReader">
            <summary>
            A deserialization reader for the data according to the encoding specified by 
            the container header.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerStoreEntry.Previous">
            <summary>
            The previous object instance value for this object instance.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerStoreEntry.First">
            <summary>
            The first object instance value for this object instance.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerStoreEntry.#ctor(Goedel.Cryptography.Container.ContainerHeader,System.Byte[],Goedel.Cryptography.Container.ContainerStoreEntry)">
            <summary>
            Constructor, creates an entry for the specified container header, data and previous relationship.
            </summary>
            <param name="ContainerHeader">Parsed container header from frame</param>
            <param name="Data">The binary data</param>
            <param name="Previous">Link to previous value of this object</param>
        </member>
        <member name="T:Goedel.Cryptography.Container.ContainerStoreIndexEntry">
            <summary>
            Index entry for Item.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerStoreIndexEntry.Data">
            <summary>
            The associated persistence data.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.ContainerStoreIndexEntry.Singleton">
            <summary>
            If true, this is the only entry in the list.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerStoreIndexEntry.GetEnumerator">
            <summary>
            Implement the enumeration interface
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="T:Goedel.Cryptography.Container.ContainerStoreIndexEntry.Enumerator">
            <summary>
            Enumerator class. 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerStoreIndexEntry.#ctor(Goedel.Cryptography.Container.ContainerStoreIndexEntry,Goedel.Persistence.IPersistenceEntry)">
            <summary>
            Insert a new Index entry to a list of index entries
            </summary>
            <param name="Existing">The entry that will becomd the Previous entry,
            if null, starts a new list.</param>
            <param name="EntryData">The entry data for the new index value.</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerStoreIndexEntry.Insert(Goedel.Persistence.IPersistenceIndexEntry,Goedel.Persistence.IPersistenceEntry)">
            <summary>
            Insert a new Index entry to a list of index entries.
            </summary>
            <param name="Existing">The entry that will becomd the Previous entry,
            if null, starts a new list.</param>
            <param name="EntryData">The entry data for the new index value.</param>
            <returns>The new entry.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerStoreIndexEntry.Remove(Goedel.Persistence.IPersistenceIndexEntry)">
            <summary>
            Remove an entry from a list of index entries.
            </summary>
            <param name="Entry"></param>
        </member>
        <member name="T:Goedel.Cryptography.Container.ContainerStoreIndex">
            <summary>
            In-memory index structure for container data store. This offers the best performance
            but at a significantly higher memory overhead than an index-on disk approach.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerStoreIndex.Last(System.String)">
            <summary>
            The set of object instances that match the specified value.
            </summary>
            <param name="Value">The value to match</param>
            <returns>The object instance if found, otherwise false.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerStoreIndex.Add(Goedel.Cryptography.Container.ContainerStoreEntry,System.String)">
            <summary>
            Add an entry to the index.
            </summary>
            <param name="ContainerStoreEntry">The entry to add.</param>
            <param name="Value">The value to add it to</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerStoreIndex.Delete(Goedel.Cryptography.Container.ContainerStoreEntry,System.String)">
            <summary>
            Remove an entry from the index.
            </summary>
            <param name="ContainerStoreEntry">The entry to remove.</param>
            <param name="Value">The value to remove it from</param>
        </member>
        <member name="T:Goedel.Cryptography.Container.ContainerTree">
            <summary>
            Simple container that supports the append and index functions but does not 
            provide for cryptographic integrity.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="F:Goedel.Cryptography.Container.ContainerTree.Label">
            <summary>
            The label for the container type for use in header declarations
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerTree.MakeNewContainer(Goedel.Cryptography.Container.JBCDStream,Goedel.Cryptography.Container.ContainerType,Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Create a new container file of the specified type and write the initial
            data record
            </summary>
            <param name="JBCDStream">The underlying JBCDStream stream. This MUST be opened
            in a read access mode and should have exclusive read access. All existing
            content in the file will be overwritten.</param>
            <param name="ContainerType">The container type. This determines whether
            a tree index is to be created or not and if so, whether </param>
            <param name="DigestAlgorithm">The digest algorithm to be used to calculate the PayloadDigest</param>
            <returns>The newly constructed container.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerTree.FillDictionary(Goedel.Cryptography.Container.ContainerHeader,System.Int64,System.Int64)">
            <summary>
            Initialize the dictionaries used to manage the tree by registering the set
            of values leading up to the apex value.
            </summary>
            <param name="Header">Final frame header</param>
            <param name="FirstPosition">Position of frame 1</param>
            <param name="PositionLast">Position of the last frame</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerTree.Move(System.Int64)">
            <summary>
            Move to the frame with index Position in the file. 
            <para>Since the file format only supports sequential access, this is slow.</para>
            </summary>
            <param name="Index">The frame index to move to</param>
            <returns>If success, the frame index.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerTree.AppendFrame(System.Byte[],Goedel.Cryptography.Container.ContainerHeader)">
            <summary>
            Append a new data frame payload to the end of the file.
            </summary>
            <param name="Data">Data to append.</param>
            <param name="ContainerHeader">The container header value</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerTree.GetFramePosition(System.Int64)">
            <summary>
            Get the frame position.
            </summary>
            <param name="Frame">The frame index</param>
            <returns>The frame position.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerTree.PreviousFramePosition(System.Int64)">
            <summary>
            Returns the start position of the prior frame in the tree.
            </summary>
            <param name="FrameIndex">The Frame Index</param>
            <returns>The position of the frame.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerTree.PreviousFrame(System.Int64)">
            <summary>
            Returns the index of the prior frame in the tree.
            </summary>
            <param name="Frame">The frame index</param>
            <returns>The preceding frame index.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.ContainerTree.CheckContainer(System.Collections.Generic.List{Goedel.Cryptography.Container.ContainerHeader})">
            <summary>
            Perform sanity checking on a list of container headers.
            </summary>
            <param name="Headers">List of headers to check</param>
        </member>
        <member name="T:Goedel.Cryptography.Container.InvalidContainerTypeException">
            <summary>
            An attempt was made to access a container type that is not supported by the
            class.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.InvalidContainerTypeException.#ctor">
            <summary>
            Construct instance for exception "This class does not support the specified container type."
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.Container.InvalidContainerTypeException.#ctor(System.String)">
            <summary>
            Construct instance for exception "This class does not support the specified container type."
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.Container.InvalidContainerTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.Container.InvalidContainerTypeException.UserData">
            <summary>
            User data associated with the exception.
            </summary>	
        </member>
        <member name="F:Goedel.Cryptography.Container.InvalidContainerTypeException.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Container.FrameTooLargeException">
            <summary>
            An attempt was made to create a frame that is larger than the maximum frame size allowed by
            the application
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.FrameTooLargeException.#ctor">
            <summary>
            Construct instance for exception "The frame was too large for this implementation to handle"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.Container.FrameTooLargeException.#ctor(System.String)">
            <summary>
            Construct instance for exception "The frame was too large for this implementation to handle"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.Container.FrameTooLargeException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.Container.FrameTooLargeException.UserData">
            <summary>
            User data associated with the exception.
            </summary>	
        </member>
        <member name="F:Goedel.Cryptography.Container.FrameTooLargeException.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Container.InvalidFileModeException">
            <summary>
            An attempt was made to create a new container file in a mode that did not
            allow creation of a new file.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.InvalidFileModeException.#ctor">
            <summary>
            Construct instance for exception "The file mode is invalid for creating a new file"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.Container.InvalidFileModeException.#ctor(System.String)">
            <summary>
            Construct instance for exception "The file mode is invalid for creating a new file"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.Container.InvalidFileModeException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.Container.InvalidFileModeException.UserData">
            <summary>
            User data associated with the exception.
            </summary>	
        </member>
        <member name="F:Goedel.Cryptography.Container.InvalidFileModeException.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Container.InvalidFileFormatException">
            <summary>
            The file format was found to be invalid or otherwise corrupt.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.InvalidFileFormatException.#ctor">
            <summary>
            Construct instance for exception "An error was encountered in reading the container file"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.Container.InvalidFileFormatException.#ctor(System.String)">
            <summary>
            Construct instance for exception "An error was encountered in reading the container file"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.Container.InvalidFileFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.Container.InvalidFileFormatException.UserData">
            <summary>
            User data associated with the exception.
            </summary>	
        </member>
        <member name="F:Goedel.Cryptography.Container.InvalidFileFormatException.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Container.ObjectIdentifierNotUnique">
            <summary>
            An attempt was made to create an object with an existing object identifier
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.ObjectIdentifierNotUnique.#ctor">
            <summary>
            Construct instance for exception "An attempt was made to create an object with an existing object identifier"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.Container.ObjectIdentifierNotUnique.#ctor(System.String)">
            <summary>
            Construct instance for exception "An attempt was made to create an object with an existing object identifier"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.Container.ObjectIdentifierNotUnique.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.Container.ObjectIdentifierNotUnique.UserData">
            <summary>
            User data associated with the exception.
            </summary>	
        </member>
        <member name="F:Goedel.Cryptography.Container.ObjectIdentifierNotUnique.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Container.NoAvailableDecryptionKey">
            <summary>
            No decryption key is available
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.NoAvailableDecryptionKey.#ctor">
            <summary>
            Construct instance for exception "No decryption key is available"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.Container.NoAvailableDecryptionKey.#ctor(System.String)">
            <summary>
            Construct instance for exception "No decryption key is available"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.Container.NoAvailableDecryptionKey.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.Container.NoAvailableDecryptionKey.UserData">
            <summary>
            User data associated with the exception.
            </summary>	
        </member>
        <member name="F:Goedel.Cryptography.Container.NoAvailableDecryptionKey.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Container.AccessRefused">
            <summary>
            Access was refused
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.AccessRefused.#ctor">
            <summary>
            Construct instance for exception "Access was refused"
            </summary>		
        </member>
        <member name="M:Goedel.Cryptography.Container.AccessRefused.#ctor(System.String)">
            <summary>
            Construct instance for exception "Access was refused"
            </summary>		
            <param name="Description">Description of the error</param>	
        </member>
        <member name="M:Goedel.Cryptography.Container.AccessRefused.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance for exception 		/// containing an inner exception.
            </summary>		
            <param name="Description">Description of the error</param>	
            <param name="Inner">Inner Exception</param>	
        </member>
        <member name="F:Goedel.Cryptography.Container.AccessRefused.UserData">
            <summary>
            User data associated with the exception.
            </summary>	
        </member>
        <member name="F:Goedel.Cryptography.Container.AccessRefused.Throw">
            <summary>
            The public fatory delegate
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Container.Extension">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.Extension.ToKeyValuePairs(System.Collections.Generic.List{Goedel.Cryptography.Container.KeyValue})">
            <summary>
            Convert list of index terms to key value pairs.
            </summary>
            <param name="Input">List of index terms to convert</param>
            <returns>The input list as a KeyValue pair.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.Extension.ToKeyValues(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Convert list of key value pairs to index terms.
            </summary>
            <param name="Input">List of key valye pairs to convert</param>
            <returns>The input list as a KeyValue Pair.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Container.ChunkMode">
            <summary>Specify chunking mode.</summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.ChunkMode.Full">
            <summary>The frame carries the complete data entry.</summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.ChunkMode.Chunk">
            <summary>The frame carries a partial, non terminal chunk.</summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.ChunkMode.Last">
            <summary>The frame carries the last chunk.</summary>
        </member>
        <member name="T:Goedel.Cryptography.Container.FileContainer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.FileContainer.Disposing">
            <summary>
            The class specific disposal routine.
            </summary>
        </member>
        <member name="T:Goedel.Cryptography.Container.FileContainerWriter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.FileContainerWriter.#ctor(System.String,System.Boolean,System.Boolean,Goedel.IO.FileStatus,System.Collections.Generic.List{Goedel.Cryptography.KeyPair},Goedel.Cryptography.Container.ContainerType)">
            <summary>
            Open a new file container for write access.
            </summary>
            <param name="FileName">The file name to create</param>
            <param name="Archive">If true, the container is intended to be used to create a multi-file
            archive.</param>
            <param name="Digest">If true, construct a digest </param>
            <param name="FileStatus">The mode to open the file in, this must be a mode
            that permits write access.</param>
            <param name="ContainerType">The container type to use. If unspecified,
            a type appropriate for the type of use will be selected.</param>
            <returns>File Container instance</returns>
            <param name="Recipients">List of JWE recipient decryption entries.</param>
            <returns>The newly constructed container.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.FileContainerWriter.#ctor(Goedel.Cryptography.Container.JBCDStream,System.Boolean,System.Boolean,Goedel.IO.FileStatus,System.Collections.Generic.List{Goedel.Cryptography.KeyPair},Goedel.Cryptography.Container.ContainerType)">
            <summary>
            Open a new file container for write access.
            </summary>
            <param name="JBCDStream">The stream to use to write the container.</param>
            <param name="Archive">If true, the container is intended to be used to create a multi-file
            archive.</param>
            <param name="Digest">If true, construct a digest </param>
            <param name="FileStatus">The mode to open the file in, this must be a mode
            that permits write access.</param>
            <param name="ContainerType">The container type to use. If unspecified,
            a type appropriate for the type of use will be selected.</param>
            <returns>File Container instance</returns>
            <param name="Recipients">List of JWE recipient decryption entries.</param>
            <returns>The newly constructed container.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.FileContainerWriter.File(System.String,System.Byte[],Goedel.Cryptography.Container.ContentMeta,Goedel.IO.FileStatus,System.Collections.Generic.List{Goedel.Cryptography.KeyPair})">
            <summary>
            Open a new file container for write access and write a single file entry.
            </summary>
            <param name="FileName">The file name to create</param>
            <param name="Data">The content data</param>
            <param name="ContentMeta">The content metadata</param>
            <param name="FileStatus">The mode to open the file in, this must be a mode
            that permits write access.</param>
            <param name="Recipients">List of JWE recipient decryption entries.</param>
            <returns>The newly constructed container.</returns>
            <returns>File Container instance</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.FileContainerWriter.Data(System.Byte[],Goedel.Cryptography.Container.ContentMeta,Goedel.IO.FileStatus,System.Collections.Generic.List{Goedel.Cryptography.KeyPair})">
            <summary>
            Open a new file container for write access and write a single file entry.
            </summary>
            <param name="DataIn">The content data</param>
            <param name="ContentMeta">The content metadata</param>
            <param name="FileStatus">The mode to open the file in, this must be a mode
            that permits write access.</param>
            <param name="Recipients">List of JWE recipient decryption entries.</param>
            <returns>The newly constructed container.</returns>
            <returns>File Container instance</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.FileContainerWriter.Add(System.Byte[],Goedel.Cryptography.Container.ContentMeta,System.Collections.Generic.List{Goedel.Cryptography.KeyPair})">
            <summary>
            Append a file entry.
            </summary>
            <param name="Data">The content data</param>
            <param name="ContentMeta">The content metadata</param>
            <param name="EncryptionKeys">List of JWE recipient decryption entries.
            If null, the default key will be used if specified in the container
            header.</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.FileContainerWriter.AddIndex(System.Collections.Generic.List{Goedel.Cryptography.KeyPair})">
            <summary>
            Append an archive frame to the container.
            </summary>
            <param name="Signatures">List of JWS signatures. Since this is the first block, the signature
            is always over the payload data only.</param>
        </member>
        <member name="T:Goedel.Cryptography.Container.FileContainerReader">
            <summary>
            
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.FileContainerReader.Count">
            <summary>
            The number of entries in the container. Note that this will have to be 
            changed when entries spanning multiple frames are supported.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.FileContainerReader.#ctor(System.String,System.Boolean,Goedel.IO.FileStatus)">
            <summary>
            Open an existing file container in read mode.
            </summary>
            <param name="FileName">The file name to read</param>
            <param name="ReadIndex">If true, read the container index to permit random access</param>
            <param name="FileStatus">The mode to open the file in, this must be a mode
            that permits read access.</param>
            <returns>File Container instance</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.FileContainerReader.#ctor(System.Byte[])">
            <summary>
            Open 
            </summary>
            <param name="Data"></param>
        </member>
        <member name="M:Goedel.Cryptography.Container.FileContainerReader.File(System.String,System.Byte[]@,Goedel.Cryptography.Container.ContentMeta@)">
            <summary>
            Open a file container and then read and return the last entry in the file.
            </summary>
            <param name="FileName">The file name to create</param>
            <param name="Data">The content data</param>
            <param name="ContentMeta">The content metadata</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.FileContainerReader.Data(System.Byte[],System.Byte[]@,Goedel.Cryptography.Container.ContentMeta@)">
            <summary>
            Create a FileReader for an in memory data source.
            </summary>
            <param name="DataIn"></param>
            <param name="Data"></param>
            <param name="ContentMeta"></param>
        </member>
        <member name="M:Goedel.Cryptography.Container.FileContainerReader.Read(System.Byte[]@,Goedel.Cryptography.Container.ContentMeta@,System.Int32,System.String)">
            <summary>
            Read an entry from a container. 
            </summary>
            <param name="Data">The data read.</param>
            <param name="ContentMeta">The metadata of the entry.</param>
            <param name="Index">Specify the index of the entry to read.</param>
            <param name="Path">Specify a path value of an entry to read.</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.FileContainerReader.GetExchange(System.Collections.Generic.List{Goedel.Cryptography.Jose.Recipient},Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Perform a Key Exchange
            </summary>
            <param name="Recipients">The list of recipients</param>
            <param name="AlgorithmID">The bulk encryption algorithm</param>
            <returns>The result of the key exchange.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Container.KeyCollection">
            <summary>
            Track a collection of keys from various sources allowing recall when required for recryption use.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.KeyCollection.Default">
            <summary>
            The default collection.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.KeyCollection.Add(Goedel.Cryptography.KeyPair)">
            <summary>
            Add a keypair to the collection.
            </summary>
            <param name="KeyPair">The key pair to add.</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.KeyCollection.Add(System.String)">
            <summary>
            Add a recryption group account to the group.
            </summary>
            <param name="RecryptionGroup"></param>
        </member>
        <member name="M:Goedel.Cryptography.Container.KeyCollection.Decrypt(System.Collections.Generic.List{Goedel.Cryptography.Jose.Recipient},Goedel.Cryptography.CryptoAlgorithmID)">
            <summary>
            Attempt to decrypt a decryption blob from a list of recipient entries.
            </summary>
            <param name="Recipients">The recipient entry.</param>
            <param name="AlgorithmID">The symmetric encryption cipher (used to decrypt the wrapped key).</param>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.KeyCollection.TryMatchRecipient(Goedel.Cryptography.Jose.Recipient)">
            <summary>
            Attempt to find a private key for the specified recipient entry.
            </summary>
            <param name="Recipient">The recipient to match</param>
            <returns>True if a match is found, otherwise false.</returns>
        </member>
        <member name="T:Goedel.Cryptography.Container.JBCDStream">
            <summary>
            Implements a highly restricted stream that supports exactly the functionality
            required by the JBCD Reader/Writer extensions. In the base class, the underlying
            implementation is supplied by a Stream object (typically a FileStream). It is
            expected this will be replaced in the future by a version that performs direct 
            memory mapping of the files.
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.JBCDStream.StreamWrite">
            <summary>
            The underlying stream for file write operations
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.JBCDStream.StreamRead">
            <summary>
            The underlying stream for file write operations
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.JBCDStream.PositionWrite">
            <summary>
            The current position within the stream.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.JBCDStream.PositionRead">
            <summary>
            The current position within the stream.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.JBCDStream.EOF">
            <summary>
            Returns true if and only if the stream reader is at the end of the file.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.JBCDStream.Length">
            <summary>
            A long value representing the length of the stream in bytes.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.#ctor(System.String,Goedel.IO.FileStatus,System.Boolean)">
            <summary>
            Constructor from a file
            </summary>
            <param name="FileName">The file to open.</param>
            <param name="FileStatus">The file access mode.</param>
            <param name="WriteOnly">If true, the file is only opened in write mode.</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            Constructor from a stream
            </summary>
            <param name="StreamRead">The underlying stream. This must support the seek operation.</param>
            <param name="StreamWrite">The underlying stream. This must support the seek operation.</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.Dispose">
            <summary>
            Dispose method, frees all resources.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.Dispose(System.Boolean)">
            <summary>
            Dispose method, frees resources when disposing, 
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the read position within the current stream.
            </summary>
            <param name="Offset">A byte offset relative to the origin parameter.</param>
            <param name="Origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.Begin">
            <summary>
            Move the read position to the beginning of the stream.
            </summary>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.End">
            <summary>
            Move the read position to the end of the stream.
            </summary>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.SeekWrite">
            <summary>
            Set the write pointer to the end of the container.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the end of the stream.
            </summary>
            <param name="Value">The byte to write to the stream.</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the 
            current position within this stream by the number of bytes written.
            </summary>
            <param name="Buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="Offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="Count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="Buffer"> An array of bytes. When this method returns, the buffer contains the specified byte array with the values between 
            offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="Offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="Count">Number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested 
            if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if 
            at the end of the stream.
            </summary>
            <returns>The unsigned byte cast to an Int32, or -1 if at the end of the stream.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.ReadByteReverse">
            <summary>
            Read a byte in the reverse direction, i.e. the byte immediately preceding the 
            current position.
            </summary>
            <returns>The byte read or -1.</returns>
            <exception cref="T:Goedel.Cryptography.Container.InvalidFileFormatException">The record data read from disk was invalid</exception>
        </member>
        <member name="F:Goedel.Cryptography.Container.JBCDStream.UFrame">
            <summary>JSON-B Code for unidirectional frame</summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.JBCDStream.BFrame">
            <summary>JSON-B Code for bidirectional frame</summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.JBCDStream.Length8">
            <summary>JSON-B Code for 8 bit length</summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.JBCDStream.Length16">
            <summary>JSON-B Code for 16 bit length</summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.JBCDStream.Length32">
            <summary>JSON-B Code for 32 bit length</summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.JBCDStream.Length64">
            <summary>JSON-B Code for 64 bit length</summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.JBCDStream.LengthMask">
            <summary>JSON-B Length mask </summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.JBCDStream.TypeMask">
            <summary>JSON-B Type mask </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.TagLength(System.Int64)">
            <summary>
            Return the shortest tag length for the specified production.
            </summary>
            <param name="Length">Length of data to follow.</param>
            <returns>The tag length.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.TagSpace(System.Int32)">
            <summary>
            Return the length of a code
            </summary>
            <param name="Code">Base code.</param>
            <returns>The number of bytes required.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.CodeSpace(System.Int32)">
            <summary>
            Return the length of a code
            </summary>
            <param name="Code">Base code.</param>
            <returns>The number of bytes required.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.TotalLength(System.Int64)">
            <summary>
            Determine Tag length using the shortest possible production
            </summary>
            <param name="Length">Length of data to follow.</param>
            <returns>The number of bytes required.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.TotalLength2(System.Int64)">
            <summary>
            Determine Tag length using the shortest possible production
            </summary>
            <param name="Length">Length of data to follow.</param>
            /// <returns>The number of bytes required.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.WriteTag(System.Byte,System.Int64)">
            <summary>
            Write out a Tag-Length value using the shortest possible production
            </summary>
            <param name="Code">Base code.</param>
            <param name="Length">Length of data to follow.</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.WriteTagReverse(System.Byte,System.Int64)">
            <summary>
            Write out a Tag-Length value using the shortest possible production
            </summary>
            <param name="Code">Base code.</param>
            <param name="Length">Length of data to follow.</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.WriteFrame(System.Byte[],System.Int64,System.Int64,System.Boolean)">
            <summary>
            Write a unidirectional or bidirectional frame to the current stream at the current write position. 
            The code does not currently support 64 bit frames as it should.
            </summary>
            <param name="FrameData">The data to write.</param>
            <param name="Offset">Offset within the data.</param>
            <param name="Length">Number of bytes to write.</param>
            <param name="Bidirectional">If true, a bidirectional frame is written.</param>
            <returns>The total size of the frame.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.WriteWrappedFrame(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Write a wrapped frame containing a header and an optional data section
            to the current stream at the current write position. 
            The code does not currently support 64 bit frames as it should.
            </summary>
            <param name="FrameHeader">The header data to write.</param>
            <param name="FrameData1">First data record, contains data content.</param>
            <param name="FrameData2">Second data record, contains protected metadata.</param>
            <returns>The total size of the frame.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.ReadLength(System.Int32,System.Int64@)">
            <summary>
            Read a length value of known length in the forward direction.
            </summary>
            <param name="LengthLength">The number of bytes to read.</param>
            <param name="Length">The length value read.</param>
            <returns>Always true. All failures trigger exceptions.</returns>
            <exception cref="T:Goedel.Cryptography.Container.InvalidFileFormatException">The record data read from disk was invalid</exception>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.CheckReversedLength(System.Int32,System.Int64)">
            <summary>
            Check a reversed length value of known length in the forward direction (from the start of the
            file to the end).
            </summary>
            <param name="Code">The code that was read</param>
            <param name="LengthIn">The length value read.</param>
            <returns>Always true. All failures trigger exceptions.</returns>
            <exception cref="T:Goedel.Cryptography.Container.InvalidFileFormatException">The record data read from disk was invalid</exception>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.ReadLengthReverse(System.Int32,System.Int64@)">
            <summary>
            Read a length value of known length in the reverse direction.
            </summary>
            <param name="LengthLength">The number of bytes to read.</param>
            <param name="Length">The length value read.</param>
            <returns>Always true. All failures trigger exceptions.</returns>
            <exception cref="T:Goedel.Cryptography.Container.InvalidFileFormatException">The record data read from disk was invalid</exception>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.ReadTag(System.Int32@,System.Int64@)">
            <summary>
            Read a forward length tag in the forward direction
            </summary>
            <param name="Code">The tag code that was read</param>
            <param name="Length">The length that was read</param>
            <returns>True if a tag was read or false if EOF was encountered.</returns>
            <exception cref="T:Goedel.Cryptography.Container.InvalidFileFormatException">The record data read from disk was invalid</exception>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.ReadTagReverse(System.Int32@,System.Int64@)">
            <summary>
            Read a forward length tag in the Reverse direction
            </summary>
            <param name="Code">The tag code that was read</param>
            <param name="Length">The length that was read</param>
            <returns>True if a tag was read or false if EOF was encountered.</returns>
            <exception cref="T:Goedel.Cryptography.Container.InvalidFileFormatException">The record data read from disk was invalid</exception>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.ReadRecord(System.Int64@,System.Byte[]@)">
            <summary>
             Read a frame in the forward direction.
            </summary>
            <param name="MaxLength">The maximum length of data to read including the tags</param>
            <param name="Data">The data that was read.</param>
            <returns>True if a tag was read or false if EOF was encountered.</returns>
            <exception cref="T:Goedel.Cryptography.Container.InvalidFileFormatException">The record data read from disk was invalid</exception>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.ReadFrame(System.Byte[]@,System.Byte[]@)">
            <summary>
            Read a pair of wrapped frames in the forward direction.
            </summary>
            <param name="FrameData">The payload data that was read.</param>
            <param name="FrameHeader">The header data that was read.</param>
            <returns>True if a tag was read or false if EOF was encountered.</returns>
            <exception cref="T:Goedel.Cryptography.Container.InvalidFileFormatException">The record data read from disk was invalid</exception>
        </member>
        <member name="P:Goedel.Cryptography.Container.JBCDStream.StartLastFrameRead">
            <summary>
            Records the start position of the last frame that was read.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.Next">
            <summary>
            Move to the next position in the stream without reading any part of it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.Previous">
            <summary>
            Move to the previous position in the stream without reading any part of it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.ReadFrame(System.Byte[]@)">
            <summary>
            Read a pair of wrapped frames in the forward direction.
            </summary>
            <param name="FrameHeader">The header data that was read.</param>
            <returns>True if a tag was read or false if EOF was encountered.</returns>
            <exception cref="T:Goedel.Cryptography.Container.InvalidFileFormatException">The record data read from disk was invalid</exception>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.ReadFrameReverse(System.Byte[]@,System.Byte[]@)">
            <summary>
            Read a pair of wrapped frames in the reverse direction. This is typically done to read the last
            record in a file to see how the file should be extended.
            </summary>
            <param name="FrameData">The payload data that was read.</param>
            <param name="FrameHeader">The header data that was read.</param>
            <returns>True if a tag was read or false if EOF was encountered.</returns>
            <exception cref="T:Goedel.Cryptography.Container.InvalidFileFormatException">The record data read from disk was invalid</exception>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.ReadFrameReverse(System.Byte[]@)">
            <summary>
            Read a pair of wrapped frames in the reverse direction. This is typically done to read the last
            record in a file to see how the file should be extended.
            </summary>
            <param name="FrameHeader">The header data that was read.</param>
            <returns>True if a tag was read or false if EOF was encountered.</returns>
            <exception cref="T:Goedel.Cryptography.Container.InvalidFileFormatException">The record data read from disk was invalid</exception>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.ReadFrameHeader">
            <summary>
            Read the final frame header
            </summary>
            <returns>The last frame header</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.ReadFirstFrameHeader">
            <summary>
            Read the final frame header
            </summary>
            <returns>The last frame header</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStream.ReadLastFrameHeader">
            <summary>
            Read the final frame header
            </summary>
            <returns>The last frame header</returns>
        </member>
        <member name="T:Goedel.Cryptography.Container.JBCDStreamDebug">
            <summary>
            Debugging version of JBCDStream
            </summary>
        </member>
        <member name="F:Goedel.Cryptography.Container.JBCDStreamDebug.Active">
            <summary>
            Output flag. 
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStreamDebug.#ctor(System.String,Goedel.IO.FileStatus,System.Boolean,System.IO.TextWriter)">
            <summary>
            Constructor from a file
            </summary>
            <param name="FileName">The file to open.</param>
            <param name="FileStatus">The file access mode.</param>
            <param name="WriteOnly">If true, the file is only opened in write mode.</param>
            <param name="Output">The additional output stream.</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStreamDebug.#ctor(System.IO.Stream,System.IO.TextWriter)">
            <summary>
            Constructor from a stream
            </summary>
            <param name="Stream">The underlying stream. This must support the seek operation.</param>
            <param name="Output">The additional output stream.</param>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStreamDebug.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if 
            at the end of the stream.
            </summary>
            <returns>The unsigned byte cast to an Int32, or -1 if at the end of the stream.</returns>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStreamDebug.ReadByteReverse">
            <summary>
            Read a byte in the reverse direction, i.e. the byte immediately preceding the 
            current position.
            </summary>
            <returns>The byte read or -1.</returns>
            <exception cref="T:Goedel.Cryptography.Container.InvalidFileFormatException">The record data read from disk was invalid</exception>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStreamDebug.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="Buffer"> An array of bytes. When this method returns, the buffer contains the specified byte array with the values between 
            offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="Offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="Count">Number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested 
            if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
        </member>
        <member name="P:Goedel.Cryptography.Container.JBCDStreamDebug.DisplayBytesMax">
            <summary>
            Maximum number of bytes to display before turning on summary mode.
            </summary>
        </member>
        <member name="P:Goedel.Cryptography.Container.JBCDStreamDebug.DisplayBytesSummary">
            <summary>
            Number of bytes to display in summary mode.
            </summary>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStreamDebug.ReadTag(System.Int32@,System.Int64@)">
            <summary>
            Read a forward length tag in the forward direction
            </summary>
            <param name="Code">The tag code that was read</param>
            <param name="Length">The length that was read</param>
            <returns>True if a tag was read or false if EOF was encountered.</returns>
            <exception cref="T:Goedel.Cryptography.Container.InvalidFileFormatException">The record data read from disk was invalid</exception>
        </member>
        <member name="M:Goedel.Cryptography.Container.JBCDStreamDebug.CheckReversedLength(System.Int32,System.Int64)">
            <summary>
            Check a reversed length value of known length in the forward direction (from the start of the
            file to the end).
            </summary>
            <param name="Code">The tag code that was read</param>
            <param name="LengthIn">The length that was read</param>
            <returns>Always true. All failures trigger exceptions.</returns>
            <exception cref="T:Goedel.Cryptography.Container.InvalidFileFormatException">The record data read from disk was invalid</exception>
        </member>
        <member name="T:Goedel.Cryptography.Container.NamespaceDoc">
            <summary>
            Classes to manage a JBCD Container file.
            
            <para>All JBCD Containers support efficient append only access with 
            efficient read-only access in both the forward and the reverse 
            directions.</para>
            
            <para>Setting the IsTree parameter to true when a container is 
            first created causes a binary tree structure to be embedded into
            the file as it is written. This incurs a modest (log n) performance
            penalty on write but enables efficient random access (log n).</para>
            
            <para>Either type of container may be protected against an insertion
            attack with the use of a chained digest. If the container type if a 
            binary tree, a Merkle Tree is constructed. Otherwise, a simple chain 
            construction is used.</para>
            </summary>
        </member>
    </members>
</doc>
