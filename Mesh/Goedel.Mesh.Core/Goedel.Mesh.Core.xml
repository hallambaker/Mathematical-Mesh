<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Goedel.Mesh.Core</name>
    </assembly>
    <members>
        <member name="T:Goedel.Mesh.Mesh">
            <summary>
            Initialization class. Applications should perform a call to Mesh.Initialize 
            before using Mesh library functions.
            </summary>
        </member>
        <member name="M:Goedel.Mesh.Mesh.Initialize(System.Boolean)">
            <summary>
            Thread safe generic initialization, calls the initialization for the
            cryptographic support libraries exactly once. 
            </summary>
            <remarks>This method is defined in each of the platform specific packages, to
            allow use of shared libraries for cross-platform support. If an implementation
            is linked to multiple platform packages, the platform specific initialization must
            be called for each.</remarks>
        </member>
        <member name="M:Goedel.Mesh.Mesh.InitializationCore(System.Boolean)">
            <summary>
            Initialization routine for all Mesh functions on the dotNet Core platform.
            </summary>
        </member>
        <member name="T:Goedel.Mesh.MeshMachineCoreServer">
            <summary>
            The  Mesh server.
            </summary>
        </member>
        <member name="P:Goedel.Mesh.MeshMachineCoreServer.DirectoryMaster">
            <summary>The directory used to store the master data.</summary>
        </member>
        <member name="P:Goedel.Mesh.MeshMachineCoreServer.DirectoryMesh">
            <summary>The directory used to store the account mesh data.</summary>
        </member>
        <member name="P:Goedel.Mesh.MeshMachineCoreServer.DirectoryKeys">
            <summary>The directory used to store host keys.</summary>
        </member>
        <member name="P:Goedel.Mesh.MeshMachineCoreServer.KeyCollection">
            <summary>The host key collection.</summary>
        </member>
        <member name="F:Goedel.Mesh.MeshMachineCoreServer.FileTypeHost">
            <summary>The IANA media type for the host file data.</summary>
        </member>
        <member name="M:Goedel.Mesh.MeshMachineCoreServer.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="directory">Directory to store the server information.</param>
        </member>
        <member name="M:Goedel.Mesh.MeshMachineCoreServer.GetKeyCollection">
            <summary>
            Get the host key collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Goedel.Mesh.MeshMachineCoreServer.CreateKeyPair(Goedel.Cryptography.CryptoAlgorithmId,Goedel.Cryptography.KeySecurity,System.Int32,Goedel.Cryptography.KeyUses)">
            <summary>
            Generate a keypair of a type specified by <paramref name="algorithmID"/> and bind to the 
            KeyCollection of the machine instance.
            </summary>
            <param name="algorithmID">The type of keypair to create.</param>
            <param name="keySize">The key size (ignored if the algorithm supports only one key size)</param>
            <param name="keySecurity">The key security model</param>
            <param name="keyUses">The permitted uses (signing, exchange) for the key.</param>
            <returns>The created key pair</returns>
        </member>
        <member name="T:Goedel.Mesh.MeshMachineCore">
            <summary>
            
            </summary>
            <remarks>This implementation does not currently support concurrent access to the Mesh profile files
            from separate processes. This support should be added my introducing a system wide lock that is
            obtained before attempting a write operation and while opening a container.</remarks>
        </member>
        <member name="P:Goedel.Mesh.MeshMachineCore.MeshHost">
            <summary>The Mesh Host</summary>
        </member>
        <member name="P:Goedel.Mesh.MeshMachineCore.FileNameHost">
            <summary>The file name of the host catalog.</summary>
        </member>
        <member name="M:Goedel.Mesh.MeshMachineCore.Disposing">
            <summary>
            Disposing routine. Feee internal resources  and shut down the Mesh Host.
            </summary>
        </member>
        <member name="M:Goedel.Mesh.MeshMachineCore.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Goedel.Mesh.MeshMachineCore.#ctor(System.String)">
            <summary>
            Constructor, creating a service instance using <paramref name="directory"/>
            to store persistent data.
            </summary>
            <param name="directory">Directory to store persistence data.</param>
        </member>
        <member name="M:Goedel.Mesh.MeshMachineCore.GetMachine">
            <summary>
            Factory constructor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Goedel.Mesh.MeshMachineCore.GetMeshClient(System.String,Goedel.Cryptography.KeyPair,Goedel.Mesh.ConnectionAccount,Goedel.Mesh.Profile)">
            <summary>
            Return a MeshService client for the service ID <paramref name="serviceID"/>
            using the authentication key <paramref name="keyAuthentication"/> and credential
            <paramref name="assertionAccountConnection"/>. 
            </summary>
            <param name="serviceID">The service identifier to connect to.</param>
            <param name="keyAuthentication">The private key to be used for authentication
            (encryption).</param>
            <param name="assertionAccountConnection">The credential binding the device
            to the account.</param>
            <param name="profile">The profile. This is required when requesting
            an inbound connection or requesting that a new account be created and optional
            otherwise.</param>
            <returns></returns>
        </member>
    </members>
</doc>
